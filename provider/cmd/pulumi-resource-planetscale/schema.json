{
    "name": "planetscale",
    "description": "A Pulumi package for creating and managing planetscale cloud resources.",
    "keywords": [
        "sst-provider",
        "planetscale",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`planetscale` Terraform Provider](https://github.com/sst/terraform-provider-planetscale).",
    "repository": "https://github.com/sst/pulumi-planetscale",
    "publisher": "sst-provider",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/sst/pulumi-planetscale/sdk/go/planetscale",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing planetscale cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/sst/terraform-provider-planetscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-planetscale` repo](https://github.com/sst/pulumi-planetscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-planetscale` repo](https://github.com/sst/terraform-provider-planetscale/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/sst/terraform-provider-planetscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-planetscale` repo](https://github.com/sst/pulumi-planetscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-planetscale` repo](https://github.com/sst/terraform-provider-planetscale/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "Name of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN_NAME`. Mutually exclusive with\n`service_token_name` and `service_token`.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "If set, points the API client to a different endpoint than `https:://api.planetscale.com/v1`.\n"
            },
            "serviceToken": {
                "type": "string",
                "description": "Value of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN`. Mutually exclusive with\n`access_token`.\n",
                "secret": true
            },
            "serviceTokenName": {
                "type": "string",
                "description": "Name of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN_NAME`. Mutually exclusive with\n`access_token`.\n"
            }
        }
    },
    "types": {
        "planetscale:index/BackupActor:BackupActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "avatarUrl",
                        "displayName",
                        "id"
                    ]
                }
            }
        },
        "planetscale:index/BackupBackupPolicy:BackupBackupPolicy": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the backup policy was created.\n"
                },
                "frequencyUnit": {
                    "type": "string",
                    "description": "The unit for the frequency of the backup policy. Not configurable for now.\n"
                },
                "frequencyValue": {
                    "type": "number",
                    "description": "A number value for the frequency of the backup policy. Not configurable for now.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the backup policy.\n"
                },
                "lastRanAt": {
                    "type": "string",
                    "description": "When the backup was last run.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backup policy.\n"
                },
                "nextRunAt": {
                    "type": "string",
                    "description": "When the backup will next run.\n"
                },
                "retentionUnit": {
                    "type": "string",
                    "description": "The unit for the retention period of the backup policy.\n"
                },
                "retentionValue": {
                    "type": "number",
                    "description": "A number value for the retention period of the backup policy.\n"
                },
                "scheduleDay": {
                    "type": "string",
                    "description": "Day of the week that the backup is scheduled.\n"
                },
                "scheduleWeek": {
                    "type": "string",
                    "description": "Week of the month that the backup is scheduled.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Whether the backup policy is for a production or development database, or for a database branch.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the backup policy was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "retentionUnit",
                "retentionValue"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "frequencyUnit",
                        "frequencyValue",
                        "id",
                        "lastRanAt",
                        "name",
                        "nextRunAt",
                        "retentionUnit",
                        "retentionValue",
                        "scheduleDay",
                        "scheduleWeek",
                        "target",
                        "updatedAt"
                    ]
                }
            }
        },
        "planetscale:index/BranchActor:BranchActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "avatarUrl",
                        "displayName",
                        "id"
                    ]
                }
            }
        },
        "planetscale:index/BranchRegion:BranchRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "enabled",
                        "id",
                        "location",
                        "provider",
                        "publicIpAddresses",
                        "slug"
                    ]
                }
            }
        },
        "planetscale:index/BranchRestoredFromBranch:BranchRestoredFromBranch": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the resource was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the resource was deleted, if deleted.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID for the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the resource.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the resource was last updated.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "deletedAt",
                        "id",
                        "name",
                        "updatedAt"
                    ]
                }
            }
        },
        "planetscale:index/DatabaseDataImport:DatabaseDataImport": {
            "properties": {
                "dataSource": {
                    "$ref": "#/types/planetscale:index/DatabaseDataImportDataSource:DatabaseDataImportDataSource",
                    "description": "Connection information for the source of the data for the import.\n"
                },
                "finishedAt": {
                    "type": "string",
                    "description": "When the import finished.\n"
                },
                "importCheckErrors": {
                    "type": "string",
                    "description": "Errors encountered while preparing the import.\n"
                },
                "startedAt": {
                    "type": "string",
                    "description": "When the import started.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dataSource",
                        "finishedAt",
                        "importCheckErrors",
                        "startedAt",
                        "state"
                    ]
                }
            }
        },
        "planetscale:index/DatabaseDataImportDataSource:DatabaseDataImportDataSource": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database imported from.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname where the database lives.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The port on which the database listens on the host.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "port"
            ]
        },
        "planetscale:index/PasswordActor:PasswordActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "avatarUrl",
                        "displayName",
                        "id"
                    ]
                }
            }
        },
        "planetscale:index/PasswordDatabaseBranch:PasswordDatabaseBranch": {
            "properties": {
                "accessHostUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mysqlEdgeAddress": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessHostUrl",
                        "id",
                        "mysqlEdgeAddress",
                        "name",
                        "production"
                    ]
                }
            }
        },
        "planetscale:index/PasswordRegion:PasswordRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "enabled",
                        "id",
                        "location",
                        "provider",
                        "publicIpAddresses",
                        "slug"
                    ]
                }
            }
        },
        "planetscale:index/getBackupActor:getBackupActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "displayName",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBackupBackupPolicy:getBackupBackupPolicy": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the backup policy was created.\n"
                },
                "frequencyUnit": {
                    "type": "string",
                    "description": "The unit for the frequency of the backup policy.\n"
                },
                "frequencyValue": {
                    "type": "number",
                    "description": "A number value for the frequency of the backup policy.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the backup policy.\n"
                },
                "lastRanAt": {
                    "type": "string",
                    "description": "When the backup was last run.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backup policy.\n"
                },
                "nextRunAt": {
                    "type": "string",
                    "description": "When the backup will next run.\n"
                },
                "retentionUnit": {
                    "type": "string",
                    "description": "The unit for the retention period of the backup policy.\n"
                },
                "retentionValue": {
                    "type": "number",
                    "description": "A number value for the retention period of the backup policy.\n"
                },
                "scheduleDay": {
                    "type": "string",
                    "description": "Day of the week that the backup is scheduled.\n"
                },
                "scheduleWeek": {
                    "type": "string",
                    "description": "Week of the month that the backup is scheduled.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Whether the backup policy is for a production or development database, or for a database branch.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the backup policy was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "frequencyUnit",
                "frequencyValue",
                "id",
                "lastRanAt",
                "name",
                "nextRunAt",
                "retentionUnit",
                "retentionValue",
                "scheduleDay",
                "scheduleWeek",
                "target",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBackupsBackup:getBackupsBackup": {
            "properties": {
                "actor": {
                    "$ref": "#/types/planetscale:index/getBackupsBackupActor:getBackupsBackupActor",
                    "description": "The actor that created the backup.\n"
                },
                "backupPolicy": {
                    "$ref": "#/types/planetscale:index/getBackupsBackupBackupPolicy:getBackupsBackupBackupPolicy",
                    "description": "The backup policy being followed.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch this backup belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the backup was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this backup belongs to.\n"
                },
                "estimatedStorageCost": {
                    "type": "string",
                    "description": "The estimated storage cost of the backup.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the backup.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backup.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this backup belongs to.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether or not the backup policy is required.\n"
                },
                "restoredBranches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Branches that have been restored with this backup.\n"
                },
                "size": {
                    "type": "number",
                    "description": "The size of the backup.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the backup.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the backup was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "actor",
                "backupPolicy",
                "branch",
                "createdAt",
                "database",
                "estimatedStorageCost",
                "id",
                "name",
                "organization",
                "required",
                "restoredBranches",
                "size",
                "state",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBackupsBackupActor:getBackupsBackupActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "displayName",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBackupsBackupBackupPolicy:getBackupsBackupBackupPolicy": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the backup policy was created.\n"
                },
                "frequencyUnit": {
                    "type": "string",
                    "description": "The unit for the frequency of the backup policy.\n"
                },
                "frequencyValue": {
                    "type": "number",
                    "description": "A number value for the frequency of the backup policy.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the backup policy.\n"
                },
                "lastRanAt": {
                    "type": "string",
                    "description": "When the backup was last run.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backup policy.\n"
                },
                "nextRunAt": {
                    "type": "string",
                    "description": "When the backup will next run.\n"
                },
                "retentionUnit": {
                    "type": "string",
                    "description": "The unit for the retention period of the backup policy.\n"
                },
                "retentionValue": {
                    "type": "number",
                    "description": "A number value for the retention period of the backup policy.\n"
                },
                "scheduleDay": {
                    "type": "string",
                    "description": "Day of the week that the backup is scheduled.\n"
                },
                "scheduleWeek": {
                    "type": "string",
                    "description": "Week of the month that the backup is scheduled.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Whether the backup policy is for a production or development database, or for a database branch.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the backup policy was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "frequencyUnit",
                "frequencyValue",
                "id",
                "lastRanAt",
                "name",
                "nextRunAt",
                "retentionUnit",
                "retentionValue",
                "scheduleDay",
                "scheduleWeek",
                "target",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchActor:getBranchActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "displayName",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchRegion:getBranchRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchRestoredFromBranch:getBranchRestoredFromBranch": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the resource was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the resource was deleted, if deleted.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID for the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the resource.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the resource was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "deletedAt",
                "id",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchSchemaLintError:getBranchSchemaLintError": {
            "properties": {
                "autoIncrementColumnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of invalid auto-incremented columns.\n"
                },
                "charsetName": {
                    "type": "string",
                    "description": "The charset of the schema.\n"
                },
                "checkConstraintName": {
                    "type": "string",
                    "description": "The name of the invalid check constraint.\n"
                },
                "columnName": {
                    "type": "string",
                    "description": "The column in a table relevant to the error.\n"
                },
                "docsUrl": {
                    "type": "string",
                    "description": "A link to the documentation related to the error.\n"
                },
                "engineName": {
                    "type": "string",
                    "description": "The engine of the schema.\n"
                },
                "enumValue": {
                    "type": "string",
                    "description": "The name of the invalid enum value.\n"
                },
                "errorDescription": {
                    "type": "string",
                    "description": "A description for the error that occurred.\n"
                },
                "foreignKeyColumnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of invalid foreign key columns in a table.\n"
                },
                "jsonPath": {
                    "type": "string",
                    "description": "The path for an invalid JSON column.\n"
                },
                "keyspaceName": {
                    "type": "string",
                    "description": "The keyspace of the schema with the error.\n"
                },
                "lintError": {
                    "type": "string",
                    "description": "Code representing.\n"
                },
                "partitionName": {
                    "type": "string",
                    "description": "The name of the invalid partition in the schema.\n"
                },
                "partitioningType": {
                    "type": "string",
                    "description": "The name of the invalid partitioning type.\n"
                },
                "subjectType": {
                    "type": "string",
                    "description": "The subject for the errors.\n"
                },
                "tableName": {
                    "type": "string",
                    "description": "The table with the error.\n"
                },
                "vindexName": {
                    "type": "string",
                    "description": "The name of the vindex for the schema.\n"
                }
            },
            "type": "object",
            "required": [
                "autoIncrementColumnNames",
                "charsetName",
                "checkConstraintName",
                "columnName",
                "docsUrl",
                "engineName",
                "enumValue",
                "errorDescription",
                "foreignKeyColumnNames",
                "jsonPath",
                "keyspaceName",
                "lintError",
                "partitionName",
                "partitioningType",
                "subjectType",
                "tableName",
                "vindexName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchSchemaTable:getBranchSchemaTable": {
            "properties": {
                "html": {
                    "type": "string",
                    "description": "Syntax highlighted HTML for the table's schema.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the table.\n"
                },
                "raw": {
                    "type": "string",
                    "description": "The table's schema.\n"
                }
            },
            "type": "object",
            "required": [
                "html",
                "name",
                "raw"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchesBranch:getBranchesBranch": {
            "properties": {
                "accessHostUrl": {
                    "type": "string",
                    "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.\n"
                },
                "actor": {
                    "$ref": "#/types/planetscale:index/getBranchesBranchActor:getBranchesBranchActor",
                    "description": "The actor who created this branch.\n"
                },
                "clusterRateName": {
                    "type": "string",
                    "description": "The SKU representing the branch's cluster size.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the branch was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this branch belongs to.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "Planetscale app URL for the branch.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the branch.\n"
                },
                "initialRestoreId": {
                    "type": "string",
                    "description": "The ID of the backup from which the branch was restored.\n"
                },
                "mysqlAddress": {
                    "type": "string",
                    "description": "The MySQL address for the branch.\n"
                },
                "mysqlEdgeAddress": {
                    "type": "string",
                    "description": "The address of the MySQL provider for the branch.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the branch.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this branch belongs to.\n"
                },
                "parentBranch": {
                    "type": "string",
                    "description": "The name of the parent branch from which the branch was created.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "Whether or not the branch is a production branch.\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "Whether or not the branch is ready to serve queries.\n"
                },
                "region": {
                    "$ref": "#/types/planetscale:index/getBranchesBranchRegion:getBranchesBranchRegion",
                    "description": "The region in which this branch lives.\n"
                },
                "restoreChecklistCompletedAt": {
                    "type": "string",
                    "description": "When a user last marked a backup restore checklist as completed.\n"
                },
                "restoredFromBranch": {
                    "$ref": "#/types/planetscale:index/getBranchesBranchRestoredFromBranch:getBranchesBranchRestoredFromBranch"
                },
                "schemaLastUpdatedAt": {
                    "type": "string",
                    "description": "When the schema for the branch was last updated.\n"
                },
                "shardCount": {
                    "type": "number",
                    "description": "The number of shards in the branch.\n"
                },
                "sharded": {
                    "type": "boolean",
                    "description": "Whether or not the branch is sharded.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the branch was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "accessHostUrl",
                "actor",
                "clusterRateName",
                "createdAt",
                "database",
                "htmlUrl",
                "id",
                "initialRestoreId",
                "mysqlAddress",
                "mysqlEdgeAddress",
                "name",
                "organization",
                "parentBranch",
                "production",
                "ready",
                "region",
                "restoreChecklistCompletedAt",
                "restoredFromBranch",
                "schemaLastUpdatedAt",
                "shardCount",
                "sharded",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchesBranchActor:getBranchesBranchActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "displayName",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchesBranchRegion:getBranchesBranchRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getBranchesBranchRestoredFromBranch:getBranchesBranchRestoredFromBranch": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the resource was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the resource was deleted, if deleted.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID for the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the resource.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the resource was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "deletedAt",
                "id",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabaseDataImport:getDatabaseDataImport": {
            "properties": {
                "dataSource": {
                    "$ref": "#/types/planetscale:index/getDatabaseDataImportDataSource:getDatabaseDataImportDataSource",
                    "description": "Connection information for the source of the data for the import.\n"
                },
                "finishedAt": {
                    "type": "string",
                    "description": "When the import finished.\n"
                },
                "importCheckErrors": {
                    "type": "string",
                    "description": "Errors encountered while preparing the import.\n"
                },
                "startedAt": {
                    "type": "string",
                    "description": "When the import started.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.\n"
                }
            },
            "type": "object",
            "required": [
                "dataSource",
                "finishedAt",
                "importCheckErrors",
                "startedAt",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabaseDataImportDataSource:getDatabaseDataImportDataSource": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database imported from.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname where the database lives.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The port on which the database listens on the host.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "port"
            ]
        },
        "planetscale:index/getDatabaseReadOnlyRegionsRegion:getDatabaseReadOnlyRegionsRegion": {
            "properties": {
                "actor": {
                    "$ref": "#/types/planetscale:index/getDatabaseReadOnlyRegionsRegionActor:getDatabaseReadOnlyRegionsRegionActor",
                    "description": "The actor that created the read-only region.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the read-only region was created.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the read-only region.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the read-only region.\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "Whether or not the read-only region is ready to serve queries.\n"
                },
                "readyAt": {
                    "type": "string",
                    "description": "When the read-only region was ready to serve queries.\n"
                },
                "region": {
                    "$ref": "#/types/planetscale:index/getDatabaseReadOnlyRegionsRegionRegion:getDatabaseReadOnlyRegionsRegionRegion",
                    "description": "The details of the read-only region.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the read-only region was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "actor",
                "createdAt",
                "displayName",
                "id",
                "ready",
                "readyAt",
                "region",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabaseReadOnlyRegionsRegionActor:getDatabaseReadOnlyRegionsRegionActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "displayName",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabaseReadOnlyRegionsRegionRegion:getDatabaseReadOnlyRegionsRegionRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabaseRegion:getDatabaseRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabaseRegionsRegion:getDatabaseRegionsRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabasesDatabase:getDatabasesDatabase": {
            "properties": {
                "allowDataBranching": {
                    "type": "boolean",
                    "description": "Whether seeding branches with data is enabled for all branches.\n"
                },
                "atBackupRestoreBranchesLimit": {
                    "type": "boolean",
                    "description": "If the database has reached its backup restored branch limit.\n"
                },
                "atDevelopmentBranchLimit": {
                    "type": "boolean",
                    "description": "If the database has reached its development branch limit.\n"
                },
                "automaticMigrations": {
                    "type": "boolean",
                    "description": "Whether to automatically manage Rails migrations during deploy requests.\n"
                },
                "branchesCount": {
                    "type": "number",
                    "description": "The total number of database branches.\n"
                },
                "branchesUrl": {
                    "type": "string",
                    "description": "The URL to retrieve this database's branches via the API.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the database was created.\n"
                },
                "dataImport": {
                    "$ref": "#/types/planetscale:index/getDatabasesDatabaseDataImport:getDatabasesDatabaseDataImport",
                    "description": "If the database was created from an import, describes the import process.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the database.\n"
                },
                "defaultBranchReadOnlyRegionsCount": {
                    "type": "number",
                    "description": "Number of read only regions in the default branch.\n"
                },
                "defaultBranchShardCount": {
                    "type": "number",
                    "description": "Number of shards in the default branch.\n"
                },
                "defaultBranchTableCount": {
                    "type": "number",
                    "description": "Number of tables in the default branch schema.\n"
                },
                "developmentBranchesCount": {
                    "type": "number",
                    "description": "The total number of database development branches.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The total number of database development branches.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the database.\n"
                },
                "insightsRawQueries": {
                    "type": "boolean",
                    "description": "The URL to see this database's branches in the web UI.\n"
                },
                "issuesCount": {
                    "type": "number",
                    "description": "The total number of ongoing issues within a database.\n"
                },
                "migrationFramework": {
                    "type": "string",
                    "description": "Framework used for applying migrations.\n"
                },
                "migrationTableName": {
                    "type": "string",
                    "description": "Table name to use for copying schema migration data.\n"
                },
                "multipleAdminsRequiredForDeletion": {
                    "type": "boolean",
                    "description": "If the database requires multiple admins for deletion.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this database.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this database belongs to.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The database plan.\n"
                },
                "productionBranchWebConsole": {
                    "type": "boolean",
                    "description": "Whether web console is enabled for production branches.\n"
                },
                "productionBranchesCount": {
                    "type": "number",
                    "description": "The total number of database production branches.\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the database is ready to be used.\n"
                },
                "region": {
                    "$ref": "#/types/planetscale:index/getDatabasesDatabaseRegion:getDatabasesDatabaseRegion",
                    "description": "The region the database lives in.\n"
                },
                "requireApprovalForDeploy": {
                    "type": "boolean",
                    "description": "Whether an approval is required to deploy schema changes to this database.\n"
                },
                "restrictBranchRegion": {
                    "type": "boolean",
                    "description": "Whether to restrict branch creation to one region.\n"
                },
                "schemaLastUpdatedAt": {
                    "type": "string",
                    "description": "When the default branch schema was last changed.\n"
                },
                "sharded": {
                    "type": "boolean",
                    "description": "If the database is sharded.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the database.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the database was last updated.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the database API endpoint.\n"
                }
            },
            "type": "object",
            "required": [
                "allowDataBranching",
                "atBackupRestoreBranchesLimit",
                "atDevelopmentBranchLimit",
                "automaticMigrations",
                "branchesCount",
                "branchesUrl",
                "createdAt",
                "defaultBranch",
                "defaultBranchReadOnlyRegionsCount",
                "defaultBranchShardCount",
                "defaultBranchTableCount",
                "developmentBranchesCount",
                "htmlUrl",
                "id",
                "insightsRawQueries",
                "issuesCount",
                "migrationFramework",
                "migrationTableName",
                "multipleAdminsRequiredForDeletion",
                "name",
                "organization",
                "plan",
                "productionBranchWebConsole",
                "productionBranchesCount",
                "ready",
                "region",
                "requireApprovalForDeploy",
                "restrictBranchRegion",
                "schemaLastUpdatedAt",
                "sharded",
                "state",
                "updatedAt",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabasesDatabaseDataImport:getDatabasesDatabaseDataImport": {
            "properties": {
                "dataSource": {
                    "$ref": "#/types/planetscale:index/getDatabasesDatabaseDataImportDataSource:getDatabasesDatabaseDataImportDataSource",
                    "description": "Connection information for the source of the data for the import.\n"
                },
                "finishedAt": {
                    "type": "string",
                    "description": "When the import finished.\n"
                },
                "importCheckErrors": {
                    "type": "string",
                    "description": "Errors encountered while preparing the import.\n"
                },
                "startedAt": {
                    "type": "string",
                    "description": "When the import started.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.\n"
                }
            },
            "type": "object",
            "required": [
                "dataSource",
                "finishedAt",
                "importCheckErrors",
                "startedAt",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabasesDatabaseDataImportDataSource:getDatabasesDatabaseDataImportDataSource": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The name of the database imported from.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname where the database lives.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The port on which the database listens on the host.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getDatabasesDatabaseRegion:getDatabasesDatabaseRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getOauthApplicationsApplication:getOauthApplicationsApplication": {
            "properties": {
                "avatar": {
                    "type": "string",
                    "description": "The image source for the OAuth application's avatar.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The OAuth application's unique client id.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the OAuth application was created.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the OAuth application. Used for verification of a valid redirect uri.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the OAuth application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the OAuth application.\n"
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URI of the OAuth application.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scopes that the OAuth application requires on a user's accout.\n"
                },
                "tokens": {
                    "type": "number",
                    "description": "The number of tokens issued by the OAuth application.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the OAuth application was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "avatar",
                "clientId",
                "createdAt",
                "domain",
                "id",
                "name",
                "redirectUri",
                "scopes",
                "tokens",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getOrganizationFeatures:getOrganizationFeatures": {
            "properties": {
                "insights": {
                    "type": "boolean"
                },
                "singleTenancy": {
                    "type": "boolean"
                },
                "sso": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "insights",
                "singleTenancy",
                "sso"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getOrganizationFlags:getOrganizationFlags": {
            "properties": {
                "exampleFlag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "exampleFlag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getOrganizationRegionsRegion:getOrganizationRegionsRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getOrganizationsOrganization:getOrganizationsOrganization": {
            "properties": {
                "adminOnlyProductionAccess": {
                    "type": "boolean",
                    "description": "Whether or not only administrators can access production branches in the organization.\n"
                },
                "billingEmail": {
                    "type": "string",
                    "description": "The billing email of the organization.\n"
                },
                "canCreateDatabases": {
                    "type": "boolean",
                    "description": "Whether or not more databases can be created in the organization.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the organization was created.\n"
                },
                "databaseCount": {
                    "type": "number",
                    "description": "The number of databases in the organization.\n"
                },
                "features": {
                    "$ref": "#/types/planetscale:index/getOrganizationsOrganizationFeatures:getOrganizationsOrganizationFeatures",
                    "description": "Features that are enabled on the organization.\n"
                },
                "flags": {
                    "$ref": "#/types/planetscale:index/getOrganizationsOrganizationFlags:getOrganizationsOrganizationFlags",
                    "description": ".\n"
                },
                "freeDatabasesRemaining": {
                    "type": "number",
                    "description": "The number of remaining free databases that can be created in the organization.\n"
                },
                "hasPastDueInvoices": {
                    "type": "boolean",
                    "description": "Whether or not the organization has past due billing invoices.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID for the organization.\n"
                },
                "idpManagedRoles": {
                    "type": "boolean",
                    "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the organization.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The billing plan of the organization.\n"
                },
                "singleTenancy": {
                    "type": "boolean",
                    "description": "Whether or not the organization has single tenancy enabled.\n"
                },
                "sleepingDatabaseCount": {
                    "type": "number",
                    "description": "The number of sleeping databases in the organization.\n"
                },
                "sso": {
                    "type": "boolean",
                    "description": "Whether or not SSO is enabled on the organization.\n"
                },
                "ssoDirectory": {
                    "type": "boolean",
                    "description": "Whether or not the organization uses a WorkOS directory.\n"
                },
                "ssoPortalUrl": {
                    "type": "string",
                    "description": "The URL of the organization's SSO portal.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the organization was last updated.\n"
                },
                "validBillingInfo": {
                    "type": "boolean",
                    "description": "Whether or not the organization's billing information is valid.\n"
                }
            },
            "type": "object",
            "required": [
                "adminOnlyProductionAccess",
                "billingEmail",
                "canCreateDatabases",
                "createdAt",
                "databaseCount",
                "features",
                "flags",
                "freeDatabasesRemaining",
                "hasPastDueInvoices",
                "id",
                "idpManagedRoles",
                "name",
                "plan",
                "singleTenancy",
                "sleepingDatabaseCount",
                "sso",
                "ssoDirectory",
                "ssoPortalUrl",
                "updatedAt",
                "validBillingInfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getOrganizationsOrganizationFeatures:getOrganizationsOrganizationFeatures": {
            "properties": {
                "insights": {
                    "type": "boolean"
                },
                "singleTenancy": {
                    "type": "boolean"
                },
                "sso": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "insights",
                "singleTenancy",
                "sso"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getOrganizationsOrganizationFlags:getOrganizationsOrganizationFlags": {
            "properties": {
                "exampleFlag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "exampleFlag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getPasswordActor:getPasswordActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "displayName",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getPasswordDatabaseBranch:getPasswordDatabaseBranch": {
            "properties": {
                "accessHostUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mysqlEdgeAddress": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "accessHostUrl",
                "id",
                "mysqlEdgeAddress",
                "name",
                "production"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getPasswordRegion:getPasswordRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getPasswordsPassword:getPasswordsPassword": {
            "properties": {
                "accessHostUrl": {
                    "type": "string",
                    "description": "The host URL for the password.\n"
                },
                "actor": {
                    "$ref": "#/types/planetscale:index/getPasswordsPasswordActor:getPasswordsPasswordActor",
                    "description": "The actor that created this branch.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch this password belongs to..\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the password was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The datanase this branch password belongs to.\n"
                },
                "databaseBranch": {
                    "$ref": "#/types/planetscale:index/getPasswordsPasswordDatabaseBranch:getPasswordsPasswordDatabaseBranch",
                    "description": "The branch this password is allowed to access.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the password was deleted.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "When the password will expire.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID for the password.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the password.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this database branch password belongs to.\n"
                },
                "readOnlyRegionId": {
                    "type": "string",
                    "description": "If the password is for a read-only region, the ID of the region.\n"
                },
                "region": {
                    "$ref": "#/types/planetscale:index/getPasswordsPasswordRegion:getPasswordsPasswordRegion",
                    "description": "The region in which this password can be used.\n"
                },
                "renewable": {
                    "type": "boolean",
                    "description": "Whether or not the password can be renewed.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role for the password.\n"
                },
                "ttlSeconds": {
                    "type": "number",
                    "description": "Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for the password.\n"
                }
            },
            "type": "object",
            "required": [
                "accessHostUrl",
                "actor",
                "branch",
                "createdAt",
                "database",
                "databaseBranch",
                "deletedAt",
                "expiresAt",
                "id",
                "name",
                "organization",
                "readOnlyRegionId",
                "region",
                "renewable",
                "role",
                "ttlSeconds",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getPasswordsPasswordActor:getPasswordsPasswordActor": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the actor's avatar\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the actor\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the actor\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "displayName",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getPasswordsPasswordDatabaseBranch:getPasswordsPasswordDatabaseBranch": {
            "properties": {
                "accessHostUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mysqlEdgeAddress": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "accessHostUrl",
                "id",
                "mysqlEdgeAddress",
                "name",
                "production"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "planetscale:index/getPasswordsPasswordRegion:getPasswordsPasswordRegion": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name of the region.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the region is currently active.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the region.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider for the region (ex. AWS).\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP addresses for the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "enabled",
                "id",
                "location",
                "provider",
                "publicIpAddresses",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the planetscale package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessToken": {
                "type": "string",
                "description": "Name of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN_NAME`. Mutually exclusive with\n`service_token_name` and `service_token`.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "If set, points the API client to a different endpoint than `https:://api.planetscale.com/v1`.\n"
            },
            "serviceToken": {
                "type": "string",
                "description": "Value of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN`. Mutually exclusive with\n`access_token`.\n",
                "secret": true
            },
            "serviceTokenName": {
                "type": "string",
                "description": "Name of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN_NAME`. Mutually exclusive with\n`access_token`.\n"
            }
        },
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "Name of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN_NAME`. Mutually exclusive with\n`service_token_name` and `service_token`.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "If set, points the API client to a different endpoint than `https:://api.planetscale.com/v1`.\n"
            },
            "serviceToken": {
                "type": "string",
                "description": "Value of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN`. Mutually exclusive with\n`access_token`.\n",
                "secret": true
            },
            "serviceTokenName": {
                "type": "string",
                "description": "Name of the service token to use. Alternatively, use `PLANETSCALE_SERVICE_TOKEN_NAME`. Mutually exclusive with\n`access_token`.\n"
            }
        }
    },
    "resources": {
        "planetscale:index/backup:Backup": {
            "description": "A PlanetScale backup.\n\nKnown limitations:\n- It is not currently possible to manage backup schedules, only retention periods.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.Backup;\nimport com.pulumi.planetscale.BackupArgs;\nimport com.pulumi.planetscale.inputs.BackupBackupPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Backup(\"example\", BackupArgs.builder()        \n            .backupPolicy(BackupBackupPolicyArgs.builder()\n                .retention_unit(\"day\")\n                .retention_value(1)\n                .build())\n            .branch(\"main\")\n            .database(\"example_db\")\n            .organization(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: planetscale:Backup\n    properties:\n      backupPolicy:\n        retention_unit: day\n        retention_value: 1\n      branch: main\n      database: example_db\n      organization: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "actor": {
                    "$ref": "#/types/planetscale:index/BackupActor:BackupActor",
                    "description": ".\n"
                },
                "backupPolicy": {
                    "$ref": "#/types/planetscale:index/BackupBackupPolicy:BackupBackupPolicy",
                    "description": "The policy used by the backup.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch being backed up.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the backup was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to which the branch being backed up belongs to.\n"
                },
                "estimatedStorageCost": {
                    "type": "string",
                    "description": "The estimated storage cost of the backup.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backup.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization in which the database branch being backed up belongs to.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether or not the backup policy is required.\n"
                },
                "restoredBranches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Branches that have been restored with this backup.\n"
                },
                "size": {
                    "type": "number",
                    "description": "The size of the backup.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the backup.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the backup was last updated.\n"
                }
            },
            "required": [
                "actor",
                "backupPolicy",
                "branch",
                "createdAt",
                "database",
                "estimatedStorageCost",
                "name",
                "organization",
                "required",
                "restoredBranches",
                "size",
                "state",
                "updatedAt"
            ],
            "inputProperties": {
                "backupPolicy": {
                    "$ref": "#/types/planetscale:index/BackupBackupPolicy:BackupBackupPolicy",
                    "description": "The policy used by the backup.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch being backed up.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to which the branch being backed up belongs to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backup.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization in which the database branch being backed up belongs to.\n"
                }
            },
            "requiredInputs": [
                "backupPolicy",
                "branch",
                "database",
                "organization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Backup resources.\n",
                "properties": {
                    "actor": {
                        "$ref": "#/types/planetscale:index/BackupActor:BackupActor",
                        "description": ".\n"
                    },
                    "backupPolicy": {
                        "$ref": "#/types/planetscale:index/BackupBackupPolicy:BackupBackupPolicy",
                        "description": "The policy used by the backup.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch being backed up.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the backup was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database to which the branch being backed up belongs to.\n"
                    },
                    "estimatedStorageCost": {
                        "type": "string",
                        "description": "The estimated storage cost of the backup.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the backup.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization in which the database branch being backed up belongs to.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Whether or not the backup policy is required.\n"
                    },
                    "restoredBranches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Branches that have been restored with this backup.\n"
                    },
                    "size": {
                        "type": "number",
                        "description": "The size of the backup.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the backup.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the backup was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "planetscale:index/branch:Branch": {
            "description": "A PlanetScale branch.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = new planetscale.Branch(\"example\", {\n    database: \"example_db\",\n    organization: \"example\",\n    parentBranch: \"main\",\n});\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.Branch(\"example\",\n    database=\"example_db\",\n    organization=\"example\",\n    parent_branch=\"main\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Planetscale.Branch(\"example\", new()\n    {\n        Database = \"example_db\",\n        Organization = \"example\",\n        ParentBranch = \"main\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := planetscale.NewBranch(ctx, \"example\", \u0026planetscale.BranchArgs{\n\t\t\tDatabase:     pulumi.String(\"example_db\"),\n\t\t\tOrganization: pulumi.String(\"example\"),\n\t\t\tParentBranch: pulumi.String(\"main\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.Branch;\nimport com.pulumi.planetscale.BranchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Branch(\"example\", BranchArgs.builder()        \n            .database(\"example_db\")\n            .organization(\"example\")\n            .parentBranch(\"main\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: planetscale:Branch\n    properties:\n      database: example_db\n      organization: example\n      parentBranch: main\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessHostUrl": {
                    "type": "string",
                    "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.\n"
                },
                "actor": {
                    "$ref": "#/types/planetscale:index/BranchActor:BranchActor",
                    "description": "The actor who created this branch.\n"
                },
                "clusterRateName": {
                    "type": "string",
                    "description": "The SKU representing the branch's cluster size.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the branch was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this branch belongs to.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "Planetscale app URL for the branch.\n"
                },
                "initialRestoreId": {
                    "type": "string",
                    "description": "The ID of the backup from which the branch was restored.\n"
                },
                "mysqlAddress": {
                    "type": "string",
                    "description": "The MySQL address for the branch.\n"
                },
                "mysqlEdgeAddress": {
                    "type": "string",
                    "description": "The address of the MySQL provider for the branch.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the branch.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this branch belongs to.\n"
                },
                "parentBranch": {
                    "type": "string",
                    "description": "The name of the parent branch from which the branch was created.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "Whether or not the branch is a production branch.\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "Whether or not the branch is ready to serve queries.\n"
                },
                "region": {
                    "$ref": "#/types/planetscale:index/BranchRegion:BranchRegion",
                    "description": "The region in which this branch lives.\n"
                },
                "restoreChecklistCompletedAt": {
                    "type": "string",
                    "description": "When a user last marked a backup restore checklist as completed.\n"
                },
                "restoredFromBranch": {
                    "$ref": "#/types/planetscale:index/BranchRestoredFromBranch:BranchRestoredFromBranch",
                    "description": "todo\n"
                },
                "schemaLastUpdatedAt": {
                    "type": "string",
                    "description": "When the schema for the branch was last updated.\n"
                },
                "shardCount": {
                    "type": "number",
                    "description": "The number of shards in the branch.\n"
                },
                "sharded": {
                    "type": "boolean",
                    "description": "Whether or not the branch is sharded.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the branch was last updated.\n"
                }
            },
            "required": [
                "accessHostUrl",
                "actor",
                "clusterRateName",
                "createdAt",
                "database",
                "htmlUrl",
                "initialRestoreId",
                "mysqlAddress",
                "mysqlEdgeAddress",
                "name",
                "organization",
                "parentBranch",
                "production",
                "ready",
                "region",
                "restoreChecklistCompletedAt",
                "restoredFromBranch",
                "schemaLastUpdatedAt",
                "shardCount",
                "sharded",
                "updatedAt"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database this branch belongs to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the branch.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this branch belongs to.\n"
                },
                "parentBranch": {
                    "type": "string",
                    "description": "The name of the parent branch from which the branch was created.\n"
                },
                "production": {
                    "type": "boolean",
                    "description": "Whether or not the branch is a production branch.\n"
                }
            },
            "requiredInputs": [
                "database",
                "organization",
                "parentBranch"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Branch resources.\n",
                "properties": {
                    "accessHostUrl": {
                        "type": "string",
                        "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.\n"
                    },
                    "actor": {
                        "$ref": "#/types/planetscale:index/BranchActor:BranchActor",
                        "description": "The actor who created this branch.\n"
                    },
                    "clusterRateName": {
                        "type": "string",
                        "description": "The SKU representing the branch's cluster size.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the branch was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database this branch belongs to.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "Planetscale app URL for the branch.\n"
                    },
                    "initialRestoreId": {
                        "type": "string",
                        "description": "The ID of the backup from which the branch was restored.\n"
                    },
                    "mysqlAddress": {
                        "type": "string",
                        "description": "The MySQL address for the branch.\n"
                    },
                    "mysqlEdgeAddress": {
                        "type": "string",
                        "description": "The address of the MySQL provider for the branch.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the branch.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this branch belongs to.\n"
                    },
                    "parentBranch": {
                        "type": "string",
                        "description": "The name of the parent branch from which the branch was created.\n"
                    },
                    "production": {
                        "type": "boolean",
                        "description": "Whether or not the branch is a production branch.\n"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "Whether or not the branch is ready to serve queries.\n"
                    },
                    "region": {
                        "$ref": "#/types/planetscale:index/BranchRegion:BranchRegion",
                        "description": "The region in which this branch lives.\n"
                    },
                    "restoreChecklistCompletedAt": {
                        "type": "string",
                        "description": "When a user last marked a backup restore checklist as completed.\n"
                    },
                    "restoredFromBranch": {
                        "$ref": "#/types/planetscale:index/BranchRestoredFromBranch:BranchRestoredFromBranch",
                        "description": "todo\n"
                    },
                    "schemaLastUpdatedAt": {
                        "type": "string",
                        "description": "When the schema for the branch was last updated.\n"
                    },
                    "shardCount": {
                        "type": "number",
                        "description": "The number of shards in the branch.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "Whether or not the branch is sharded.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the branch was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "planetscale:index/database:Database": {
            "description": "A PlanetScale database.\n\nKnown limitations:\n- When the provider is configured with a service token, the service token needs to manually be granted permission on this database resource. This can be done in the UI or via the CLI (`pscale service-token add-access`).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = new planetscale.Database(\"example\", {organization: \"example\"});\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.Database(\"example\", organization=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Planetscale.Database(\"example\", new()\n    {\n        Organization = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := planetscale.NewDatabase(ctx, \"example\", \u0026planetscale.DatabaseArgs{\n\t\t\tOrganization: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.Database;\nimport com.pulumi.planetscale.DatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Database(\"example\", DatabaseArgs.builder()        \n            .organization(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: planetscale:Database\n    properties:\n      organization: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allowDataBranching": {
                    "type": "boolean",
                    "description": "Whether seeding branches with data is enabled for all branches.\n"
                },
                "atBackupRestoreBranchesLimit": {
                    "type": "boolean",
                    "description": "If the database has reached its backup restored branch limit.\n"
                },
                "atDevelopmentBranchLimit": {
                    "type": "boolean",
                    "description": "If the database has reached its development branch limit.\n"
                },
                "automaticMigrations": {
                    "type": "boolean",
                    "description": "Whether to automatically manage Rails migrations during deploy requests.\n"
                },
                "branchesCount": {
                    "type": "number",
                    "description": "The total number of database branches.\n"
                },
                "branchesUrl": {
                    "type": "string",
                    "description": "The URL to retrieve this database's branches via the API.\n"
                },
                "clusterSize": {
                    "type": "string",
                    "description": "The size of the database cluster plan.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the database was created.\n"
                },
                "dataImport": {
                    "$ref": "#/types/planetscale:index/DatabaseDataImport:DatabaseDataImport",
                    "description": "If the database was created from an import, describes the import process.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the database.\n"
                },
                "defaultBranchReadOnlyRegionsCount": {
                    "type": "number",
                    "description": "Number of read only regions in the default branch.\n"
                },
                "defaultBranchShardCount": {
                    "type": "number",
                    "description": "Number of shards in the default branch.\n"
                },
                "defaultBranchTableCount": {
                    "type": "number",
                    "description": "Number of tables in the default branch schema.\n"
                },
                "developmentBranchesCount": {
                    "type": "number",
                    "description": "The total number of database development branches.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The total number of database development branches.\n"
                },
                "insightsRawQueries": {
                    "type": "boolean",
                    "description": "The URL to see this database's branches in the web UI.\n"
                },
                "issuesCount": {
                    "type": "number",
                    "description": "The total number of ongoing issues within a database.\n"
                },
                "migrationFramework": {
                    "type": "string",
                    "description": "Framework used for applying migrations.\n"
                },
                "migrationTableName": {
                    "type": "string",
                    "description": "Table name to use for copying schema migration data.\n"
                },
                "multipleAdminsRequiredForDeletion": {
                    "type": "boolean",
                    "description": "If the database requires multiple admins for deletion.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this database.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this database belongs to.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The database plan.\n"
                },
                "productionBranchWebConsole": {
                    "type": "boolean",
                    "description": "Whether web console is enabled for production branches.\n"
                },
                "productionBranchesCount": {
                    "type": "number",
                    "description": "The total number of database production branches.\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the database is ready to be used.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region the database lives in.\n"
                },
                "requireApprovalForDeploy": {
                    "type": "boolean",
                    "description": "Whether an approval is required to deploy schema changes to this database.\n"
                },
                "restrictBranchRegion": {
                    "type": "boolean",
                    "description": "Whether to restrict branch creation to one region.\n"
                },
                "schemaLastUpdatedAt": {
                    "type": "string",
                    "description": "When the default branch schema was last changed.\n"
                },
                "sharded": {
                    "type": "boolean",
                    "description": "If the database is sharded.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the database.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the database was last updated.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the database API endpoint.\n"
                }
            },
            "required": [
                "allowDataBranching",
                "atBackupRestoreBranchesLimit",
                "atDevelopmentBranchLimit",
                "automaticMigrations",
                "branchesCount",
                "branchesUrl",
                "clusterSize",
                "createdAt",
                "dataImport",
                "defaultBranch",
                "defaultBranchReadOnlyRegionsCount",
                "defaultBranchShardCount",
                "defaultBranchTableCount",
                "developmentBranchesCount",
                "htmlUrl",
                "insightsRawQueries",
                "issuesCount",
                "migrationFramework",
                "migrationTableName",
                "multipleAdminsRequiredForDeletion",
                "name",
                "organization",
                "plan",
                "productionBranchWebConsole",
                "productionBranchesCount",
                "ready",
                "region",
                "requireApprovalForDeploy",
                "restrictBranchRegion",
                "schemaLastUpdatedAt",
                "sharded",
                "state",
                "updatedAt",
                "url"
            ],
            "inputProperties": {
                "allowDataBranching": {
                    "type": "boolean",
                    "description": "Whether seeding branches with data is enabled for all branches.\n"
                },
                "automaticMigrations": {
                    "type": "boolean",
                    "description": "Whether to automatically manage Rails migrations during deploy requests.\n"
                },
                "clusterSize": {
                    "type": "string",
                    "description": "The size of the database cluster plan.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the database.\n"
                },
                "insightsRawQueries": {
                    "type": "boolean",
                    "description": "The URL to see this database's branches in the web UI.\n"
                },
                "issuesCount": {
                    "type": "number",
                    "description": "The total number of ongoing issues within a database.\n"
                },
                "migrationFramework": {
                    "type": "string",
                    "description": "Framework used for applying migrations.\n"
                },
                "migrationTableName": {
                    "type": "string",
                    "description": "Table name to use for copying schema migration data.\n"
                },
                "multipleAdminsRequiredForDeletion": {
                    "type": "boolean",
                    "description": "If the database requires multiple admins for deletion.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this database.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this database belongs to.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The database plan.\n"
                },
                "productionBranchWebConsole": {
                    "type": "boolean",
                    "description": "Whether web console is enabled for production branches.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region the database lives in.\n"
                },
                "requireApprovalForDeploy": {
                    "type": "boolean",
                    "description": "Whether an approval is required to deploy schema changes to this database.\n"
                },
                "restrictBranchRegion": {
                    "type": "boolean",
                    "description": "Whether to restrict branch creation to one region.\n"
                }
            },
            "requiredInputs": [
                "organization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "allowDataBranching": {
                        "type": "boolean",
                        "description": "Whether seeding branches with data is enabled for all branches.\n"
                    },
                    "atBackupRestoreBranchesLimit": {
                        "type": "boolean",
                        "description": "If the database has reached its backup restored branch limit.\n"
                    },
                    "atDevelopmentBranchLimit": {
                        "type": "boolean",
                        "description": "If the database has reached its development branch limit.\n"
                    },
                    "automaticMigrations": {
                        "type": "boolean",
                        "description": "Whether to automatically manage Rails migrations during deploy requests.\n"
                    },
                    "branchesCount": {
                        "type": "number",
                        "description": "The total number of database branches.\n"
                    },
                    "branchesUrl": {
                        "type": "string",
                        "description": "The URL to retrieve this database's branches via the API.\n"
                    },
                    "clusterSize": {
                        "type": "string",
                        "description": "The size of the database cluster plan.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the database was created.\n"
                    },
                    "dataImport": {
                        "$ref": "#/types/planetscale:index/DatabaseDataImport:DatabaseDataImport",
                        "description": "If the database was created from an import, describes the import process.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the database.\n"
                    },
                    "defaultBranchReadOnlyRegionsCount": {
                        "type": "number",
                        "description": "Number of read only regions in the default branch.\n"
                    },
                    "defaultBranchShardCount": {
                        "type": "number",
                        "description": "Number of shards in the default branch.\n"
                    },
                    "defaultBranchTableCount": {
                        "type": "number",
                        "description": "Number of tables in the default branch schema.\n"
                    },
                    "developmentBranchesCount": {
                        "type": "number",
                        "description": "The total number of database development branches.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "The total number of database development branches.\n"
                    },
                    "insightsRawQueries": {
                        "type": "boolean",
                        "description": "The URL to see this database's branches in the web UI.\n"
                    },
                    "issuesCount": {
                        "type": "number",
                        "description": "The total number of ongoing issues within a database.\n"
                    },
                    "migrationFramework": {
                        "type": "string",
                        "description": "Framework used for applying migrations.\n"
                    },
                    "migrationTableName": {
                        "type": "string",
                        "description": "Table name to use for copying schema migration data.\n"
                    },
                    "multipleAdminsRequiredForDeletion": {
                        "type": "boolean",
                        "description": "If the database requires multiple admins for deletion.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this database.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this database belongs to.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The database plan.\n"
                    },
                    "productionBranchWebConsole": {
                        "type": "boolean",
                        "description": "Whether web console is enabled for production branches.\n"
                    },
                    "productionBranchesCount": {
                        "type": "number",
                        "description": "The total number of database production branches.\n"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "If the database is ready to be used.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region the database lives in.\n"
                    },
                    "requireApprovalForDeploy": {
                        "type": "boolean",
                        "description": "Whether an approval is required to deploy schema changes to this database.\n"
                    },
                    "restrictBranchRegion": {
                        "type": "boolean",
                        "description": "Whether to restrict branch creation to one region.\n"
                    },
                    "schemaLastUpdatedAt": {
                        "type": "string",
                        "description": "When the default branch schema was last changed.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "If the database is sharded.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the database.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the database was last updated.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the database API endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "planetscale:index/password:Password": {
            "description": "A PlanetScale database password.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = new planetscale.Password(\"example\", {\n    organization: \"example\",\n    database: \"example_db\",\n    branch: \"main\",\n});\nexport const password = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.Password(\"example\",\n    organization=\"example\",\n    database=\"example_db\",\n    branch=\"main\")\npulumi.export(\"password\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Planetscale.Password(\"example\", new()\n    {\n        Organization = \"example\",\n        Database = \"example_db\",\n        Branch = \"main\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"password\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.NewPassword(ctx, \"example\", \u0026planetscale.PasswordArgs{\n\t\t\tOrganization: pulumi.String(\"example\"),\n\t\t\tDatabase:     pulumi.String(\"example_db\"),\n\t\t\tBranch:       pulumi.String(\"main\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"password\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.Password;\nimport com.pulumi.planetscale.PasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Password(\"example\", PasswordArgs.builder()        \n            .organization(\"example\")\n            .database(\"example_db\")\n            .branch(\"main\")\n            .build());\n\n        ctx.export(\"password\", example);\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: planetscale:Password\n    properties:\n      organization: example\n      database: example_db\n      branch: main\noutputs:\n  password: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessHostUrl": {
                    "type": "string",
                    "description": "The host URL for the password.\n"
                },
                "actor": {
                    "$ref": "#/types/planetscale:index/PasswordActor:PasswordActor",
                    "description": "The actor that created this branch.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch this password belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the password was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The datanase this branch password belongs to.\n"
                },
                "databaseBranch": {
                    "$ref": "#/types/planetscale:index/PasswordDatabaseBranch:PasswordDatabaseBranch",
                    "description": "The branch this password is allowed to access.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the password was deleted.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "When the password will expire.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the password.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this database branch password belongs to.\n"
                },
                "plaintext": {
                    "type": "string",
                    "description": "The plaintext password, only available if the password was created by this provider.\n",
                    "secret": true
                },
                "region": {
                    "$ref": "#/types/planetscale:index/PasswordRegion:PasswordRegion",
                    "description": "The region in which this password can be used.\n"
                },
                "renewable": {
                    "type": "boolean",
                    "description": "Whether or not the password can be renewed.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role for the password.\n"
                },
                "ttlSeconds": {
                    "type": "number",
                    "description": "Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for the password.\n"
                }
            },
            "required": [
                "accessHostUrl",
                "actor",
                "branch",
                "createdAt",
                "database",
                "databaseBranch",
                "deletedAt",
                "expiresAt",
                "name",
                "organization",
                "plaintext",
                "region",
                "renewable",
                "role",
                "ttlSeconds",
                "username"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch this password belongs to.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The datanase this branch password belongs to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the password.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization this database branch password belongs to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role for the password.\n"
                },
                "ttlSeconds": {
                    "type": "number",
                    "description": "Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "database",
                "organization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Password resources.\n",
                "properties": {
                    "accessHostUrl": {
                        "type": "string",
                        "description": "The host URL for the password.\n"
                    },
                    "actor": {
                        "$ref": "#/types/planetscale:index/PasswordActor:PasswordActor",
                        "description": "The actor that created this branch.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch this password belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the password was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The datanase this branch password belongs to.\n"
                    },
                    "databaseBranch": {
                        "$ref": "#/types/planetscale:index/PasswordDatabaseBranch:PasswordDatabaseBranch",
                        "description": "The branch this password is allowed to access.\n"
                    },
                    "deletedAt": {
                        "type": "string",
                        "description": "When the password was deleted.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "When the password will expire.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the password.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this database branch password belongs to.\n"
                    },
                    "plaintext": {
                        "type": "string",
                        "description": "The plaintext password, only available if the password was created by this provider.\n",
                        "secret": true
                    },
                    "region": {
                        "$ref": "#/types/planetscale:index/PasswordRegion:PasswordRegion",
                        "description": "The region in which this password can be used.\n"
                    },
                    "renewable": {
                        "type": "boolean",
                        "description": "Whether or not the password can be renewed.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role for the password.\n"
                    },
                    "ttlSeconds": {
                        "type": "number",
                        "description": "Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for the password.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "planetscale:index/getBackup:getBackup": {
            "description": "A PlanetScale backup.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getBackup({\n    organization: \"example.com\",\n    database: \"example_db\",\n    branch: \"main\",\n    id: \"k20nb1b7ut18\",\n});\nexport const backup = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_backup(organization=\"example.com\",\n    database=\"example_db\",\n    branch=\"main\",\n    id=\"k20nb1b7ut18\")\npulumi.export(\"backup\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetBackup.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Database = \"example_db\",\n        Branch = \"main\",\n        Id = \"k20nb1b7ut18\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"backup\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.LookupBackup(ctx, \u0026planetscale.LookupBackupArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tDatabase:     \"example_db\",\n\t\t\tBranch:       \"main\",\n\t\t\tId:           \"k20nb1b7ut18\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"backup\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getBackup(GetBackupArgs.builder()\n            .organization(\"example.com\")\n            .database(\"example_db\")\n            .branch(\"main\")\n            .id(\"k20nb1b7ut18\")\n            .build());\n\n        ctx.export(\"backup\", example.applyValue(getBackupResult -\u003e getBackupResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getBackup\n      Arguments:\n        organization: example.com\n        database: example_db\n        branch: main\n        id: k20nb1b7ut18\noutputs:\n  backup: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBackup.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch this backup belongs to.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database this backup belongs to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the backup.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this backup belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "id",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBackup.\n",
                "properties": {
                    "actor": {
                        "$ref": "#/types/planetscale:index/getBackupActor:getBackupActor",
                        "description": "The actor that created the backup.\n"
                    },
                    "backupPolicy": {
                        "$ref": "#/types/planetscale:index/getBackupBackupPolicy:getBackupBackupPolicy",
                        "description": "The backup policy being followed.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch this backup belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the backup was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database this backup belongs to.\n"
                    },
                    "estimatedStorageCost": {
                        "type": "string",
                        "description": "The estimated storage cost of the backup.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the backup.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the backup.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this backup belongs to.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Whether or not the backup policy is required.\n"
                    },
                    "restoredBranches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Branches that have been restored with this backup.\n"
                    },
                    "size": {
                        "type": "number",
                        "description": "The size of the backup.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the backup.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the backup was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "actor",
                    "backupPolicy",
                    "branch",
                    "createdAt",
                    "database",
                    "estimatedStorageCost",
                    "id",
                    "name",
                    "organization",
                    "required",
                    "restoredBranches",
                    "size",
                    "state",
                    "updatedAt"
                ]
            }
        },
        "planetscale:index/getBackups:getBackups": {
            "description": "A list of PlanetScale backups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getBackups({\n    organization: \"example.com\",\n    database: \"example_db\",\n    branch: \"main\",\n});\nexport const backups = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_backups(organization=\"example.com\",\n    database=\"example_db\",\n    branch=\"main\")\npulumi.export(\"backups\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetBackups.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Database = \"example_db\",\n        Branch = \"main\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"backups\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetBackups(ctx, \u0026planetscale.GetBackupsArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tDatabase:     \"example_db\",\n\t\t\tBranch:       \"main\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"backups\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getBackups(GetBackupsArgs.builder()\n            .organization(\"example.com\")\n            .database(\"example_db\")\n            .branch(\"main\")\n            .build());\n\n        ctx.export(\"backups\", example.applyValue(getBackupsResult -\u003e getBackupsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getBackups\n      Arguments:\n        organization: example.com\n        database: example_db\n        branch: main\noutputs:\n  backups: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBackups.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBackups.\n",
                "properties": {
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getBackupsBackup:getBackupsBackup"
                        }
                    },
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backups",
                    "branch",
                    "database",
                    "organization",
                    "id"
                ]
            }
        },
        "planetscale:index/getBranch:getBranch": {
            "description": "A PlanetScale branch.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getBranch({\n    organization: \"example.com\",\n    database: \"example_db\",\n    name: \"main\",\n});\nexport const branch = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_branch(organization=\"example.com\",\n    database=\"example_db\",\n    name=\"main\")\npulumi.export(\"branch\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetBranch.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Database = \"example_db\",\n        Name = \"main\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"branch\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.LookupBranch(ctx, \u0026planetscale.LookupBranchArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tDatabase:     \"example_db\",\n\t\t\tName:         \"main\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"branch\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetBranchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getBranch(GetBranchArgs.builder()\n            .organization(\"example.com\")\n            .database(\"example_db\")\n            .name(\"main\")\n            .build());\n\n        ctx.export(\"branch\", example.applyValue(getBranchResult -\u003e getBranchResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getBranch\n      Arguments:\n        organization: example.com\n        database: example_db\n        name: main\noutputs:\n  branch: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBranch.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database this branch belongs to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the branch.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this branch belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "name",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranch.\n",
                "properties": {
                    "accessHostUrl": {
                        "type": "string",
                        "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.\n"
                    },
                    "actor": {
                        "$ref": "#/types/planetscale:index/getBranchActor:getBranchActor",
                        "description": "The actor who created this branch.\n"
                    },
                    "clusterRateName": {
                        "type": "string",
                        "description": "The SKU representing the branch's cluster size.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the branch was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database this branch belongs to.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "Planetscale app URL for the branch.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the branch.\n"
                    },
                    "initialRestoreId": {
                        "type": "string",
                        "description": "The ID of the backup from which the branch was restored.\n"
                    },
                    "mysqlAddress": {
                        "type": "string",
                        "description": "The MySQL address for the branch.\n"
                    },
                    "mysqlEdgeAddress": {
                        "type": "string",
                        "description": "The address of the MySQL provider for the branch.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the branch.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this branch belongs to.\n"
                    },
                    "parentBranch": {
                        "type": "string",
                        "description": "The name of the parent branch from which the branch was created.\n"
                    },
                    "production": {
                        "type": "boolean",
                        "description": "Whether or not the branch is a production branch.\n"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "Whether or not the branch is ready to serve queries.\n"
                    },
                    "region": {
                        "$ref": "#/types/planetscale:index/getBranchRegion:getBranchRegion",
                        "description": "The region in which this branch lives.\n"
                    },
                    "restoreChecklistCompletedAt": {
                        "type": "string",
                        "description": "When a user last marked a backup restore checklist as completed.\n"
                    },
                    "restoredFromBranch": {
                        "$ref": "#/types/planetscale:index/getBranchRestoredFromBranch:getBranchRestoredFromBranch"
                    },
                    "schemaLastUpdatedAt": {
                        "type": "string",
                        "description": "When the schema for the branch was last updated.\n"
                    },
                    "shardCount": {
                        "type": "number",
                        "description": "The number of shards in the branch.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "Whether or not the branch is sharded.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the branch was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessHostUrl",
                    "actor",
                    "clusterRateName",
                    "createdAt",
                    "database",
                    "htmlUrl",
                    "id",
                    "initialRestoreId",
                    "mysqlAddress",
                    "mysqlEdgeAddress",
                    "name",
                    "organization",
                    "parentBranch",
                    "production",
                    "ready",
                    "region",
                    "restoreChecklistCompletedAt",
                    "restoredFromBranch",
                    "schemaLastUpdatedAt",
                    "shardCount",
                    "sharded",
                    "updatedAt"
                ]
            }
        },
        "planetscale:index/getBranchSchema:getBranchSchema": {
            "description": "The schema of a PlanetScale branch.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getBranchSchema({\n    organization: \"example.com\",\n    database: \"example_db\",\n    branch: \"main\",\n});\nexport const branchSchema = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_branch_schema(organization=\"example.com\",\n    database=\"example_db\",\n    branch=\"main\")\npulumi.export(\"branchSchema\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetBranchSchema.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Database = \"example_db\",\n        Branch = \"main\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"branchSchema\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetBranchSchema(ctx, \u0026planetscale.GetBranchSchemaArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tDatabase:     \"example_db\",\n\t\t\tBranch:       \"main\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"branchSchema\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetBranchSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getBranchSchema(GetBranchSchemaArgs.builder()\n            .organization(\"example.com\")\n            .database(\"example_db\")\n            .branch(\"main\")\n            .build());\n\n        ctx.export(\"branchSchema\", example.applyValue(getBranchSchemaResult -\u003e getBranchSchemaResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getBranchSchema\n      Arguments:\n        organization: example.com\n        database: example_db\n        branch: main\noutputs:\n  branchSchema: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBranchSchema.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "keyspace": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranchSchema.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keyspace": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getBranchSchemaTable:getBranchSchemaTable"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "organization",
                    "tables",
                    "id"
                ]
            }
        },
        "planetscale:index/getBranchSchemaLint:getBranchSchemaLint": {
            "description": "Linting errors for the schema of a PlanetScale branch.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getBranchSchemaLint({\n    organization: \"example.com\",\n    database: \"example_db\",\n    branch: \"main\",\n});\nexport const schemaLint = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_branch_schema_lint(organization=\"example.com\",\n    database=\"example_db\",\n    branch=\"main\")\npulumi.export(\"schemaLint\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetBranchSchemaLint.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Database = \"example_db\",\n        Branch = \"main\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"schemaLint\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetBranchSchemaLint(ctx, \u0026planetscale.GetBranchSchemaLintArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tDatabase:     \"example_db\",\n\t\t\tBranch:       \"main\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"schemaLint\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetBranchSchemaLintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getBranchSchemaLint(GetBranchSchemaLintArgs.builder()\n            .organization(\"example.com\")\n            .database(\"example_db\")\n            .branch(\"main\")\n            .build());\n\n        ctx.export(\"schemaLint\", example.applyValue(getBranchSchemaLintResult -\u003e getBranchSchemaLintResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getBranchSchemaLint\n      Arguments:\n        organization: example.com\n        database: example_db\n        branch: main\noutputs:\n  schemaLint: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBranchSchemaLint.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranchSchemaLint.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getBranchSchemaLintError:getBranchSchemaLintError"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "errors",
                    "organization",
                    "id"
                ]
            }
        },
        "planetscale:index/getBranches:getBranches": {
            "description": "A list of PlanetScale branches.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getBranches({\n    organization: \"example.com\",\n    database: \"example_db\",\n});\nexport const branches = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_branches(organization=\"example.com\",\n    database=\"example_db\")\npulumi.export(\"branches\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetBranches.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Database = \"example_db\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"branches\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetBranches(ctx, \u0026planetscale.GetBranchesArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tDatabase:     \"example_db\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"branches\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetBranchesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getBranches(GetBranchesArgs.builder()\n            .organization(\"example.com\")\n            .database(\"example_db\")\n            .build());\n\n        ctx.export(\"branches\", example.applyValue(getBranchesResult -\u003e getBranchesResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getBranches\n      Arguments:\n        organization: example.com\n        database: example_db\noutputs:\n  branches: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBranches.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranches.\n",
                "properties": {
                    "branches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getBranchesBranch:getBranchesBranch"
                        }
                    },
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branches",
                    "database",
                    "organization",
                    "id"
                ]
            }
        },
        "planetscale:index/getDatabase:getDatabase": {
            "description": "A PlanetScale database.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getDatabase({\n    organization: \"example\",\n    name: \"again\",\n});\nexport const db = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_database(organization=\"example\",\n    name=\"again\")\npulumi.export(\"db\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetDatabase.Invoke(new()\n    {\n        Organization = \"example\",\n        Name = \"again\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"db\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.LookupDatabase(ctx, \u0026planetscale.LookupDatabaseArgs{\n\t\t\tOrganization: \"example\",\n\t\t\tName:         \"again\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"db\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getDatabase(GetDatabaseArgs.builder()\n            .organization(\"example\")\n            .name(\"again\")\n            .build());\n\n        ctx.export(\"db\", example.applyValue(getDatabaseResult -\u003e getDatabaseResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getDatabase\n      Arguments:\n        organization: example\n        name: again\noutputs:\n  db: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "allowDataBranching": {
                        "type": "boolean",
                        "description": "Whether seeding branches with data is enabled for all branches.\n"
                    },
                    "automaticMigrations": {
                        "type": "boolean",
                        "description": "Whether to automatically manage Rails migrations during deploy requests.\n"
                    },
                    "dataImport": {
                        "$ref": "#/types/planetscale:index/getDatabaseDataImport:getDatabaseDataImport",
                        "description": "If the database was created from an import, describes the import process.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the database.\n"
                    },
                    "insightsRawQueries": {
                        "type": "boolean",
                        "description": "The URL to see this database's branches in the web UI.\n"
                    },
                    "issuesCount": {
                        "type": "number",
                        "description": "The total number of ongoing issues within a database.\n"
                    },
                    "migrationFramework": {
                        "type": "string",
                        "description": "Framework used for applying migrations.\n"
                    },
                    "migrationTableName": {
                        "type": "string",
                        "description": "Table name to use for copying schema migration data.\n"
                    },
                    "multipleAdminsRequiredForDeletion": {
                        "type": "boolean",
                        "description": "If the database requires multiple admins for deletion.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this database.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this database belongs to.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The database plan.\n"
                    },
                    "productionBranchWebConsole": {
                        "type": "boolean",
                        "description": "Whether web console is enabled for production branches.\n"
                    },
                    "region": {
                        "$ref": "#/types/planetscale:index/getDatabaseRegion:getDatabaseRegion",
                        "description": "The region the database lives in.\n"
                    },
                    "requireApprovalForDeploy": {
                        "type": "boolean",
                        "description": "Whether an approval is required to deploy schema changes to this database.\n"
                    },
                    "restrictBranchRegion": {
                        "type": "boolean",
                        "description": "Whether to restrict branch creation to one region.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "allowDataBranching": {
                        "type": "boolean",
                        "description": "Whether seeding branches with data is enabled for all branches.\n"
                    },
                    "atBackupRestoreBranchesLimit": {
                        "type": "boolean",
                        "description": "If the database has reached its backup restored branch limit.\n"
                    },
                    "atDevelopmentBranchLimit": {
                        "type": "boolean",
                        "description": "If the database has reached its development branch limit.\n"
                    },
                    "automaticMigrations": {
                        "type": "boolean",
                        "description": "Whether to automatically manage Rails migrations during deploy requests.\n"
                    },
                    "branchesCount": {
                        "type": "number",
                        "description": "The total number of database branches.\n"
                    },
                    "branchesUrl": {
                        "type": "string",
                        "description": "The URL to retrieve this database's branches via the API.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the database was created.\n"
                    },
                    "dataImport": {
                        "$ref": "#/types/planetscale:index/getDatabaseDataImport:getDatabaseDataImport",
                        "description": "If the database was created from an import, describes the import process.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the database.\n"
                    },
                    "defaultBranchReadOnlyRegionsCount": {
                        "type": "number",
                        "description": "Number of read only regions in the default branch.\n"
                    },
                    "defaultBranchShardCount": {
                        "type": "number",
                        "description": "Number of shards in the default branch.\n"
                    },
                    "defaultBranchTableCount": {
                        "type": "number",
                        "description": "Number of tables in the default branch schema.\n"
                    },
                    "developmentBranchesCount": {
                        "type": "number",
                        "description": "The total number of database development branches.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "The total number of database development branches.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the database.\n"
                    },
                    "insightsRawQueries": {
                        "type": "boolean",
                        "description": "The URL to see this database's branches in the web UI.\n"
                    },
                    "issuesCount": {
                        "type": "number",
                        "description": "The total number of ongoing issues within a database.\n"
                    },
                    "migrationFramework": {
                        "type": "string",
                        "description": "Framework used for applying migrations.\n"
                    },
                    "migrationTableName": {
                        "type": "string",
                        "description": "Table name to use for copying schema migration data.\n"
                    },
                    "multipleAdminsRequiredForDeletion": {
                        "type": "boolean",
                        "description": "If the database requires multiple admins for deletion.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this database.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this database belongs to.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The database plan.\n"
                    },
                    "productionBranchWebConsole": {
                        "type": "boolean",
                        "description": "Whether web console is enabled for production branches.\n"
                    },
                    "productionBranchesCount": {
                        "type": "number",
                        "description": "The total number of database production branches.\n"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "If the database is ready to be used.\n"
                    },
                    "region": {
                        "$ref": "#/types/planetscale:index/getDatabaseRegion:getDatabaseRegion",
                        "description": "The region the database lives in.\n"
                    },
                    "requireApprovalForDeploy": {
                        "type": "boolean",
                        "description": "Whether an approval is required to deploy schema changes to this database.\n"
                    },
                    "restrictBranchRegion": {
                        "type": "boolean",
                        "description": "Whether to restrict branch creation to one region.\n"
                    },
                    "schemaLastUpdatedAt": {
                        "type": "string",
                        "description": "When the default branch schema was last changed.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "If the database is sharded.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the database.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the database was last updated.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the database API endpoint.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowDataBranching",
                    "atBackupRestoreBranchesLimit",
                    "atDevelopmentBranchLimit",
                    "automaticMigrations",
                    "branchesCount",
                    "branchesUrl",
                    "createdAt",
                    "defaultBranch",
                    "defaultBranchReadOnlyRegionsCount",
                    "defaultBranchShardCount",
                    "defaultBranchTableCount",
                    "developmentBranchesCount",
                    "htmlUrl",
                    "id",
                    "insightsRawQueries",
                    "issuesCount",
                    "migrationFramework",
                    "migrationTableName",
                    "multipleAdminsRequiredForDeletion",
                    "name",
                    "organization",
                    "plan",
                    "productionBranchWebConsole",
                    "productionBranchesCount",
                    "ready",
                    "region",
                    "requireApprovalForDeploy",
                    "restrictBranchRegion",
                    "schemaLastUpdatedAt",
                    "sharded",
                    "state",
                    "updatedAt",
                    "url"
                ]
            }
        },
        "planetscale:index/getDatabaseReadOnlyRegions:getDatabaseReadOnlyRegions": {
            "description": "A list of PlanetScale read-only regions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getDatabaseReadOnlyRegions({\n    organization: \"example.com\",\n    name: \"example_db\",\n});\nexport const databaseRoRegions = data.planetscale_database_regions.example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_database_read_only_regions(organization=\"example.com\",\n    name=\"example_db\")\npulumi.export(\"databaseRoRegions\", data[\"planetscale_database_regions\"][\"example\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetDatabaseReadOnlyRegions.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Name = \"example_db\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseRoRegions\"] = data.Planetscale_database_regions.Example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := planetscale.GetDatabaseReadOnlyRegions(ctx, \u0026planetscale.GetDatabaseReadOnlyRegionsArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tName:         \"example_db\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"databaseRoRegions\", data.Planetscale_database_regions.Example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetDatabaseReadOnlyRegionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getDatabaseReadOnlyRegions(GetDatabaseReadOnlyRegionsArgs.builder()\n            .organization(\"example.com\")\n            .name(\"example_db\")\n            .build());\n\n        ctx.export(\"databaseRoRegions\", data.planetscale_database_regions().example());\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getDatabaseReadOnlyRegions\n      Arguments:\n        organization: example.com\n        name: example_db\noutputs:\n  databaseRoRegions: ${data.planetscale_database_regions.example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseReadOnlyRegions.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the database for which the read-only regions are available.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization for which the read-only regions are available.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseReadOnlyRegions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database for which the read-only regions are available.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization for which the read-only regions are available.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getDatabaseReadOnlyRegionsRegion:getDatabaseReadOnlyRegionsRegion"
                        },
                        "description": "The list of read-only regions available for the database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organization",
                    "regions",
                    "id"
                ]
            }
        },
        "planetscale:index/getDatabaseRegions:getDatabaseRegions": {
            "description": "A list of PlanetScale regions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getDatabaseRegions({\n    organization: \"example.com\",\n    name: \"example_db\",\n});\nexport const databaseRegions = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_database_regions(organization=\"example.com\",\n    name=\"example_db\")\npulumi.export(\"databaseRegions\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetDatabaseRegions.Invoke(new()\n    {\n        Organization = \"example.com\",\n        Name = \"example_db\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseRegions\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetDatabaseRegions(ctx, \u0026planetscale.GetDatabaseRegionsArgs{\n\t\t\tOrganization: \"example.com\",\n\t\t\tName:         \"example_db\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"databaseRegions\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetDatabaseRegionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getDatabaseRegions(GetDatabaseRegionsArgs.builder()\n            .organization(\"example.com\")\n            .name(\"example_db\")\n            .build());\n\n        ctx.export(\"databaseRegions\", example.applyValue(getDatabaseRegionsResult -\u003e getDatabaseRegionsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getDatabaseRegions\n      Arguments:\n        organization: example.com\n        name: example_db\noutputs:\n  databaseRegions: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseRegions.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The database for which the regions are available.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization for which the regions are available.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseRegions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The database for which the regions are available.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization for which the regions are available.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getDatabaseRegionsRegion:getDatabaseRegionsRegion"
                        },
                        "description": "The list of regions available for the database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organization",
                    "regions",
                    "id"
                ]
            }
        },
        "planetscale:index/getDatabases:getDatabases": {
            "description": "A list of PlanetScale databases.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getDatabases({\n    organization: \"example\",\n});\nexport const dbs = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_databases(organization=\"example\")\npulumi.export(\"dbs\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetDatabases.Invoke(new()\n    {\n        Organization = \"example\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dbs\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetDatabases(ctx, \u0026planetscale.GetDatabasesArgs{\n\t\t\tOrganization: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dbs\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getDatabases(GetDatabasesArgs.builder()\n            .organization(\"example\")\n            .build());\n\n        ctx.export(\"dbs\", example.applyValue(getDatabasesResult -\u003e getDatabasesResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getDatabases\n      Arguments:\n        organization: example\noutputs:\n  dbs: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabases.\n",
                "properties": {
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getDatabasesDatabase:getDatabasesDatabase"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databases",
                    "organization",
                    "id"
                ]
            }
        },
        "planetscale:index/getOauthApplications:getOauthApplications": {
            "description": "A list of PlanetScale OAuth applications. (requires feature flag)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getOauthApplications({\n    organization: data.planetscale_organization.example.name,\n});\nexport const oauthApps = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_oauth_applications(organization=data[\"planetscale_organization\"][\"example\"][\"name\"])\npulumi.export(\"oauthApps\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetOauthApplications.Invoke(new()\n    {\n        Organization = data.Planetscale_organization.Example.Name,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"oauthApps\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetOauthApplications(ctx, \u0026planetscale.GetOauthApplicationsArgs{\n\t\t\tOrganization: data.Planetscale_organization.Example.Name,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"oauthApps\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetOauthApplicationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getOauthApplications(GetOauthApplicationsArgs.builder()\n            .organization(data.planetscale_organization().example().name())\n            .build());\n\n        ctx.export(\"oauthApps\", example.applyValue(getOauthApplicationsResult -\u003e getOauthApplicationsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getOauthApplications\n      Arguments:\n        organization: ${data.planetscale_organization.example.name}\noutputs:\n  oauthApps: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOauthApplications.\n",
                "properties": {
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOauthApplications.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getOauthApplicationsApplication:getOauthApplicationsApplication"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "applications",
                    "organization",
                    "id"
                ]
            }
        },
        "planetscale:index/getOrganization:getOrganization": {
            "description": "A PlanetScale organization.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getOrganization({\n    name: \"example\",\n});\nexport const org = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_organization(name=\"example\")\npulumi.export(\"org\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetOrganization.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"org\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetOrganization(ctx, \u0026planetscale.GetOrganizationArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"org\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getOrganization(GetOrganizationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        ctx.export(\"org\", example.applyValue(getOrganizationResult -\u003e getOrganizationResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getOrganization\n      Arguments:\n        name: example\noutputs:\n  org: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "adminOnlyProductionAccess": {
                        "type": "boolean",
                        "description": "Whether or not only administrators can access production branches in the organization.\n"
                    },
                    "billingEmail": {
                        "type": "string",
                        "description": "The billing email of the organization.\n"
                    },
                    "canCreateDatabases": {
                        "type": "boolean",
                        "description": "Whether or not more databases can be created in the organization.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the organization was created.\n"
                    },
                    "databaseCount": {
                        "type": "number",
                        "description": "The number of databases in the organization.\n"
                    },
                    "features": {
                        "$ref": "#/types/planetscale:index/getOrganizationFeatures:getOrganizationFeatures",
                        "description": "Features that are enabled on the organization.\n"
                    },
                    "flags": {
                        "$ref": "#/types/planetscale:index/getOrganizationFlags:getOrganizationFlags",
                        "description": ".\n"
                    },
                    "freeDatabasesRemaining": {
                        "type": "number",
                        "description": "The number of remaining free databases that can be created in the organization.\n"
                    },
                    "hasPastDueInvoices": {
                        "type": "boolean",
                        "description": "Whether or not the organization has past due billing invoices.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID for the organization.\n"
                    },
                    "idpManagedRoles": {
                        "type": "boolean",
                        "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the organization.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The billing plan of the organization.\n"
                    },
                    "singleTenancy": {
                        "type": "boolean",
                        "description": "Whether or not the organization has single tenancy enabled.\n"
                    },
                    "sleepingDatabaseCount": {
                        "type": "number",
                        "description": "The number of sleeping databases in the organization.\n"
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Whether or not SSO is enabled on the organization.\n"
                    },
                    "ssoDirectory": {
                        "type": "boolean",
                        "description": "Whether or not the organization uses a WorkOS directory.\n"
                    },
                    "ssoPortalUrl": {
                        "type": "string",
                        "description": "The URL of the organization's SSO portal.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the organization was last updated.\n"
                    },
                    "validBillingInfo": {
                        "type": "boolean",
                        "description": "Whether or not the organization's billing information is valid.\n"
                    }
                },
                "type": "object",
                "required": [
                    "adminOnlyProductionAccess",
                    "billingEmail",
                    "canCreateDatabases",
                    "createdAt",
                    "databaseCount",
                    "features",
                    "flags",
                    "freeDatabasesRemaining",
                    "hasPastDueInvoices",
                    "id",
                    "idpManagedRoles",
                    "name",
                    "plan",
                    "singleTenancy",
                    "sleepingDatabaseCount",
                    "sso",
                    "ssoDirectory",
                    "ssoPortalUrl",
                    "updatedAt",
                    "validBillingInfo"
                ]
            }
        },
        "planetscale:index/getOrganizationRegions:getOrganizationRegions": {
            "description": "A list of PlanetScale regions for the organization.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getOrganizationRegions({\n    organization: \"example\",\n});\nexport const orgRegions = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_organization_regions(organization=\"example\")\npulumi.export(\"orgRegions\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetOrganizationRegions.Invoke(new()\n    {\n        Organization = \"example\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"orgRegions\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetOrganizationRegions(ctx, \u0026planetscale.GetOrganizationRegionsArgs{\n\t\t\tOrganization: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgRegions\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetOrganizationRegionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getOrganizationRegions(GetOrganizationRegionsArgs.builder()\n            .organization(\"example\")\n            .build());\n\n        ctx.export(\"orgRegions\", example.applyValue(getOrganizationRegionsResult -\u003e getOrganizationRegionsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getOrganizationRegions\n      Arguments:\n        organization: example\noutputs:\n  orgRegions: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationRegions.\n",
                "properties": {
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationRegions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getOrganizationRegionsRegion:getOrganizationRegionsRegion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "regions",
                    "id"
                ]
            }
        },
        "planetscale:index/getOrganizations:getOrganizations": {
            "description": "A list of PlanetScale organizations.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getOrganizations({});\nexport const orgs = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_organizations()\npulumi.export(\"orgs\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetOrganizations.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"orgs\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetOrganizations(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgs\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getOrganizations();\n\n        ctx.export(\"orgs\", example.applyValue(getOrganizationsResult -\u003e getOrganizationsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getOrganizations\n      Arguments: {}\noutputs:\n  orgs: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getOrganizations.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getOrganizationsOrganization:getOrganizationsOrganization"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "organizations",
                    "id"
                ]
            }
        },
        "planetscale:index/getPassword:getPassword": {
            "description": "A PlanetScale database password.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getPassword(GetPasswordArgs.builder()\n            .organization(\"example\")\n            .database(\"example_db\")\n            .branch(\"main\")\n            .name(\"antoine-was-here\")\n            .build());\n\n        ctx.export(\"password\", example.applyValue(getPasswordResult -\u003e getPasswordResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getPassword\n      Arguments:\n        organization: example\n        database: example_db\n        branch: main\n        name: antoine-was-here\noutputs:\n  password: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPassword.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch this password belongs to..\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The datanase this branch password belongs to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID for the password.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this database branch password belongs to.\n"
                    },
                    "readOnlyRegionId": {
                        "type": "string",
                        "description": "If the password is for a read-only region, the ID of the region.\n"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "id",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPassword.\n",
                "properties": {
                    "accessHostUrl": {
                        "type": "string",
                        "description": "The host URL for the password.\n"
                    },
                    "actor": {
                        "$ref": "#/types/planetscale:index/getPasswordActor:getPasswordActor",
                        "description": "The actor that created this branch.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch this password belongs to..\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the password was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The datanase this branch password belongs to.\n"
                    },
                    "databaseBranch": {
                        "$ref": "#/types/planetscale:index/getPasswordDatabaseBranch:getPasswordDatabaseBranch",
                        "description": "The branch this password is allowed to access.\n"
                    },
                    "deletedAt": {
                        "type": "string",
                        "description": "When the password was deleted.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "When the password will expire.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID for the password.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the password.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization this database branch password belongs to.\n"
                    },
                    "readOnlyRegionId": {
                        "type": "string",
                        "description": "If the password is for a read-only region, the ID of the region.\n"
                    },
                    "region": {
                        "$ref": "#/types/planetscale:index/getPasswordRegion:getPasswordRegion",
                        "description": "The region in which this password can be used.\n"
                    },
                    "renewable": {
                        "type": "boolean",
                        "description": "Whether or not the password can be renewed.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role for the password.\n"
                    },
                    "ttlSeconds": {
                        "type": "number",
                        "description": "Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for the password.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessHostUrl",
                    "actor",
                    "branch",
                    "createdAt",
                    "database",
                    "databaseBranch",
                    "deletedAt",
                    "expiresAt",
                    "id",
                    "name",
                    "organization",
                    "region",
                    "renewable",
                    "role",
                    "ttlSeconds",
                    "username"
                ]
            }
        },
        "planetscale:index/getPasswords:getPasswords": {
            "description": "A list of PlanetScale database passwords.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getPasswords({\n    organization: \"example\",\n    database: \"example_db\",\n    branch: \"main\",\n});\nexport const passwords = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_passwords(organization=\"example\",\n    database=\"example_db\",\n    branch=\"main\")\npulumi.export(\"passwords\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetPasswords.Invoke(new()\n    {\n        Organization = \"example\",\n        Database = \"example_db\",\n        Branch = \"main\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"passwords\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetPasswords(ctx, \u0026planetscale.GetPasswordsArgs{\n\t\t\tOrganization: \"example\",\n\t\t\tDatabase:     \"example_db\",\n\t\t\tBranch:       \"main\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"passwords\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport com.pulumi.planetscale.inputs.GetPasswordsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getPasswords(GetPasswordsArgs.builder()\n            .organization(\"example\")\n            .database(\"example_db\")\n            .branch(\"main\")\n            .build());\n\n        ctx.export(\"passwords\", example.applyValue(getPasswordsResult -\u003e getPasswordsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getPasswords\n      Arguments:\n        organization: example\n        database: example_db\n        branch: main\noutputs:\n  passwords: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPasswords.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "readOnlyRegionId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPasswords.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "passwords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/planetscale:index/getPasswordsPassword:getPasswordsPassword"
                        }
                    },
                    "readOnlyRegionId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "database",
                    "organization",
                    "passwords",
                    "id"
                ]
            }
        },
        "planetscale:index/getUser:getUser": {
            "description": "A PlanetScale user.\n\nKnown limitations:\n- Does not work when the provider is configured with a service token.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as planetscale from \"@pulumi/planetscale\";\n\nconst example = planetscale.getUser({});\nexport const currentUser = example;\n```\n```python\nimport pulumi\nimport pulumi_planetscale as planetscale\n\nexample = planetscale.get_user()\npulumi.export(\"currentUser\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Planetscale = Pulumi.Planetscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Planetscale.GetUser.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"currentUser\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sst/pulumi-planetscale/sdk/go/planetscale\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := planetscale.GetUser(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"currentUser\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.planetscale.PlanetscaleFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlanetscaleFunctions.getUser();\n\n        ctx.export(\"currentUser\", example.applyValue(getUserResult -\u003e getUserResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: planetscale:getUser\n      Arguments: {}\noutputs:\n  currentUser: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "The URL source of the user's avatar.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the user was created.\n"
                    },
                    "defaultOrganizationId": {
                        "type": "string",
                        "description": "The default organization for the user.\n"
                    },
                    "directoryManaged": {
                        "type": "boolean",
                        "description": "Whether or not the user is managed by a WorkOS directory.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "Whether or not the user is verified by email.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether or not the user is managed by an authentication provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Whether or not the user is managed by WorkOS.\n"
                    },
                    "twoFactorAuthConfigured": {
                        "type": "boolean",
                        "description": "Whether or not the user has configured two factor authentication.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the user was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "createdAt",
                    "defaultOrganizationId",
                    "directoryManaged",
                    "displayName",
                    "email",
                    "emailVerified",
                    "id",
                    "managed",
                    "name",
                    "sso",
                    "twoFactorAuthConfigured",
                    "updatedAt"
                ]
            }
        }
    }
}