// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A PlanetScale database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as planetscale from "@pulumi/planetscale";
 *
 * const example = planetscale.getDatabase({
 *     organization: "example",
 *     name: "again",
 * });
 * export const db = example;
 * ```
 */
export function getDatabase(args: GetDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("planetscale:index/getDatabase:getDatabase", {
        "allowDataBranching": args.allowDataBranching,
        "automaticMigrations": args.automaticMigrations,
        "dataImport": args.dataImport,
        "defaultBranch": args.defaultBranch,
        "insightsRawQueries": args.insightsRawQueries,
        "issuesCount": args.issuesCount,
        "migrationFramework": args.migrationFramework,
        "migrationTableName": args.migrationTableName,
        "multipleAdminsRequiredForDeletion": args.multipleAdminsRequiredForDeletion,
        "name": args.name,
        "organization": args.organization,
        "plan": args.plan,
        "productionBranchWebConsole": args.productionBranchWebConsole,
        "region": args.region,
        "requireApprovalForDeploy": args.requireApprovalForDeploy,
        "restrictBranchRegion": args.restrictBranchRegion,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabase.
 */
export interface GetDatabaseArgs {
    /**
     * Whether seeding branches with data is enabled for all branches.
     */
    allowDataBranching?: boolean;
    /**
     * Whether to automatically manage Rails migrations during deploy requests.
     */
    automaticMigrations?: boolean;
    /**
     * If the database was created from an import, describes the import process.
     */
    dataImport?: inputs.GetDatabaseDataImport;
    /**
     * The default branch for the database.
     */
    defaultBranch?: string;
    /**
     * The URL to see this database's branches in the web UI.
     */
    insightsRawQueries?: boolean;
    /**
     * The total number of ongoing issues within a database.
     */
    issuesCount?: number;
    /**
     * Framework used for applying migrations.
     */
    migrationFramework?: string;
    /**
     * Table name to use for copying schema migration data.
     */
    migrationTableName?: string;
    /**
     * If the database requires multiple admins for deletion.
     */
    multipleAdminsRequiredForDeletion?: boolean;
    /**
     * The name of this database.
     */
    name: string;
    /**
     * The organization this database belongs to.
     */
    organization: string;
    /**
     * The database plan.
     */
    plan?: string;
    /**
     * Whether web console is enabled for production branches.
     */
    productionBranchWebConsole?: boolean;
    /**
     * The region the database lives in.
     */
    region?: inputs.GetDatabaseRegion;
    /**
     * Whether an approval is required to deploy schema changes to this database.
     */
    requireApprovalForDeploy?: boolean;
    /**
     * Whether to restrict branch creation to one region.
     */
    restrictBranchRegion?: boolean;
}

/**
 * A collection of values returned by getDatabase.
 */
export interface GetDatabaseResult {
    /**
     * Whether seeding branches with data is enabled for all branches.
     */
    readonly allowDataBranching: boolean;
    /**
     * If the database has reached its backup restored branch limit.
     */
    readonly atBackupRestoreBranchesLimit: boolean;
    /**
     * If the database has reached its development branch limit.
     */
    readonly atDevelopmentBranchLimit: boolean;
    /**
     * Whether to automatically manage Rails migrations during deploy requests.
     */
    readonly automaticMigrations: boolean;
    /**
     * The total number of database branches.
     */
    readonly branchesCount: number;
    /**
     * The URL to retrieve this database's branches via the API.
     */
    readonly branchesUrl: string;
    /**
     * When the database was created.
     */
    readonly createdAt: string;
    /**
     * If the database was created from an import, describes the import process.
     */
    readonly dataImport?: outputs.GetDatabaseDataImport;
    /**
     * The default branch for the database.
     */
    readonly defaultBranch: string;
    /**
     * Number of read only regions in the default branch.
     */
    readonly defaultBranchReadOnlyRegionsCount: number;
    /**
     * Number of shards in the default branch.
     */
    readonly defaultBranchShardCount: number;
    /**
     * Number of tables in the default branch schema.
     */
    readonly defaultBranchTableCount: number;
    /**
     * The total number of database development branches.
     */
    readonly developmentBranchesCount: number;
    /**
     * The total number of database development branches.
     */
    readonly htmlUrl: string;
    /**
     * The ID of the database.
     */
    readonly id: string;
    /**
     * The URL to see this database's branches in the web UI.
     */
    readonly insightsRawQueries: boolean;
    /**
     * The total number of ongoing issues within a database.
     */
    readonly issuesCount: number;
    /**
     * Framework used for applying migrations.
     */
    readonly migrationFramework: string;
    /**
     * Table name to use for copying schema migration data.
     */
    readonly migrationTableName: string;
    /**
     * If the database requires multiple admins for deletion.
     */
    readonly multipleAdminsRequiredForDeletion: boolean;
    /**
     * The name of this database.
     */
    readonly name: string;
    /**
     * The organization this database belongs to.
     */
    readonly organization: string;
    /**
     * The database plan.
     */
    readonly plan: string;
    /**
     * Whether web console is enabled for production branches.
     */
    readonly productionBranchWebConsole: boolean;
    /**
     * The total number of database production branches.
     */
    readonly productionBranchesCount: number;
    /**
     * If the database is ready to be used.
     */
    readonly ready: boolean;
    /**
     * The region the database lives in.
     */
    readonly region: outputs.GetDatabaseRegion;
    /**
     * Whether an approval is required to deploy schema changes to this database.
     */
    readonly requireApprovalForDeploy: boolean;
    /**
     * Whether to restrict branch creation to one region.
     */
    readonly restrictBranchRegion: boolean;
    /**
     * When the default branch schema was last changed.
     */
    readonly schemaLastUpdatedAt: string;
    /**
     * If the database is sharded.
     */
    readonly sharded: boolean;
    /**
     * State of the database.
     */
    readonly state: string;
    /**
     * When the database was last updated.
     */
    readonly updatedAt: string;
    /**
     * The URL to the database API endpoint.
     */
    readonly url: string;
}
/**
 * A PlanetScale database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as planetscale from "@pulumi/planetscale";
 *
 * const example = planetscale.getDatabase({
 *     organization: "example",
 *     name: "again",
 * });
 * export const db = example;
 * ```
 */
export function getDatabaseOutput(args: GetDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getDatabase.
 */
export interface GetDatabaseOutputArgs {
    /**
     * Whether seeding branches with data is enabled for all branches.
     */
    allowDataBranching?: pulumi.Input<boolean>;
    /**
     * Whether to automatically manage Rails migrations during deploy requests.
     */
    automaticMigrations?: pulumi.Input<boolean>;
    /**
     * If the database was created from an import, describes the import process.
     */
    dataImport?: pulumi.Input<inputs.GetDatabaseDataImportArgs>;
    /**
     * The default branch for the database.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * The URL to see this database's branches in the web UI.
     */
    insightsRawQueries?: pulumi.Input<boolean>;
    /**
     * The total number of ongoing issues within a database.
     */
    issuesCount?: pulumi.Input<number>;
    /**
     * Framework used for applying migrations.
     */
    migrationFramework?: pulumi.Input<string>;
    /**
     * Table name to use for copying schema migration data.
     */
    migrationTableName?: pulumi.Input<string>;
    /**
     * If the database requires multiple admins for deletion.
     */
    multipleAdminsRequiredForDeletion?: pulumi.Input<boolean>;
    /**
     * The name of this database.
     */
    name: pulumi.Input<string>;
    /**
     * The organization this database belongs to.
     */
    organization: pulumi.Input<string>;
    /**
     * The database plan.
     */
    plan?: pulumi.Input<string>;
    /**
     * Whether web console is enabled for production branches.
     */
    productionBranchWebConsole?: pulumi.Input<boolean>;
    /**
     * The region the database lives in.
     */
    region?: pulumi.Input<inputs.GetDatabaseRegionArgs>;
    /**
     * Whether an approval is required to deploy schema changes to this database.
     */
    requireApprovalForDeploy?: pulumi.Input<boolean>;
    /**
     * Whether to restrict branch creation to one region.
     */
    restrictBranchRegion?: pulumi.Input<boolean>;
}
