// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A PlanetScale backup.
 *
 * Known limitations:
 * - It is not currently possible to manage backup schedules, only retention periods.
 */
export class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupState, opts?: pulumi.CustomResourceOptions): Backup {
        return new Backup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'planetscale:index/backup:Backup';

    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }

    /**
     * .
     */
    public /*out*/ readonly actor!: pulumi.Output<outputs.BackupActor>;
    /**
     * The policy used by the backup.
     */
    public readonly backupPolicy!: pulumi.Output<outputs.BackupBackupPolicy>;
    /**
     * The branch being backed up.
     */
    public readonly branch!: pulumi.Output<string>;
    /**
     * When the backup was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The database to which the branch being backed up belongs to.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * The estimated storage cost of the backup.
     */
    public /*out*/ readonly estimatedStorageCost!: pulumi.Output<string>;
    /**
     * The name of the backup.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization in which the database branch being backed up belongs to.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * Whether or not the backup policy is required.
     */
    public /*out*/ readonly required!: pulumi.Output<boolean>;
    /**
     * Branches that have been restored with this backup.
     */
    public /*out*/ readonly restoredBranches!: pulumi.Output<string[]>;
    /**
     * The size of the backup.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * The current state of the backup.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * When the backup was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Backup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupArgs | BackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupState | undefined;
            resourceInputs["actor"] = state ? state.actor : undefined;
            resourceInputs["backupPolicy"] = state ? state.backupPolicy : undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["estimatedStorageCost"] = state ? state.estimatedStorageCost : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["restoredBranches"] = state ? state.restoredBranches : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as BackupArgs | undefined;
            if ((!args || args.backupPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupPolicy'");
            }
            if ((!args || args.branch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["backupPolicy"] = args ? args.backupPolicy : undefined;
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["actor"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["estimatedStorageCost"] = undefined /*out*/;
            resourceInputs["required"] = undefined /*out*/;
            resourceInputs["restoredBranches"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Backup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Backup resources.
 */
export interface BackupState {
    /**
     * .
     */
    actor?: pulumi.Input<inputs.BackupActor>;
    /**
     * The policy used by the backup.
     */
    backupPolicy?: pulumi.Input<inputs.BackupBackupPolicy>;
    /**
     * The branch being backed up.
     */
    branch?: pulumi.Input<string>;
    /**
     * When the backup was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The database to which the branch being backed up belongs to.
     */
    database?: pulumi.Input<string>;
    /**
     * The estimated storage cost of the backup.
     */
    estimatedStorageCost?: pulumi.Input<string>;
    /**
     * The name of the backup.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization in which the database branch being backed up belongs to.
     */
    organization?: pulumi.Input<string>;
    /**
     * Whether or not the backup policy is required.
     */
    required?: pulumi.Input<boolean>;
    /**
     * Branches that have been restored with this backup.
     */
    restoredBranches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the backup.
     */
    size?: pulumi.Input<number>;
    /**
     * The current state of the backup.
     */
    state?: pulumi.Input<string>;
    /**
     * When the backup was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backup resource.
 */
export interface BackupArgs {
    /**
     * The policy used by the backup.
     */
    backupPolicy: pulumi.Input<inputs.BackupBackupPolicy>;
    /**
     * The branch being backed up.
     */
    branch: pulumi.Input<string>;
    /**
     * The database to which the branch being backed up belongs to.
     */
    database: pulumi.Input<string>;
    /**
     * The name of the backup.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization in which the database branch being backed up belongs to.
     */
    organization: pulumi.Input<string>;
}
