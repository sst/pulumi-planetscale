// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BackupActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface BackupBackupPolicy {
    /**
     * When the backup policy was created.
     */
    createdAt: string;
    /**
     * The unit for the frequency of the backup policy. Not configurable for now.
     */
    frequencyUnit: string;
    /**
     * A number value for the frequency of the backup policy. Not configurable for now.
     */
    frequencyValue: number;
    /**
     * The ID of the backup policy.
     */
    id: string;
    /**
     * When the backup was last run.
     */
    lastRanAt: string;
    /**
     * The name of the backup policy.
     */
    name: string;
    /**
     * When the backup will next run.
     */
    nextRunAt: string;
    /**
     * The unit for the retention period of the backup policy.
     */
    retentionUnit: string;
    /**
     * A number value for the retention period of the backup policy.
     */
    retentionValue: number;
    /**
     * Day of the week that the backup is scheduled.
     */
    scheduleDay: string;
    /**
     * Week of the month that the backup is scheduled.
     */
    scheduleWeek: string;
    /**
     * Whether the backup policy is for a production or development database, or for a database branch.
     */
    target: string;
    /**
     * When the backup policy was last updated.
     */
    updatedAt: string;
}

export interface BranchActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface BranchRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface BranchRestoredFromBranch {
    /**
     * When the resource was created.
     */
    createdAt: string;
    /**
     * When the resource was deleted, if deleted.
     */
    deletedAt: string;
    /**
     * The ID for the resource.
     */
    id: string;
    /**
     * The name for the resource.
     */
    name: string;
    /**
     * When the resource was last updated.
     */
    updatedAt: string;
}

export interface DatabaseDataImport {
    /**
     * Connection information for the source of the data for the import.
     */
    dataSource: outputs.DatabaseDataImportDataSource;
    /**
     * When the import finished.
     */
    finishedAt: string;
    /**
     * Errors encountered while preparing the import.
     */
    importCheckErrors: string;
    /**
     * When the import started.
     */
    startedAt: string;
    /**
     * The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
     */
    state: string;
}

export interface DatabaseDataImportDataSource {
    /**
     * The name of the database imported from.
     */
    database: string;
    /**
     * The hostname where the database lives.
     */
    hostname: string;
    /**
     * The port on which the database listens on the host.
     */
    port: string;
}

export interface GetBackupActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface GetBackupBackupPolicy {
    /**
     * When the backup policy was created.
     */
    createdAt: string;
    /**
     * The unit for the frequency of the backup policy.
     */
    frequencyUnit: string;
    /**
     * A number value for the frequency of the backup policy.
     */
    frequencyValue: number;
    /**
     * The ID of the backup policy.
     */
    id: string;
    /**
     * When the backup was last run.
     */
    lastRanAt: string;
    /**
     * The name of the backup policy.
     */
    name: string;
    /**
     * When the backup will next run.
     */
    nextRunAt: string;
    /**
     * The unit for the retention period of the backup policy.
     */
    retentionUnit: string;
    /**
     * A number value for the retention period of the backup policy.
     */
    retentionValue: number;
    /**
     * Day of the week that the backup is scheduled.
     */
    scheduleDay: string;
    /**
     * Week of the month that the backup is scheduled.
     */
    scheduleWeek: string;
    /**
     * Whether the backup policy is for a production or development database, or for a database branch.
     */
    target: string;
    /**
     * When the backup policy was last updated.
     */
    updatedAt: string;
}

export interface GetBackupsBackup {
    /**
     * The actor that created the backup.
     */
    actor: outputs.GetBackupsBackupActor;
    /**
     * The backup policy being followed.
     */
    backupPolicy: outputs.GetBackupsBackupBackupPolicy;
    /**
     * The branch this backup belongs to.
     */
    branch: string;
    /**
     * When the backup was created.
     */
    createdAt: string;
    /**
     * The database this backup belongs to.
     */
    database: string;
    /**
     * The estimated storage cost of the backup.
     */
    estimatedStorageCost: string;
    /**
     * The ID of the backup.
     */
    id: string;
    /**
     * The name of the backup.
     */
    name: string;
    /**
     * The organization this backup belongs to.
     */
    organization: string;
    /**
     * Whether or not the backup policy is required.
     */
    required: boolean;
    /**
     * Branches that have been restored with this backup.
     */
    restoredBranches: string[];
    /**
     * The size of the backup.
     */
    size: number;
    /**
     * The current state of the backup.
     */
    state: string;
    /**
     * When the backup was last updated.
     */
    updatedAt: string;
}

export interface GetBackupsBackupActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface GetBackupsBackupBackupPolicy {
    /**
     * When the backup policy was created.
     */
    createdAt: string;
    /**
     * The unit for the frequency of the backup policy.
     */
    frequencyUnit: string;
    /**
     * A number value for the frequency of the backup policy.
     */
    frequencyValue: number;
    /**
     * The ID of the backup policy.
     */
    id: string;
    /**
     * When the backup was last run.
     */
    lastRanAt: string;
    /**
     * The name of the backup policy.
     */
    name: string;
    /**
     * When the backup will next run.
     */
    nextRunAt: string;
    /**
     * The unit for the retention period of the backup policy.
     */
    retentionUnit: string;
    /**
     * A number value for the retention period of the backup policy.
     */
    retentionValue: number;
    /**
     * Day of the week that the backup is scheduled.
     */
    scheduleDay: string;
    /**
     * Week of the month that the backup is scheduled.
     */
    scheduleWeek: string;
    /**
     * Whether the backup policy is for a production or development database, or for a database branch.
     */
    target: string;
    /**
     * When the backup policy was last updated.
     */
    updatedAt: string;
}

export interface GetBranchActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface GetBranchRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetBranchRestoredFromBranch {
    /**
     * When the resource was created.
     */
    createdAt: string;
    /**
     * When the resource was deleted, if deleted.
     */
    deletedAt: string;
    /**
     * The ID for the resource.
     */
    id: string;
    /**
     * The name for the resource.
     */
    name: string;
    /**
     * When the resource was last updated.
     */
    updatedAt: string;
}

export interface GetBranchSchemaLintError {
    /**
     * A list of invalid auto-incremented columns.
     */
    autoIncrementColumnNames: string[];
    /**
     * The charset of the schema.
     */
    charsetName: string;
    /**
     * The name of the invalid check constraint.
     */
    checkConstraintName: string;
    /**
     * The column in a table relevant to the error.
     */
    columnName: string;
    /**
     * A link to the documentation related to the error.
     */
    docsUrl: string;
    /**
     * The engine of the schema.
     */
    engineName: string;
    /**
     * The name of the invalid enum value.
     */
    enumValue: string;
    /**
     * A description for the error that occurred.
     */
    errorDescription: string;
    /**
     * A list of invalid foreign key columns in a table.
     */
    foreignKeyColumnNames: string[];
    /**
     * The path for an invalid JSON column.
     */
    jsonPath: string;
    /**
     * The keyspace of the schema with the error.
     */
    keyspaceName: string;
    /**
     * Code representing.
     */
    lintError: string;
    /**
     * The name of the invalid partition in the schema.
     */
    partitionName: string;
    /**
     * The name of the invalid partitioning type.
     */
    partitioningType: string;
    /**
     * The subject for the errors.
     */
    subjectType: string;
    /**
     * The table with the error.
     */
    tableName: string;
    /**
     * The name of the vindex for the schema.
     */
    vindexName: string;
}

export interface GetBranchSchemaTable {
    /**
     * Syntax highlighted HTML for the table's schema.
     */
    html: string;
    /**
     * Name of the table.
     */
    name: string;
    /**
     * The table's schema.
     */
    raw: string;
}

export interface GetBranchesBranch {
    /**
     * The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
     */
    accessHostUrl: string;
    /**
     * The actor who created this branch.
     */
    actor: outputs.GetBranchesBranchActor;
    /**
     * The SKU representing the branch's cluster size.
     */
    clusterRateName: string;
    /**
     * When the branch was created.
     */
    createdAt: string;
    /**
     * The database this branch belongs to.
     */
    database: string;
    /**
     * Planetscale app URL for the branch.
     */
    htmlUrl: string;
    /**
     * The ID of the branch.
     */
    id: string;
    /**
     * The ID of the backup from which the branch was restored.
     */
    initialRestoreId: string;
    /**
     * The MySQL address for the branch.
     */
    mysqlAddress: string;
    /**
     * The address of the MySQL provider for the branch.
     */
    mysqlEdgeAddress: string;
    /**
     * The name of the branch.
     */
    name: string;
    /**
     * The organization this branch belongs to.
     */
    organization: string;
    /**
     * The name of the parent branch from which the branch was created.
     */
    parentBranch: string;
    /**
     * Whether or not the branch is a production branch.
     */
    production: boolean;
    /**
     * Whether or not the branch is ready to serve queries.
     */
    ready: boolean;
    /**
     * The region in which this branch lives.
     */
    region: outputs.GetBranchesBranchRegion;
    /**
     * When a user last marked a backup restore checklist as completed.
     */
    restoreChecklistCompletedAt: string;
    restoredFromBranch: outputs.GetBranchesBranchRestoredFromBranch;
    /**
     * When the schema for the branch was last updated.
     */
    schemaLastUpdatedAt: string;
    /**
     * The number of shards in the branch.
     */
    shardCount: number;
    /**
     * Whether or not the branch is sharded.
     */
    sharded: boolean;
    /**
     * When the branch was last updated.
     */
    updatedAt: string;
}

export interface GetBranchesBranchActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface GetBranchesBranchRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetBranchesBranchRestoredFromBranch {
    /**
     * When the resource was created.
     */
    createdAt: string;
    /**
     * When the resource was deleted, if deleted.
     */
    deletedAt: string;
    /**
     * The ID for the resource.
     */
    id: string;
    /**
     * The name for the resource.
     */
    name: string;
    /**
     * When the resource was last updated.
     */
    updatedAt: string;
}

export interface GetDatabaseDataImport {
    /**
     * Connection information for the source of the data for the import.
     */
    dataSource: outputs.GetDatabaseDataImportDataSource;
    /**
     * When the import finished.
     */
    finishedAt: string;
    /**
     * Errors encountered while preparing the import.
     */
    importCheckErrors: string;
    /**
     * When the import started.
     */
    startedAt: string;
    /**
     * The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
     */
    state: string;
}

export interface GetDatabaseDataImportDataSource {
    /**
     * The name of the database imported from.
     */
    database: string;
    /**
     * The hostname where the database lives.
     */
    hostname: string;
    /**
     * The port on which the database listens on the host.
     */
    port: string;
}

export interface GetDatabaseReadOnlyRegionsRegion {
    /**
     * The actor that created the read-only region.
     */
    actor: outputs.GetDatabaseReadOnlyRegionsRegionActor;
    /**
     * When the read-only region was created.
     */
    createdAt: string;
    /**
     * The name of the read-only region.
     */
    displayName: string;
    /**
     * The ID of the read-only region.
     */
    id: string;
    /**
     * Whether or not the read-only region is ready to serve queries.
     */
    ready: boolean;
    /**
     * When the read-only region was ready to serve queries.
     */
    readyAt: string;
    /**
     * The details of the read-only region.
     */
    region: outputs.GetDatabaseReadOnlyRegionsRegionRegion;
    /**
     * When the read-only region was last updated.
     */
    updatedAt: string;
}

export interface GetDatabaseReadOnlyRegionsRegionActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface GetDatabaseReadOnlyRegionsRegionRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetDatabaseRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetDatabaseRegionsRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetDatabasesDatabase {
    /**
     * Whether seeding branches with data is enabled for all branches.
     */
    allowDataBranching: boolean;
    /**
     * If the database has reached its backup restored branch limit.
     */
    atBackupRestoreBranchesLimit: boolean;
    /**
     * If the database has reached its development branch limit.
     */
    atDevelopmentBranchLimit: boolean;
    /**
     * Whether to automatically manage Rails migrations during deploy requests.
     */
    automaticMigrations: boolean;
    /**
     * The total number of database branches.
     */
    branchesCount: number;
    /**
     * The URL to retrieve this database's branches via the API.
     */
    branchesUrl: string;
    /**
     * When the database was created.
     */
    createdAt: string;
    /**
     * If the database was created from an import, describes the import process.
     */
    dataImport?: outputs.GetDatabasesDatabaseDataImport;
    /**
     * The default branch for the database.
     */
    defaultBranch: string;
    /**
     * Number of read only regions in the default branch.
     */
    defaultBranchReadOnlyRegionsCount: number;
    /**
     * Number of shards in the default branch.
     */
    defaultBranchShardCount: number;
    /**
     * Number of tables in the default branch schema.
     */
    defaultBranchTableCount: number;
    /**
     * The total number of database development branches.
     */
    developmentBranchesCount: number;
    /**
     * The total number of database development branches.
     */
    htmlUrl: string;
    /**
     * The ID of the database.
     */
    id: string;
    /**
     * The URL to see this database's branches in the web UI.
     */
    insightsRawQueries: boolean;
    /**
     * The total number of ongoing issues within a database.
     */
    issuesCount: number;
    /**
     * Framework used for applying migrations.
     */
    migrationFramework: string;
    /**
     * Table name to use for copying schema migration data.
     */
    migrationTableName: string;
    /**
     * If the database requires multiple admins for deletion.
     */
    multipleAdminsRequiredForDeletion: boolean;
    /**
     * The name of this database.
     */
    name: string;
    /**
     * The organization this database belongs to.
     */
    organization: string;
    /**
     * The database plan.
     */
    plan: string;
    /**
     * Whether web console is enabled for production branches.
     */
    productionBranchWebConsole: boolean;
    /**
     * The total number of database production branches.
     */
    productionBranchesCount: number;
    /**
     * If the database is ready to be used.
     */
    ready: boolean;
    /**
     * The region the database lives in.
     */
    region: outputs.GetDatabasesDatabaseRegion;
    /**
     * Whether an approval is required to deploy schema changes to this database.
     */
    requireApprovalForDeploy: boolean;
    /**
     * Whether to restrict branch creation to one region.
     */
    restrictBranchRegion: boolean;
    /**
     * When the default branch schema was last changed.
     */
    schemaLastUpdatedAt: string;
    /**
     * If the database is sharded.
     */
    sharded: boolean;
    /**
     * State of the database.
     */
    state: string;
    /**
     * When the database was last updated.
     */
    updatedAt: string;
    /**
     * The URL to the database API endpoint.
     */
    url: string;
}

export interface GetDatabasesDatabaseDataImport {
    /**
     * Connection information for the source of the data for the import.
     */
    dataSource: outputs.GetDatabasesDatabaseDataImportDataSource;
    /**
     * When the import finished.
     */
    finishedAt: string;
    /**
     * Errors encountered while preparing the import.
     */
    importCheckErrors: string;
    /**
     * When the import started.
     */
    startedAt: string;
    /**
     * The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
     */
    state: string;
}

export interface GetDatabasesDatabaseDataImportDataSource {
    /**
     * The name of the database imported from.
     */
    database: string;
    /**
     * The hostname where the database lives.
     */
    hostname: string;
    /**
     * The port on which the database listens on the host.
     */
    port: string;
}

export interface GetDatabasesDatabaseRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetOauthApplicationsApplication {
    /**
     * The image source for the OAuth application's avatar.
     */
    avatar: string;
    /**
     * The OAuth application's unique client id.
     */
    clientId: string;
    /**
     * When the OAuth application was created.
     */
    createdAt: string;
    /**
     * The domain of the OAuth application. Used for verification of a valid redirect uri.
     */
    domain: string;
    /**
     * The ID of the OAuth application.
     */
    id: string;
    /**
     * The name of the OAuth application.
     */
    name: string;
    /**
     * The redirect URI of the OAuth application.
     */
    redirectUri: string;
    /**
     * The scopes that the OAuth application requires on a user's accout.
     */
    scopes: string[];
    /**
     * The number of tokens issued by the OAuth application.
     */
    tokens: number;
    /**
     * When the OAuth application was last updated.
     */
    updatedAt: string;
}

export interface GetOrganizationFeatures {
    insights: boolean;
    singleTenancy: boolean;
    sso: boolean;
}

export interface GetOrganizationFlags {
    exampleFlag: string;
}

export interface GetOrganizationRegionsRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetOrganizationsOrganization {
    /**
     * Whether or not only administrators can access production branches in the organization.
     */
    adminOnlyProductionAccess: boolean;
    /**
     * The billing email of the organization.
     */
    billingEmail: string;
    /**
     * Whether or not more databases can be created in the organization.
     */
    canCreateDatabases: boolean;
    /**
     * When the organization was created.
     */
    createdAt: string;
    /**
     * The number of databases in the organization.
     */
    databaseCount: number;
    /**
     * Features that are enabled on the organization.
     */
    features: outputs.GetOrganizationsOrganizationFeatures;
    /**
     * .
     */
    flags: outputs.GetOrganizationsOrganizationFlags;
    /**
     * The number of remaining free databases that can be created in the organization.
     */
    freeDatabasesRemaining: number;
    /**
     * Whether or not the organization has past due billing invoices.
     */
    hasPastDueInvoices: boolean;
    /**
     * The ID for the organization.
     */
    id: string;
    /**
     * Whether or not the IdP provider is be responsible for managing roles in PlanetScale.
     */
    idpManagedRoles: boolean;
    /**
     * The name of the organization.
     */
    name: string;
    /**
     * The billing plan of the organization.
     */
    plan: string;
    /**
     * Whether or not the organization has single tenancy enabled.
     */
    singleTenancy: boolean;
    /**
     * The number of sleeping databases in the organization.
     */
    sleepingDatabaseCount: number;
    /**
     * Whether or not SSO is enabled on the organization.
     */
    sso: boolean;
    /**
     * Whether or not the organization uses a WorkOS directory.
     */
    ssoDirectory: boolean;
    /**
     * The URL of the organization's SSO portal.
     */
    ssoPortalUrl: string;
    /**
     * When the organization was last updated.
     */
    updatedAt: string;
    /**
     * Whether or not the organization's billing information is valid.
     */
    validBillingInfo: boolean;
}

export interface GetOrganizationsOrganizationFeatures {
    insights: boolean;
    singleTenancy: boolean;
    sso: boolean;
}

export interface GetOrganizationsOrganizationFlags {
    exampleFlag: string;
}

export interface GetPasswordActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface GetPasswordDatabaseBranch {
    accessHostUrl: string;
    id: string;
    mysqlEdgeAddress: string;
    name: string;
    production: boolean;
}

export interface GetPasswordRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface GetPasswordsPassword {
    /**
     * The host URL for the password.
     */
    accessHostUrl: string;
    /**
     * The actor that created this branch.
     */
    actor: outputs.GetPasswordsPasswordActor;
    /**
     * The branch this password belongs to..
     */
    branch: string;
    /**
     * When the password was created.
     */
    createdAt: string;
    /**
     * The datanase this branch password belongs to.
     */
    database: string;
    /**
     * The branch this password is allowed to access.
     */
    databaseBranch: outputs.GetPasswordsPasswordDatabaseBranch;
    /**
     * When the password was deleted.
     */
    deletedAt: string;
    /**
     * When the password will expire.
     */
    expiresAt: string;
    /**
     * The ID for the password.
     */
    id: string;
    /**
     * The display name for the password.
     */
    name: string;
    /**
     * The organization this database branch password belongs to.
     */
    organization: string;
    /**
     * If the password is for a read-only region, the ID of the region.
     */
    readOnlyRegionId: string;
    /**
     * The region in which this password can be used.
     */
    region: outputs.GetPasswordsPasswordRegion;
    /**
     * Whether or not the password can be renewed.
     */
    renewable: boolean;
    /**
     * The role for the password.
     */
    role: string;
    /**
     * Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
     */
    ttlSeconds: number;
    /**
     * The username for the password.
     */
    username: string;
}

export interface GetPasswordsPasswordActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface GetPasswordsPasswordDatabaseBranch {
    accessHostUrl: string;
    id: string;
    mysqlEdgeAddress: string;
    name: string;
    production: boolean;
}

export interface GetPasswordsPasswordRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

export interface PasswordActor {
    /**
     * The URL of the actor's avatar
     */
    avatarUrl: string;
    /**
     * The name of the actor
     */
    displayName: string;
    /**
     * The ID of the actor
     */
    id: string;
}

export interface PasswordDatabaseBranch {
    accessHostUrl: string;
    id: string;
    mysqlEdgeAddress: string;
    name: string;
    production: boolean;
}

export interface PasswordRegion {
    /**
     * Name of the region.
     */
    displayName: string;
    /**
     * Whether or not the region is currently active.
     */
    enabled: boolean;
    /**
     * The ID of the region.
     */
    id: string;
    /**
     * Location of the region.
     */
    location: string;
    /**
     * Provider for the region (ex. AWS).
     */
    provider: string;
    /**
     * Public IP addresses for the region.
     */
    publicIpAddresses: string[];
    /**
     * The slug of the region.
     */
    slug: string;
}

