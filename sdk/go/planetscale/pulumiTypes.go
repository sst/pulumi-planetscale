// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package planetscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sst/pulumi-planetscale/sdk/go/planetscale/internal"
)

var _ = internal.GetEnvOrDefault

type BackupActor struct {
	// The URL of the actor's avatar
	AvatarUrl *string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName *string `pulumi:"displayName"`
	// The ID of the actor
	Id *string `pulumi:"id"`
}

// BackupActorInput is an input type that accepts BackupActorArgs and BackupActorOutput values.
// You can construct a concrete instance of `BackupActorInput` via:
//
//	BackupActorArgs{...}
type BackupActorInput interface {
	pulumi.Input

	ToBackupActorOutput() BackupActorOutput
	ToBackupActorOutputWithContext(context.Context) BackupActorOutput
}

type BackupActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringPtrInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (BackupActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupActor)(nil)).Elem()
}

func (i BackupActorArgs) ToBackupActorOutput() BackupActorOutput {
	return i.ToBackupActorOutputWithContext(context.Background())
}

func (i BackupActorArgs) ToBackupActorOutputWithContext(ctx context.Context) BackupActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupActorOutput)
}

func (i BackupActorArgs) ToBackupActorPtrOutput() BackupActorPtrOutput {
	return i.ToBackupActorPtrOutputWithContext(context.Background())
}

func (i BackupActorArgs) ToBackupActorPtrOutputWithContext(ctx context.Context) BackupActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupActorOutput).ToBackupActorPtrOutputWithContext(ctx)
}

// BackupActorPtrInput is an input type that accepts BackupActorArgs, BackupActorPtr and BackupActorPtrOutput values.
// You can construct a concrete instance of `BackupActorPtrInput` via:
//
//	        BackupActorArgs{...}
//
//	or:
//
//	        nil
type BackupActorPtrInput interface {
	pulumi.Input

	ToBackupActorPtrOutput() BackupActorPtrOutput
	ToBackupActorPtrOutputWithContext(context.Context) BackupActorPtrOutput
}

type backupActorPtrType BackupActorArgs

func BackupActorPtr(v *BackupActorArgs) BackupActorPtrInput {
	return (*backupActorPtrType)(v)
}

func (*backupActorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupActor)(nil)).Elem()
}

func (i *backupActorPtrType) ToBackupActorPtrOutput() BackupActorPtrOutput {
	return i.ToBackupActorPtrOutputWithContext(context.Background())
}

func (i *backupActorPtrType) ToBackupActorPtrOutputWithContext(ctx context.Context) BackupActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupActorPtrOutput)
}

type BackupActorOutput struct{ *pulumi.OutputState }

func (BackupActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupActor)(nil)).Elem()
}

func (o BackupActorOutput) ToBackupActorOutput() BackupActorOutput {
	return o
}

func (o BackupActorOutput) ToBackupActorOutputWithContext(ctx context.Context) BackupActorOutput {
	return o
}

func (o BackupActorOutput) ToBackupActorPtrOutput() BackupActorPtrOutput {
	return o.ToBackupActorPtrOutputWithContext(context.Background())
}

func (o BackupActorOutput) ToBackupActorPtrOutputWithContext(ctx context.Context) BackupActorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupActor) *BackupActor {
		return &v
	}).(BackupActorPtrOutput)
}

// The URL of the actor's avatar
func (o BackupActorOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupActor) *string { return v.AvatarUrl }).(pulumi.StringPtrOutput)
}

// The name of the actor
func (o BackupActorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupActor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ID of the actor
func (o BackupActorOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupActor) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type BackupActorPtrOutput struct{ *pulumi.OutputState }

func (BackupActorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupActor)(nil)).Elem()
}

func (o BackupActorPtrOutput) ToBackupActorPtrOutput() BackupActorPtrOutput {
	return o
}

func (o BackupActorPtrOutput) ToBackupActorPtrOutputWithContext(ctx context.Context) BackupActorPtrOutput {
	return o
}

func (o BackupActorPtrOutput) Elem() BackupActorOutput {
	return o.ApplyT(func(v *BackupActor) BackupActor {
		if v != nil {
			return *v
		}
		var ret BackupActor
		return ret
	}).(BackupActorOutput)
}

// The URL of the actor's avatar
func (o BackupActorPtrOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupActor) *string {
		if v == nil {
			return nil
		}
		return v.AvatarUrl
	}).(pulumi.StringPtrOutput)
}

// The name of the actor
func (o BackupActorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupActor) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The ID of the actor
func (o BackupActorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupActor) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type BackupBackupPolicy struct {
	// When the backup policy was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The unit for the frequency of the backup policy. Not configurable for now.
	FrequencyUnit *string `pulumi:"frequencyUnit"`
	// A number value for the frequency of the backup policy. Not configurable for now.
	FrequencyValue *float64 `pulumi:"frequencyValue"`
	// The ID of the backup policy.
	Id *string `pulumi:"id"`
	// When the backup was last run.
	LastRanAt *string `pulumi:"lastRanAt"`
	// The name of the backup policy.
	Name *string `pulumi:"name"`
	// When the backup will next run.
	NextRunAt *string `pulumi:"nextRunAt"`
	// The unit for the retention period of the backup policy.
	RetentionUnit string `pulumi:"retentionUnit"`
	// A number value for the retention period of the backup policy.
	RetentionValue float64 `pulumi:"retentionValue"`
	// Day of the week that the backup is scheduled.
	ScheduleDay *string `pulumi:"scheduleDay"`
	// Week of the month that the backup is scheduled.
	ScheduleWeek *string `pulumi:"scheduleWeek"`
	// Whether the backup policy is for a production or development database, or for a database branch.
	Target *string `pulumi:"target"`
	// When the backup policy was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// BackupBackupPolicyInput is an input type that accepts BackupBackupPolicyArgs and BackupBackupPolicyOutput values.
// You can construct a concrete instance of `BackupBackupPolicyInput` via:
//
//	BackupBackupPolicyArgs{...}
type BackupBackupPolicyInput interface {
	pulumi.Input

	ToBackupBackupPolicyOutput() BackupBackupPolicyOutput
	ToBackupBackupPolicyOutputWithContext(context.Context) BackupBackupPolicyOutput
}

type BackupBackupPolicyArgs struct {
	// When the backup policy was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The unit for the frequency of the backup policy. Not configurable for now.
	FrequencyUnit pulumi.StringPtrInput `pulumi:"frequencyUnit"`
	// A number value for the frequency of the backup policy. Not configurable for now.
	FrequencyValue pulumi.Float64PtrInput `pulumi:"frequencyValue"`
	// The ID of the backup policy.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// When the backup was last run.
	LastRanAt pulumi.StringPtrInput `pulumi:"lastRanAt"`
	// The name of the backup policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// When the backup will next run.
	NextRunAt pulumi.StringPtrInput `pulumi:"nextRunAt"`
	// The unit for the retention period of the backup policy.
	RetentionUnit pulumi.StringInput `pulumi:"retentionUnit"`
	// A number value for the retention period of the backup policy.
	RetentionValue pulumi.Float64Input `pulumi:"retentionValue"`
	// Day of the week that the backup is scheduled.
	ScheduleDay pulumi.StringPtrInput `pulumi:"scheduleDay"`
	// Week of the month that the backup is scheduled.
	ScheduleWeek pulumi.StringPtrInput `pulumi:"scheduleWeek"`
	// Whether the backup policy is for a production or development database, or for a database branch.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// When the backup policy was last updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (BackupBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupBackupPolicy)(nil)).Elem()
}

func (i BackupBackupPolicyArgs) ToBackupBackupPolicyOutput() BackupBackupPolicyOutput {
	return i.ToBackupBackupPolicyOutputWithContext(context.Background())
}

func (i BackupBackupPolicyArgs) ToBackupBackupPolicyOutputWithContext(ctx context.Context) BackupBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupBackupPolicyOutput)
}

func (i BackupBackupPolicyArgs) ToBackupBackupPolicyPtrOutput() BackupBackupPolicyPtrOutput {
	return i.ToBackupBackupPolicyPtrOutputWithContext(context.Background())
}

func (i BackupBackupPolicyArgs) ToBackupBackupPolicyPtrOutputWithContext(ctx context.Context) BackupBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupBackupPolicyOutput).ToBackupBackupPolicyPtrOutputWithContext(ctx)
}

// BackupBackupPolicyPtrInput is an input type that accepts BackupBackupPolicyArgs, BackupBackupPolicyPtr and BackupBackupPolicyPtrOutput values.
// You can construct a concrete instance of `BackupBackupPolicyPtrInput` via:
//
//	        BackupBackupPolicyArgs{...}
//
//	or:
//
//	        nil
type BackupBackupPolicyPtrInput interface {
	pulumi.Input

	ToBackupBackupPolicyPtrOutput() BackupBackupPolicyPtrOutput
	ToBackupBackupPolicyPtrOutputWithContext(context.Context) BackupBackupPolicyPtrOutput
}

type backupBackupPolicyPtrType BackupBackupPolicyArgs

func BackupBackupPolicyPtr(v *BackupBackupPolicyArgs) BackupBackupPolicyPtrInput {
	return (*backupBackupPolicyPtrType)(v)
}

func (*backupBackupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupBackupPolicy)(nil)).Elem()
}

func (i *backupBackupPolicyPtrType) ToBackupBackupPolicyPtrOutput() BackupBackupPolicyPtrOutput {
	return i.ToBackupBackupPolicyPtrOutputWithContext(context.Background())
}

func (i *backupBackupPolicyPtrType) ToBackupBackupPolicyPtrOutputWithContext(ctx context.Context) BackupBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupBackupPolicyPtrOutput)
}

type BackupBackupPolicyOutput struct{ *pulumi.OutputState }

func (BackupBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupBackupPolicy)(nil)).Elem()
}

func (o BackupBackupPolicyOutput) ToBackupBackupPolicyOutput() BackupBackupPolicyOutput {
	return o
}

func (o BackupBackupPolicyOutput) ToBackupBackupPolicyOutputWithContext(ctx context.Context) BackupBackupPolicyOutput {
	return o
}

func (o BackupBackupPolicyOutput) ToBackupBackupPolicyPtrOutput() BackupBackupPolicyPtrOutput {
	return o.ToBackupBackupPolicyPtrOutputWithContext(context.Background())
}

func (o BackupBackupPolicyOutput) ToBackupBackupPolicyPtrOutputWithContext(ctx context.Context) BackupBackupPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupBackupPolicy) *BackupBackupPolicy {
		return &v
	}).(BackupBackupPolicyPtrOutput)
}

// When the backup policy was created.
func (o BackupBackupPolicyOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The unit for the frequency of the backup policy. Not configurable for now.
func (o BackupBackupPolicyOutput) FrequencyUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.FrequencyUnit }).(pulumi.StringPtrOutput)
}

// A number value for the frequency of the backup policy. Not configurable for now.
func (o BackupBackupPolicyOutput) FrequencyValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *float64 { return v.FrequencyValue }).(pulumi.Float64PtrOutput)
}

// The ID of the backup policy.
func (o BackupBackupPolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// When the backup was last run.
func (o BackupBackupPolicyOutput) LastRanAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.LastRanAt }).(pulumi.StringPtrOutput)
}

// The name of the backup policy.
func (o BackupBackupPolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// When the backup will next run.
func (o BackupBackupPolicyOutput) NextRunAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.NextRunAt }).(pulumi.StringPtrOutput)
}

// The unit for the retention period of the backup policy.
func (o BackupBackupPolicyOutput) RetentionUnit() pulumi.StringOutput {
	return o.ApplyT(func(v BackupBackupPolicy) string { return v.RetentionUnit }).(pulumi.StringOutput)
}

// A number value for the retention period of the backup policy.
func (o BackupBackupPolicyOutput) RetentionValue() pulumi.Float64Output {
	return o.ApplyT(func(v BackupBackupPolicy) float64 { return v.RetentionValue }).(pulumi.Float64Output)
}

// Day of the week that the backup is scheduled.
func (o BackupBackupPolicyOutput) ScheduleDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.ScheduleDay }).(pulumi.StringPtrOutput)
}

// Week of the month that the backup is scheduled.
func (o BackupBackupPolicyOutput) ScheduleWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.ScheduleWeek }).(pulumi.StringPtrOutput)
}

// Whether the backup policy is for a production or development database, or for a database branch.
func (o BackupBackupPolicyOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// When the backup policy was last updated.
func (o BackupBackupPolicyOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupBackupPolicy) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type BackupBackupPolicyPtrOutput struct{ *pulumi.OutputState }

func (BackupBackupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupBackupPolicy)(nil)).Elem()
}

func (o BackupBackupPolicyPtrOutput) ToBackupBackupPolicyPtrOutput() BackupBackupPolicyPtrOutput {
	return o
}

func (o BackupBackupPolicyPtrOutput) ToBackupBackupPolicyPtrOutputWithContext(ctx context.Context) BackupBackupPolicyPtrOutput {
	return o
}

func (o BackupBackupPolicyPtrOutput) Elem() BackupBackupPolicyOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) BackupBackupPolicy {
		if v != nil {
			return *v
		}
		var ret BackupBackupPolicy
		return ret
	}).(BackupBackupPolicyOutput)
}

// When the backup policy was created.
func (o BackupBackupPolicyPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The unit for the frequency of the backup policy. Not configurable for now.
func (o BackupBackupPolicyPtrOutput) FrequencyUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.FrequencyUnit
	}).(pulumi.StringPtrOutput)
}

// A number value for the frequency of the backup policy. Not configurable for now.
func (o BackupBackupPolicyPtrOutput) FrequencyValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.FrequencyValue
	}).(pulumi.Float64PtrOutput)
}

// The ID of the backup policy.
func (o BackupBackupPolicyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// When the backup was last run.
func (o BackupBackupPolicyPtrOutput) LastRanAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.LastRanAt
	}).(pulumi.StringPtrOutput)
}

// The name of the backup policy.
func (o BackupBackupPolicyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// When the backup will next run.
func (o BackupBackupPolicyPtrOutput) NextRunAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NextRunAt
	}).(pulumi.StringPtrOutput)
}

// The unit for the retention period of the backup policy.
func (o BackupBackupPolicyPtrOutput) RetentionUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RetentionUnit
	}).(pulumi.StringPtrOutput)
}

// A number value for the retention period of the backup policy.
func (o BackupBackupPolicyPtrOutput) RetentionValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *float64 {
		if v == nil {
			return nil
		}
		return &v.RetentionValue
	}).(pulumi.Float64PtrOutput)
}

// Day of the week that the backup is scheduled.
func (o BackupBackupPolicyPtrOutput) ScheduleDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleDay
	}).(pulumi.StringPtrOutput)
}

// Week of the month that the backup is scheduled.
func (o BackupBackupPolicyPtrOutput) ScheduleWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleWeek
	}).(pulumi.StringPtrOutput)
}

// Whether the backup policy is for a production or development database, or for a database branch.
func (o BackupBackupPolicyPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// When the backup policy was last updated.
func (o BackupBackupPolicyPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

type BranchActor struct {
	// The URL of the actor's avatar
	AvatarUrl *string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName *string `pulumi:"displayName"`
	// The ID of the actor
	Id *string `pulumi:"id"`
}

// BranchActorInput is an input type that accepts BranchActorArgs and BranchActorOutput values.
// You can construct a concrete instance of `BranchActorInput` via:
//
//	BranchActorArgs{...}
type BranchActorInput interface {
	pulumi.Input

	ToBranchActorOutput() BranchActorOutput
	ToBranchActorOutputWithContext(context.Context) BranchActorOutput
}

type BranchActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringPtrInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (BranchActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchActor)(nil)).Elem()
}

func (i BranchActorArgs) ToBranchActorOutput() BranchActorOutput {
	return i.ToBranchActorOutputWithContext(context.Background())
}

func (i BranchActorArgs) ToBranchActorOutputWithContext(ctx context.Context) BranchActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchActorOutput)
}

func (i BranchActorArgs) ToBranchActorPtrOutput() BranchActorPtrOutput {
	return i.ToBranchActorPtrOutputWithContext(context.Background())
}

func (i BranchActorArgs) ToBranchActorPtrOutputWithContext(ctx context.Context) BranchActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchActorOutput).ToBranchActorPtrOutputWithContext(ctx)
}

// BranchActorPtrInput is an input type that accepts BranchActorArgs, BranchActorPtr and BranchActorPtrOutput values.
// You can construct a concrete instance of `BranchActorPtrInput` via:
//
//	        BranchActorArgs{...}
//
//	or:
//
//	        nil
type BranchActorPtrInput interface {
	pulumi.Input

	ToBranchActorPtrOutput() BranchActorPtrOutput
	ToBranchActorPtrOutputWithContext(context.Context) BranchActorPtrOutput
}

type branchActorPtrType BranchActorArgs

func BranchActorPtr(v *BranchActorArgs) BranchActorPtrInput {
	return (*branchActorPtrType)(v)
}

func (*branchActorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchActor)(nil)).Elem()
}

func (i *branchActorPtrType) ToBranchActorPtrOutput() BranchActorPtrOutput {
	return i.ToBranchActorPtrOutputWithContext(context.Background())
}

func (i *branchActorPtrType) ToBranchActorPtrOutputWithContext(ctx context.Context) BranchActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchActorPtrOutput)
}

type BranchActorOutput struct{ *pulumi.OutputState }

func (BranchActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchActor)(nil)).Elem()
}

func (o BranchActorOutput) ToBranchActorOutput() BranchActorOutput {
	return o
}

func (o BranchActorOutput) ToBranchActorOutputWithContext(ctx context.Context) BranchActorOutput {
	return o
}

func (o BranchActorOutput) ToBranchActorPtrOutput() BranchActorPtrOutput {
	return o.ToBranchActorPtrOutputWithContext(context.Background())
}

func (o BranchActorOutput) ToBranchActorPtrOutputWithContext(ctx context.Context) BranchActorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchActor) *BranchActor {
		return &v
	}).(BranchActorPtrOutput)
}

// The URL of the actor's avatar
func (o BranchActorOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchActor) *string { return v.AvatarUrl }).(pulumi.StringPtrOutput)
}

// The name of the actor
func (o BranchActorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchActor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ID of the actor
func (o BranchActorOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchActor) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type BranchActorPtrOutput struct{ *pulumi.OutputState }

func (BranchActorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchActor)(nil)).Elem()
}

func (o BranchActorPtrOutput) ToBranchActorPtrOutput() BranchActorPtrOutput {
	return o
}

func (o BranchActorPtrOutput) ToBranchActorPtrOutputWithContext(ctx context.Context) BranchActorPtrOutput {
	return o
}

func (o BranchActorPtrOutput) Elem() BranchActorOutput {
	return o.ApplyT(func(v *BranchActor) BranchActor {
		if v != nil {
			return *v
		}
		var ret BranchActor
		return ret
	}).(BranchActorOutput)
}

// The URL of the actor's avatar
func (o BranchActorPtrOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchActor) *string {
		if v == nil {
			return nil
		}
		return v.AvatarUrl
	}).(pulumi.StringPtrOutput)
}

// The name of the actor
func (o BranchActorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchActor) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The ID of the actor
func (o BranchActorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchActor) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type BranchRegion struct {
	// Name of the region.
	DisplayName *string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the region.
	Id *string `pulumi:"id"`
	// Location of the region.
	Location *string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider *string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug *string `pulumi:"slug"`
}

// BranchRegionInput is an input type that accepts BranchRegionArgs and BranchRegionOutput values.
// You can construct a concrete instance of `BranchRegionInput` via:
//
//	BranchRegionArgs{...}
type BranchRegionInput interface {
	pulumi.Input

	ToBranchRegionOutput() BranchRegionOutput
	ToBranchRegionOutputWithContext(context.Context) BranchRegionOutput
}

type BranchRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringPtrInput `pulumi:"slug"`
}

func (BranchRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchRegion)(nil)).Elem()
}

func (i BranchRegionArgs) ToBranchRegionOutput() BranchRegionOutput {
	return i.ToBranchRegionOutputWithContext(context.Background())
}

func (i BranchRegionArgs) ToBranchRegionOutputWithContext(ctx context.Context) BranchRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRegionOutput)
}

func (i BranchRegionArgs) ToBranchRegionPtrOutput() BranchRegionPtrOutput {
	return i.ToBranchRegionPtrOutputWithContext(context.Background())
}

func (i BranchRegionArgs) ToBranchRegionPtrOutputWithContext(ctx context.Context) BranchRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRegionOutput).ToBranchRegionPtrOutputWithContext(ctx)
}

// BranchRegionPtrInput is an input type that accepts BranchRegionArgs, BranchRegionPtr and BranchRegionPtrOutput values.
// You can construct a concrete instance of `BranchRegionPtrInput` via:
//
//	        BranchRegionArgs{...}
//
//	or:
//
//	        nil
type BranchRegionPtrInput interface {
	pulumi.Input

	ToBranchRegionPtrOutput() BranchRegionPtrOutput
	ToBranchRegionPtrOutputWithContext(context.Context) BranchRegionPtrOutput
}

type branchRegionPtrType BranchRegionArgs

func BranchRegionPtr(v *BranchRegionArgs) BranchRegionPtrInput {
	return (*branchRegionPtrType)(v)
}

func (*branchRegionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRegion)(nil)).Elem()
}

func (i *branchRegionPtrType) ToBranchRegionPtrOutput() BranchRegionPtrOutput {
	return i.ToBranchRegionPtrOutputWithContext(context.Background())
}

func (i *branchRegionPtrType) ToBranchRegionPtrOutputWithContext(ctx context.Context) BranchRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRegionPtrOutput)
}

type BranchRegionOutput struct{ *pulumi.OutputState }

func (BranchRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchRegion)(nil)).Elem()
}

func (o BranchRegionOutput) ToBranchRegionOutput() BranchRegionOutput {
	return o
}

func (o BranchRegionOutput) ToBranchRegionOutputWithContext(ctx context.Context) BranchRegionOutput {
	return o
}

func (o BranchRegionOutput) ToBranchRegionPtrOutput() BranchRegionPtrOutput {
	return o.ToBranchRegionPtrOutputWithContext(context.Background())
}

func (o BranchRegionOutput) ToBranchRegionPtrOutputWithContext(ctx context.Context) BranchRegionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchRegion) *BranchRegion {
		return &v
	}).(BranchRegionPtrOutput)
}

// Name of the region.
func (o BranchRegionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRegion) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Whether or not the region is currently active.
func (o BranchRegionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchRegion) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID of the region.
func (o BranchRegionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRegion) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Location of the region.
func (o BranchRegionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRegion) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Provider for the region (ex. AWS).
func (o BranchRegionOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRegion) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// Public IP addresses for the region.
func (o BranchRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o BranchRegionOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRegion) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

type BranchRegionPtrOutput struct{ *pulumi.OutputState }

func (BranchRegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRegion)(nil)).Elem()
}

func (o BranchRegionPtrOutput) ToBranchRegionPtrOutput() BranchRegionPtrOutput {
	return o
}

func (o BranchRegionPtrOutput) ToBranchRegionPtrOutputWithContext(ctx context.Context) BranchRegionPtrOutput {
	return o
}

func (o BranchRegionPtrOutput) Elem() BranchRegionOutput {
	return o.ApplyT(func(v *BranchRegion) BranchRegion {
		if v != nil {
			return *v
		}
		var ret BranchRegion
		return ret
	}).(BranchRegionOutput)
}

// Name of the region.
func (o BranchRegionPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRegion) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Whether or not the region is currently active.
func (o BranchRegionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchRegion) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The ID of the region.
func (o BranchRegionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRegion) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Location of the region.
func (o BranchRegionPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRegion) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Provider for the region (ex. AWS).
func (o BranchRegionPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRegion) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// Public IP addresses for the region.
func (o BranchRegionPtrOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchRegion) []string {
		if v == nil {
			return nil
		}
		return v.PublicIpAddresses
	}).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o BranchRegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRegion) *string {
		if v == nil {
			return nil
		}
		return v.Slug
	}).(pulumi.StringPtrOutput)
}

type BranchRestoredFromBranch struct {
	// When the resource was created.
	CreatedAt *string `pulumi:"createdAt"`
	// When the resource was deleted, if deleted.
	DeletedAt *string `pulumi:"deletedAt"`
	// The ID for the resource.
	Id *string `pulumi:"id"`
	// The name for the resource.
	Name *string `pulumi:"name"`
	// When the resource was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// BranchRestoredFromBranchInput is an input type that accepts BranchRestoredFromBranchArgs and BranchRestoredFromBranchOutput values.
// You can construct a concrete instance of `BranchRestoredFromBranchInput` via:
//
//	BranchRestoredFromBranchArgs{...}
type BranchRestoredFromBranchInput interface {
	pulumi.Input

	ToBranchRestoredFromBranchOutput() BranchRestoredFromBranchOutput
	ToBranchRestoredFromBranchOutputWithContext(context.Context) BranchRestoredFromBranchOutput
}

type BranchRestoredFromBranchArgs struct {
	// When the resource was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// When the resource was deleted, if deleted.
	DeletedAt pulumi.StringPtrInput `pulumi:"deletedAt"`
	// The ID for the resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name for the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// When the resource was last updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (BranchRestoredFromBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchRestoredFromBranch)(nil)).Elem()
}

func (i BranchRestoredFromBranchArgs) ToBranchRestoredFromBranchOutput() BranchRestoredFromBranchOutput {
	return i.ToBranchRestoredFromBranchOutputWithContext(context.Background())
}

func (i BranchRestoredFromBranchArgs) ToBranchRestoredFromBranchOutputWithContext(ctx context.Context) BranchRestoredFromBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestoredFromBranchOutput)
}

func (i BranchRestoredFromBranchArgs) ToBranchRestoredFromBranchPtrOutput() BranchRestoredFromBranchPtrOutput {
	return i.ToBranchRestoredFromBranchPtrOutputWithContext(context.Background())
}

func (i BranchRestoredFromBranchArgs) ToBranchRestoredFromBranchPtrOutputWithContext(ctx context.Context) BranchRestoredFromBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestoredFromBranchOutput).ToBranchRestoredFromBranchPtrOutputWithContext(ctx)
}

// BranchRestoredFromBranchPtrInput is an input type that accepts BranchRestoredFromBranchArgs, BranchRestoredFromBranchPtr and BranchRestoredFromBranchPtrOutput values.
// You can construct a concrete instance of `BranchRestoredFromBranchPtrInput` via:
//
//	        BranchRestoredFromBranchArgs{...}
//
//	or:
//
//	        nil
type BranchRestoredFromBranchPtrInput interface {
	pulumi.Input

	ToBranchRestoredFromBranchPtrOutput() BranchRestoredFromBranchPtrOutput
	ToBranchRestoredFromBranchPtrOutputWithContext(context.Context) BranchRestoredFromBranchPtrOutput
}

type branchRestoredFromBranchPtrType BranchRestoredFromBranchArgs

func BranchRestoredFromBranchPtr(v *BranchRestoredFromBranchArgs) BranchRestoredFromBranchPtrInput {
	return (*branchRestoredFromBranchPtrType)(v)
}

func (*branchRestoredFromBranchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRestoredFromBranch)(nil)).Elem()
}

func (i *branchRestoredFromBranchPtrType) ToBranchRestoredFromBranchPtrOutput() BranchRestoredFromBranchPtrOutput {
	return i.ToBranchRestoredFromBranchPtrOutputWithContext(context.Background())
}

func (i *branchRestoredFromBranchPtrType) ToBranchRestoredFromBranchPtrOutputWithContext(ctx context.Context) BranchRestoredFromBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestoredFromBranchPtrOutput)
}

type BranchRestoredFromBranchOutput struct{ *pulumi.OutputState }

func (BranchRestoredFromBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchRestoredFromBranch)(nil)).Elem()
}

func (o BranchRestoredFromBranchOutput) ToBranchRestoredFromBranchOutput() BranchRestoredFromBranchOutput {
	return o
}

func (o BranchRestoredFromBranchOutput) ToBranchRestoredFromBranchOutputWithContext(ctx context.Context) BranchRestoredFromBranchOutput {
	return o
}

func (o BranchRestoredFromBranchOutput) ToBranchRestoredFromBranchPtrOutput() BranchRestoredFromBranchPtrOutput {
	return o.ToBranchRestoredFromBranchPtrOutputWithContext(context.Background())
}

func (o BranchRestoredFromBranchOutput) ToBranchRestoredFromBranchPtrOutputWithContext(ctx context.Context) BranchRestoredFromBranchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchRestoredFromBranch) *BranchRestoredFromBranch {
		return &v
	}).(BranchRestoredFromBranchPtrOutput)
}

// When the resource was created.
func (o BranchRestoredFromBranchOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRestoredFromBranch) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// When the resource was deleted, if deleted.
func (o BranchRestoredFromBranchOutput) DeletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRestoredFromBranch) *string { return v.DeletedAt }).(pulumi.StringPtrOutput)
}

// The ID for the resource.
func (o BranchRestoredFromBranchOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRestoredFromBranch) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name for the resource.
func (o BranchRestoredFromBranchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRestoredFromBranch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// When the resource was last updated.
func (o BranchRestoredFromBranchOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchRestoredFromBranch) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type BranchRestoredFromBranchPtrOutput struct{ *pulumi.OutputState }

func (BranchRestoredFromBranchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRestoredFromBranch)(nil)).Elem()
}

func (o BranchRestoredFromBranchPtrOutput) ToBranchRestoredFromBranchPtrOutput() BranchRestoredFromBranchPtrOutput {
	return o
}

func (o BranchRestoredFromBranchPtrOutput) ToBranchRestoredFromBranchPtrOutputWithContext(ctx context.Context) BranchRestoredFromBranchPtrOutput {
	return o
}

func (o BranchRestoredFromBranchPtrOutput) Elem() BranchRestoredFromBranchOutput {
	return o.ApplyT(func(v *BranchRestoredFromBranch) BranchRestoredFromBranch {
		if v != nil {
			return *v
		}
		var ret BranchRestoredFromBranch
		return ret
	}).(BranchRestoredFromBranchOutput)
}

// When the resource was created.
func (o BranchRestoredFromBranchPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestoredFromBranch) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// When the resource was deleted, if deleted.
func (o BranchRestoredFromBranchPtrOutput) DeletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestoredFromBranch) *string {
		if v == nil {
			return nil
		}
		return v.DeletedAt
	}).(pulumi.StringPtrOutput)
}

// The ID for the resource.
func (o BranchRestoredFromBranchPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestoredFromBranch) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name for the resource.
func (o BranchRestoredFromBranchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestoredFromBranch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// When the resource was last updated.
func (o BranchRestoredFromBranchPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestoredFromBranch) *string {
		if v == nil {
			return nil
		}
		return v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

type DatabaseDataImport struct {
	// Connection information for the source of the data for the import.
	DataSource *DatabaseDataImportDataSource `pulumi:"dataSource"`
	// When the import finished.
	FinishedAt *string `pulumi:"finishedAt"`
	// Errors encountered while preparing the import.
	ImportCheckErrors *string `pulumi:"importCheckErrors"`
	// When the import started.
	StartedAt *string `pulumi:"startedAt"`
	// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
	State *string `pulumi:"state"`
}

// DatabaseDataImportInput is an input type that accepts DatabaseDataImportArgs and DatabaseDataImportOutput values.
// You can construct a concrete instance of `DatabaseDataImportInput` via:
//
//	DatabaseDataImportArgs{...}
type DatabaseDataImportInput interface {
	pulumi.Input

	ToDatabaseDataImportOutput() DatabaseDataImportOutput
	ToDatabaseDataImportOutputWithContext(context.Context) DatabaseDataImportOutput
}

type DatabaseDataImportArgs struct {
	// Connection information for the source of the data for the import.
	DataSource DatabaseDataImportDataSourcePtrInput `pulumi:"dataSource"`
	// When the import finished.
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Errors encountered while preparing the import.
	ImportCheckErrors pulumi.StringPtrInput `pulumi:"importCheckErrors"`
	// When the import started.
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
	// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (DatabaseDataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataImport)(nil)).Elem()
}

func (i DatabaseDataImportArgs) ToDatabaseDataImportOutput() DatabaseDataImportOutput {
	return i.ToDatabaseDataImportOutputWithContext(context.Background())
}

func (i DatabaseDataImportArgs) ToDatabaseDataImportOutputWithContext(ctx context.Context) DatabaseDataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataImportOutput)
}

func (i DatabaseDataImportArgs) ToDatabaseDataImportPtrOutput() DatabaseDataImportPtrOutput {
	return i.ToDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (i DatabaseDataImportArgs) ToDatabaseDataImportPtrOutputWithContext(ctx context.Context) DatabaseDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataImportOutput).ToDatabaseDataImportPtrOutputWithContext(ctx)
}

// DatabaseDataImportPtrInput is an input type that accepts DatabaseDataImportArgs, DatabaseDataImportPtr and DatabaseDataImportPtrOutput values.
// You can construct a concrete instance of `DatabaseDataImportPtrInput` via:
//
//	        DatabaseDataImportArgs{...}
//
//	or:
//
//	        nil
type DatabaseDataImportPtrInput interface {
	pulumi.Input

	ToDatabaseDataImportPtrOutput() DatabaseDataImportPtrOutput
	ToDatabaseDataImportPtrOutputWithContext(context.Context) DatabaseDataImportPtrOutput
}

type databaseDataImportPtrType DatabaseDataImportArgs

func DatabaseDataImportPtr(v *DatabaseDataImportArgs) DatabaseDataImportPtrInput {
	return (*databaseDataImportPtrType)(v)
}

func (*databaseDataImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataImport)(nil)).Elem()
}

func (i *databaseDataImportPtrType) ToDatabaseDataImportPtrOutput() DatabaseDataImportPtrOutput {
	return i.ToDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (i *databaseDataImportPtrType) ToDatabaseDataImportPtrOutputWithContext(ctx context.Context) DatabaseDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataImportPtrOutput)
}

type DatabaseDataImportOutput struct{ *pulumi.OutputState }

func (DatabaseDataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataImport)(nil)).Elem()
}

func (o DatabaseDataImportOutput) ToDatabaseDataImportOutput() DatabaseDataImportOutput {
	return o
}

func (o DatabaseDataImportOutput) ToDatabaseDataImportOutputWithContext(ctx context.Context) DatabaseDataImportOutput {
	return o
}

func (o DatabaseDataImportOutput) ToDatabaseDataImportPtrOutput() DatabaseDataImportPtrOutput {
	return o.ToDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (o DatabaseDataImportOutput) ToDatabaseDataImportPtrOutputWithContext(ctx context.Context) DatabaseDataImportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseDataImport) *DatabaseDataImport {
		return &v
	}).(DatabaseDataImportPtrOutput)
}

// Connection information for the source of the data for the import.
func (o DatabaseDataImportOutput) DataSource() DatabaseDataImportDataSourcePtrOutput {
	return o.ApplyT(func(v DatabaseDataImport) *DatabaseDataImportDataSource { return v.DataSource }).(DatabaseDataImportDataSourcePtrOutput)
}

// When the import finished.
func (o DatabaseDataImportOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDataImport) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Errors encountered while preparing the import.
func (o DatabaseDataImportOutput) ImportCheckErrors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDataImport) *string { return v.ImportCheckErrors }).(pulumi.StringPtrOutput)
}

// When the import started.
func (o DatabaseDataImportOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDataImport) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
func (o DatabaseDataImportOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDataImport) *string { return v.State }).(pulumi.StringPtrOutput)
}

type DatabaseDataImportPtrOutput struct{ *pulumi.OutputState }

func (DatabaseDataImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataImport)(nil)).Elem()
}

func (o DatabaseDataImportPtrOutput) ToDatabaseDataImportPtrOutput() DatabaseDataImportPtrOutput {
	return o
}

func (o DatabaseDataImportPtrOutput) ToDatabaseDataImportPtrOutputWithContext(ctx context.Context) DatabaseDataImportPtrOutput {
	return o
}

func (o DatabaseDataImportPtrOutput) Elem() DatabaseDataImportOutput {
	return o.ApplyT(func(v *DatabaseDataImport) DatabaseDataImport {
		if v != nil {
			return *v
		}
		var ret DatabaseDataImport
		return ret
	}).(DatabaseDataImportOutput)
}

// Connection information for the source of the data for the import.
func (o DatabaseDataImportPtrOutput) DataSource() DatabaseDataImportDataSourcePtrOutput {
	return o.ApplyT(func(v *DatabaseDataImport) *DatabaseDataImportDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(DatabaseDataImportDataSourcePtrOutput)
}

// When the import finished.
func (o DatabaseDataImportPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Errors encountered while preparing the import.
func (o DatabaseDataImportPtrOutput) ImportCheckErrors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return v.ImportCheckErrors
	}).(pulumi.StringPtrOutput)
}

// When the import started.
func (o DatabaseDataImportPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
func (o DatabaseDataImportPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type DatabaseDataImportDataSource struct {
	// The name of the database imported from.
	Database string `pulumi:"database"`
	// The hostname where the database lives.
	Hostname string `pulumi:"hostname"`
	// The port on which the database listens on the host.
	Port string `pulumi:"port"`
}

// DatabaseDataImportDataSourceInput is an input type that accepts DatabaseDataImportDataSourceArgs and DatabaseDataImportDataSourceOutput values.
// You can construct a concrete instance of `DatabaseDataImportDataSourceInput` via:
//
//	DatabaseDataImportDataSourceArgs{...}
type DatabaseDataImportDataSourceInput interface {
	pulumi.Input

	ToDatabaseDataImportDataSourceOutput() DatabaseDataImportDataSourceOutput
	ToDatabaseDataImportDataSourceOutputWithContext(context.Context) DatabaseDataImportDataSourceOutput
}

type DatabaseDataImportDataSourceArgs struct {
	// The name of the database imported from.
	Database pulumi.StringInput `pulumi:"database"`
	// The hostname where the database lives.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port on which the database listens on the host.
	Port pulumi.StringInput `pulumi:"port"`
}

func (DatabaseDataImportDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataImportDataSource)(nil)).Elem()
}

func (i DatabaseDataImportDataSourceArgs) ToDatabaseDataImportDataSourceOutput() DatabaseDataImportDataSourceOutput {
	return i.ToDatabaseDataImportDataSourceOutputWithContext(context.Background())
}

func (i DatabaseDataImportDataSourceArgs) ToDatabaseDataImportDataSourceOutputWithContext(ctx context.Context) DatabaseDataImportDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataImportDataSourceOutput)
}

func (i DatabaseDataImportDataSourceArgs) ToDatabaseDataImportDataSourcePtrOutput() DatabaseDataImportDataSourcePtrOutput {
	return i.ToDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (i DatabaseDataImportDataSourceArgs) ToDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) DatabaseDataImportDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataImportDataSourceOutput).ToDatabaseDataImportDataSourcePtrOutputWithContext(ctx)
}

// DatabaseDataImportDataSourcePtrInput is an input type that accepts DatabaseDataImportDataSourceArgs, DatabaseDataImportDataSourcePtr and DatabaseDataImportDataSourcePtrOutput values.
// You can construct a concrete instance of `DatabaseDataImportDataSourcePtrInput` via:
//
//	        DatabaseDataImportDataSourceArgs{...}
//
//	or:
//
//	        nil
type DatabaseDataImportDataSourcePtrInput interface {
	pulumi.Input

	ToDatabaseDataImportDataSourcePtrOutput() DatabaseDataImportDataSourcePtrOutput
	ToDatabaseDataImportDataSourcePtrOutputWithContext(context.Context) DatabaseDataImportDataSourcePtrOutput
}

type databaseDataImportDataSourcePtrType DatabaseDataImportDataSourceArgs

func DatabaseDataImportDataSourcePtr(v *DatabaseDataImportDataSourceArgs) DatabaseDataImportDataSourcePtrInput {
	return (*databaseDataImportDataSourcePtrType)(v)
}

func (*databaseDataImportDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataImportDataSource)(nil)).Elem()
}

func (i *databaseDataImportDataSourcePtrType) ToDatabaseDataImportDataSourcePtrOutput() DatabaseDataImportDataSourcePtrOutput {
	return i.ToDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (i *databaseDataImportDataSourcePtrType) ToDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) DatabaseDataImportDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataImportDataSourcePtrOutput)
}

type DatabaseDataImportDataSourceOutput struct{ *pulumi.OutputState }

func (DatabaseDataImportDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataImportDataSource)(nil)).Elem()
}

func (o DatabaseDataImportDataSourceOutput) ToDatabaseDataImportDataSourceOutput() DatabaseDataImportDataSourceOutput {
	return o
}

func (o DatabaseDataImportDataSourceOutput) ToDatabaseDataImportDataSourceOutputWithContext(ctx context.Context) DatabaseDataImportDataSourceOutput {
	return o
}

func (o DatabaseDataImportDataSourceOutput) ToDatabaseDataImportDataSourcePtrOutput() DatabaseDataImportDataSourcePtrOutput {
	return o.ToDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (o DatabaseDataImportDataSourceOutput) ToDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) DatabaseDataImportDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseDataImportDataSource) *DatabaseDataImportDataSource {
		return &v
	}).(DatabaseDataImportDataSourcePtrOutput)
}

// The name of the database imported from.
func (o DatabaseDataImportDataSourceOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseDataImportDataSource) string { return v.Database }).(pulumi.StringOutput)
}

// The hostname where the database lives.
func (o DatabaseDataImportDataSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseDataImportDataSource) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port on which the database listens on the host.
func (o DatabaseDataImportDataSourceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseDataImportDataSource) string { return v.Port }).(pulumi.StringOutput)
}

type DatabaseDataImportDataSourcePtrOutput struct{ *pulumi.OutputState }

func (DatabaseDataImportDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataImportDataSource)(nil)).Elem()
}

func (o DatabaseDataImportDataSourcePtrOutput) ToDatabaseDataImportDataSourcePtrOutput() DatabaseDataImportDataSourcePtrOutput {
	return o
}

func (o DatabaseDataImportDataSourcePtrOutput) ToDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) DatabaseDataImportDataSourcePtrOutput {
	return o
}

func (o DatabaseDataImportDataSourcePtrOutput) Elem() DatabaseDataImportDataSourceOutput {
	return o.ApplyT(func(v *DatabaseDataImportDataSource) DatabaseDataImportDataSource {
		if v != nil {
			return *v
		}
		var ret DatabaseDataImportDataSource
		return ret
	}).(DatabaseDataImportDataSourceOutput)
}

// The name of the database imported from.
func (o DatabaseDataImportDataSourcePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The hostname where the database lives.
func (o DatabaseDataImportDataSourcePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The port on which the database listens on the host.
func (o DatabaseDataImportDataSourcePtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.StringPtrOutput)
}

type PasswordActor struct {
	// The URL of the actor's avatar
	AvatarUrl *string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName *string `pulumi:"displayName"`
	// The ID of the actor
	Id *string `pulumi:"id"`
}

// PasswordActorInput is an input type that accepts PasswordActorArgs and PasswordActorOutput values.
// You can construct a concrete instance of `PasswordActorInput` via:
//
//	PasswordActorArgs{...}
type PasswordActorInput interface {
	pulumi.Input

	ToPasswordActorOutput() PasswordActorOutput
	ToPasswordActorOutputWithContext(context.Context) PasswordActorOutput
}

type PasswordActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringPtrInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PasswordActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordActor)(nil)).Elem()
}

func (i PasswordActorArgs) ToPasswordActorOutput() PasswordActorOutput {
	return i.ToPasswordActorOutputWithContext(context.Background())
}

func (i PasswordActorArgs) ToPasswordActorOutputWithContext(ctx context.Context) PasswordActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordActorOutput)
}

func (i PasswordActorArgs) ToPasswordActorPtrOutput() PasswordActorPtrOutput {
	return i.ToPasswordActorPtrOutputWithContext(context.Background())
}

func (i PasswordActorArgs) ToPasswordActorPtrOutputWithContext(ctx context.Context) PasswordActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordActorOutput).ToPasswordActorPtrOutputWithContext(ctx)
}

// PasswordActorPtrInput is an input type that accepts PasswordActorArgs, PasswordActorPtr and PasswordActorPtrOutput values.
// You can construct a concrete instance of `PasswordActorPtrInput` via:
//
//	        PasswordActorArgs{...}
//
//	or:
//
//	        nil
type PasswordActorPtrInput interface {
	pulumi.Input

	ToPasswordActorPtrOutput() PasswordActorPtrOutput
	ToPasswordActorPtrOutputWithContext(context.Context) PasswordActorPtrOutput
}

type passwordActorPtrType PasswordActorArgs

func PasswordActorPtr(v *PasswordActorArgs) PasswordActorPtrInput {
	return (*passwordActorPtrType)(v)
}

func (*passwordActorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordActor)(nil)).Elem()
}

func (i *passwordActorPtrType) ToPasswordActorPtrOutput() PasswordActorPtrOutput {
	return i.ToPasswordActorPtrOutputWithContext(context.Background())
}

func (i *passwordActorPtrType) ToPasswordActorPtrOutputWithContext(ctx context.Context) PasswordActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordActorPtrOutput)
}

type PasswordActorOutput struct{ *pulumi.OutputState }

func (PasswordActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordActor)(nil)).Elem()
}

func (o PasswordActorOutput) ToPasswordActorOutput() PasswordActorOutput {
	return o
}

func (o PasswordActorOutput) ToPasswordActorOutputWithContext(ctx context.Context) PasswordActorOutput {
	return o
}

func (o PasswordActorOutput) ToPasswordActorPtrOutput() PasswordActorPtrOutput {
	return o.ToPasswordActorPtrOutputWithContext(context.Background())
}

func (o PasswordActorOutput) ToPasswordActorPtrOutputWithContext(ctx context.Context) PasswordActorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordActor) *PasswordActor {
		return &v
	}).(PasswordActorPtrOutput)
}

// The URL of the actor's avatar
func (o PasswordActorOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordActor) *string { return v.AvatarUrl }).(pulumi.StringPtrOutput)
}

// The name of the actor
func (o PasswordActorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordActor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ID of the actor
func (o PasswordActorOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordActor) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PasswordActorPtrOutput struct{ *pulumi.OutputState }

func (PasswordActorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordActor)(nil)).Elem()
}

func (o PasswordActorPtrOutput) ToPasswordActorPtrOutput() PasswordActorPtrOutput {
	return o
}

func (o PasswordActorPtrOutput) ToPasswordActorPtrOutputWithContext(ctx context.Context) PasswordActorPtrOutput {
	return o
}

func (o PasswordActorPtrOutput) Elem() PasswordActorOutput {
	return o.ApplyT(func(v *PasswordActor) PasswordActor {
		if v != nil {
			return *v
		}
		var ret PasswordActor
		return ret
	}).(PasswordActorOutput)
}

// The URL of the actor's avatar
func (o PasswordActorPtrOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordActor) *string {
		if v == nil {
			return nil
		}
		return v.AvatarUrl
	}).(pulumi.StringPtrOutput)
}

// The name of the actor
func (o PasswordActorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordActor) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The ID of the actor
func (o PasswordActorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordActor) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type PasswordDatabaseBranch struct {
	AccessHostUrl    *string `pulumi:"accessHostUrl"`
	Id               *string `pulumi:"id"`
	MysqlEdgeAddress *string `pulumi:"mysqlEdgeAddress"`
	Name             *string `pulumi:"name"`
	Production       *bool   `pulumi:"production"`
}

// PasswordDatabaseBranchInput is an input type that accepts PasswordDatabaseBranchArgs and PasswordDatabaseBranchOutput values.
// You can construct a concrete instance of `PasswordDatabaseBranchInput` via:
//
//	PasswordDatabaseBranchArgs{...}
type PasswordDatabaseBranchInput interface {
	pulumi.Input

	ToPasswordDatabaseBranchOutput() PasswordDatabaseBranchOutput
	ToPasswordDatabaseBranchOutputWithContext(context.Context) PasswordDatabaseBranchOutput
}

type PasswordDatabaseBranchArgs struct {
	AccessHostUrl    pulumi.StringPtrInput `pulumi:"accessHostUrl"`
	Id               pulumi.StringPtrInput `pulumi:"id"`
	MysqlEdgeAddress pulumi.StringPtrInput `pulumi:"mysqlEdgeAddress"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	Production       pulumi.BoolPtrInput   `pulumi:"production"`
}

func (PasswordDatabaseBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordDatabaseBranch)(nil)).Elem()
}

func (i PasswordDatabaseBranchArgs) ToPasswordDatabaseBranchOutput() PasswordDatabaseBranchOutput {
	return i.ToPasswordDatabaseBranchOutputWithContext(context.Background())
}

func (i PasswordDatabaseBranchArgs) ToPasswordDatabaseBranchOutputWithContext(ctx context.Context) PasswordDatabaseBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordDatabaseBranchOutput)
}

func (i PasswordDatabaseBranchArgs) ToPasswordDatabaseBranchPtrOutput() PasswordDatabaseBranchPtrOutput {
	return i.ToPasswordDatabaseBranchPtrOutputWithContext(context.Background())
}

func (i PasswordDatabaseBranchArgs) ToPasswordDatabaseBranchPtrOutputWithContext(ctx context.Context) PasswordDatabaseBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordDatabaseBranchOutput).ToPasswordDatabaseBranchPtrOutputWithContext(ctx)
}

// PasswordDatabaseBranchPtrInput is an input type that accepts PasswordDatabaseBranchArgs, PasswordDatabaseBranchPtr and PasswordDatabaseBranchPtrOutput values.
// You can construct a concrete instance of `PasswordDatabaseBranchPtrInput` via:
//
//	        PasswordDatabaseBranchArgs{...}
//
//	or:
//
//	        nil
type PasswordDatabaseBranchPtrInput interface {
	pulumi.Input

	ToPasswordDatabaseBranchPtrOutput() PasswordDatabaseBranchPtrOutput
	ToPasswordDatabaseBranchPtrOutputWithContext(context.Context) PasswordDatabaseBranchPtrOutput
}

type passwordDatabaseBranchPtrType PasswordDatabaseBranchArgs

func PasswordDatabaseBranchPtr(v *PasswordDatabaseBranchArgs) PasswordDatabaseBranchPtrInput {
	return (*passwordDatabaseBranchPtrType)(v)
}

func (*passwordDatabaseBranchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordDatabaseBranch)(nil)).Elem()
}

func (i *passwordDatabaseBranchPtrType) ToPasswordDatabaseBranchPtrOutput() PasswordDatabaseBranchPtrOutput {
	return i.ToPasswordDatabaseBranchPtrOutputWithContext(context.Background())
}

func (i *passwordDatabaseBranchPtrType) ToPasswordDatabaseBranchPtrOutputWithContext(ctx context.Context) PasswordDatabaseBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordDatabaseBranchPtrOutput)
}

type PasswordDatabaseBranchOutput struct{ *pulumi.OutputState }

func (PasswordDatabaseBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordDatabaseBranch)(nil)).Elem()
}

func (o PasswordDatabaseBranchOutput) ToPasswordDatabaseBranchOutput() PasswordDatabaseBranchOutput {
	return o
}

func (o PasswordDatabaseBranchOutput) ToPasswordDatabaseBranchOutputWithContext(ctx context.Context) PasswordDatabaseBranchOutput {
	return o
}

func (o PasswordDatabaseBranchOutput) ToPasswordDatabaseBranchPtrOutput() PasswordDatabaseBranchPtrOutput {
	return o.ToPasswordDatabaseBranchPtrOutputWithContext(context.Background())
}

func (o PasswordDatabaseBranchOutput) ToPasswordDatabaseBranchPtrOutputWithContext(ctx context.Context) PasswordDatabaseBranchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordDatabaseBranch) *PasswordDatabaseBranch {
		return &v
	}).(PasswordDatabaseBranchPtrOutput)
}

func (o PasswordDatabaseBranchOutput) AccessHostUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordDatabaseBranch) *string { return v.AccessHostUrl }).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordDatabaseBranch) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchOutput) MysqlEdgeAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordDatabaseBranch) *string { return v.MysqlEdgeAddress }).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordDatabaseBranch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchOutput) Production() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordDatabaseBranch) *bool { return v.Production }).(pulumi.BoolPtrOutput)
}

type PasswordDatabaseBranchPtrOutput struct{ *pulumi.OutputState }

func (PasswordDatabaseBranchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordDatabaseBranch)(nil)).Elem()
}

func (o PasswordDatabaseBranchPtrOutput) ToPasswordDatabaseBranchPtrOutput() PasswordDatabaseBranchPtrOutput {
	return o
}

func (o PasswordDatabaseBranchPtrOutput) ToPasswordDatabaseBranchPtrOutputWithContext(ctx context.Context) PasswordDatabaseBranchPtrOutput {
	return o
}

func (o PasswordDatabaseBranchPtrOutput) Elem() PasswordDatabaseBranchOutput {
	return o.ApplyT(func(v *PasswordDatabaseBranch) PasswordDatabaseBranch {
		if v != nil {
			return *v
		}
		var ret PasswordDatabaseBranch
		return ret
	}).(PasswordDatabaseBranchOutput)
}

func (o PasswordDatabaseBranchPtrOutput) AccessHostUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordDatabaseBranch) *string {
		if v == nil {
			return nil
		}
		return v.AccessHostUrl
	}).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordDatabaseBranch) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchPtrOutput) MysqlEdgeAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordDatabaseBranch) *string {
		if v == nil {
			return nil
		}
		return v.MysqlEdgeAddress
	}).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordDatabaseBranch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PasswordDatabaseBranchPtrOutput) Production() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordDatabaseBranch) *bool {
		if v == nil {
			return nil
		}
		return v.Production
	}).(pulumi.BoolPtrOutput)
}

type PasswordRegion struct {
	// Name of the region.
	DisplayName *string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the region.
	Id *string `pulumi:"id"`
	// Location of the region.
	Location *string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider *string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug *string `pulumi:"slug"`
}

// PasswordRegionInput is an input type that accepts PasswordRegionArgs and PasswordRegionOutput values.
// You can construct a concrete instance of `PasswordRegionInput` via:
//
//	PasswordRegionArgs{...}
type PasswordRegionInput interface {
	pulumi.Input

	ToPasswordRegionOutput() PasswordRegionOutput
	ToPasswordRegionOutputWithContext(context.Context) PasswordRegionOutput
}

type PasswordRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringPtrInput `pulumi:"slug"`
}

func (PasswordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordRegion)(nil)).Elem()
}

func (i PasswordRegionArgs) ToPasswordRegionOutput() PasswordRegionOutput {
	return i.ToPasswordRegionOutputWithContext(context.Background())
}

func (i PasswordRegionArgs) ToPasswordRegionOutputWithContext(ctx context.Context) PasswordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordRegionOutput)
}

func (i PasswordRegionArgs) ToPasswordRegionPtrOutput() PasswordRegionPtrOutput {
	return i.ToPasswordRegionPtrOutputWithContext(context.Background())
}

func (i PasswordRegionArgs) ToPasswordRegionPtrOutputWithContext(ctx context.Context) PasswordRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordRegionOutput).ToPasswordRegionPtrOutputWithContext(ctx)
}

// PasswordRegionPtrInput is an input type that accepts PasswordRegionArgs, PasswordRegionPtr and PasswordRegionPtrOutput values.
// You can construct a concrete instance of `PasswordRegionPtrInput` via:
//
//	        PasswordRegionArgs{...}
//
//	or:
//
//	        nil
type PasswordRegionPtrInput interface {
	pulumi.Input

	ToPasswordRegionPtrOutput() PasswordRegionPtrOutput
	ToPasswordRegionPtrOutputWithContext(context.Context) PasswordRegionPtrOutput
}

type passwordRegionPtrType PasswordRegionArgs

func PasswordRegionPtr(v *PasswordRegionArgs) PasswordRegionPtrInput {
	return (*passwordRegionPtrType)(v)
}

func (*passwordRegionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordRegion)(nil)).Elem()
}

func (i *passwordRegionPtrType) ToPasswordRegionPtrOutput() PasswordRegionPtrOutput {
	return i.ToPasswordRegionPtrOutputWithContext(context.Background())
}

func (i *passwordRegionPtrType) ToPasswordRegionPtrOutputWithContext(ctx context.Context) PasswordRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordRegionPtrOutput)
}

type PasswordRegionOutput struct{ *pulumi.OutputState }

func (PasswordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordRegion)(nil)).Elem()
}

func (o PasswordRegionOutput) ToPasswordRegionOutput() PasswordRegionOutput {
	return o
}

func (o PasswordRegionOutput) ToPasswordRegionOutputWithContext(ctx context.Context) PasswordRegionOutput {
	return o
}

func (o PasswordRegionOutput) ToPasswordRegionPtrOutput() PasswordRegionPtrOutput {
	return o.ToPasswordRegionPtrOutputWithContext(context.Background())
}

func (o PasswordRegionOutput) ToPasswordRegionPtrOutputWithContext(ctx context.Context) PasswordRegionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordRegion) *PasswordRegion {
		return &v
	}).(PasswordRegionPtrOutput)
}

// Name of the region.
func (o PasswordRegionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordRegion) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Whether or not the region is currently active.
func (o PasswordRegionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordRegion) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID of the region.
func (o PasswordRegionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordRegion) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Location of the region.
func (o PasswordRegionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordRegion) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Provider for the region (ex. AWS).
func (o PasswordRegionOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordRegion) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// Public IP addresses for the region.
func (o PasswordRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PasswordRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o PasswordRegionOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordRegion) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

type PasswordRegionPtrOutput struct{ *pulumi.OutputState }

func (PasswordRegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordRegion)(nil)).Elem()
}

func (o PasswordRegionPtrOutput) ToPasswordRegionPtrOutput() PasswordRegionPtrOutput {
	return o
}

func (o PasswordRegionPtrOutput) ToPasswordRegionPtrOutputWithContext(ctx context.Context) PasswordRegionPtrOutput {
	return o
}

func (o PasswordRegionPtrOutput) Elem() PasswordRegionOutput {
	return o.ApplyT(func(v *PasswordRegion) PasswordRegion {
		if v != nil {
			return *v
		}
		var ret PasswordRegion
		return ret
	}).(PasswordRegionOutput)
}

// Name of the region.
func (o PasswordRegionPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordRegion) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Whether or not the region is currently active.
func (o PasswordRegionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordRegion) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The ID of the region.
func (o PasswordRegionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordRegion) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Location of the region.
func (o PasswordRegionPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordRegion) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Provider for the region (ex. AWS).
func (o PasswordRegionPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordRegion) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// Public IP addresses for the region.
func (o PasswordRegionPtrOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PasswordRegion) []string {
		if v == nil {
			return nil
		}
		return v.PublicIpAddresses
	}).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o PasswordRegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordRegion) *string {
		if v == nil {
			return nil
		}
		return v.Slug
	}).(pulumi.StringPtrOutput)
}

type GetBackupActor struct {
	// The URL of the actor's avatar
	AvatarUrl string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName string `pulumi:"displayName"`
	// The ID of the actor
	Id string `pulumi:"id"`
}

// GetBackupActorInput is an input type that accepts GetBackupActorArgs and GetBackupActorOutput values.
// You can construct a concrete instance of `GetBackupActorInput` via:
//
//	GetBackupActorArgs{...}
type GetBackupActorInput interface {
	pulumi.Input

	ToGetBackupActorOutput() GetBackupActorOutput
	ToGetBackupActorOutputWithContext(context.Context) GetBackupActorOutput
}

type GetBackupActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBackupActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupActor)(nil)).Elem()
}

func (i GetBackupActorArgs) ToGetBackupActorOutput() GetBackupActorOutput {
	return i.ToGetBackupActorOutputWithContext(context.Background())
}

func (i GetBackupActorArgs) ToGetBackupActorOutputWithContext(ctx context.Context) GetBackupActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupActorOutput)
}

type GetBackupActorOutput struct{ *pulumi.OutputState }

func (GetBackupActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupActor)(nil)).Elem()
}

func (o GetBackupActorOutput) ToGetBackupActorOutput() GetBackupActorOutput {
	return o
}

func (o GetBackupActorOutput) ToGetBackupActorOutputWithContext(ctx context.Context) GetBackupActorOutput {
	return o
}

// The URL of the actor's avatar
func (o GetBackupActorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupActor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The name of the actor
func (o GetBackupActorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupActor) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the actor
func (o GetBackupActorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupActor) string { return v.Id }).(pulumi.StringOutput)
}

type GetBackupBackupPolicy struct {
	// When the backup policy was created.
	CreatedAt string `pulumi:"createdAt"`
	// The unit for the frequency of the backup policy.
	FrequencyUnit string `pulumi:"frequencyUnit"`
	// A number value for the frequency of the backup policy.
	FrequencyValue float64 `pulumi:"frequencyValue"`
	// The ID of the backup policy.
	Id string `pulumi:"id"`
	// When the backup was last run.
	LastRanAt string `pulumi:"lastRanAt"`
	// The name of the backup policy.
	Name string `pulumi:"name"`
	// When the backup will next run.
	NextRunAt string `pulumi:"nextRunAt"`
	// The unit for the retention period of the backup policy.
	RetentionUnit string `pulumi:"retentionUnit"`
	// A number value for the retention period of the backup policy.
	RetentionValue float64 `pulumi:"retentionValue"`
	// Day of the week that the backup is scheduled.
	ScheduleDay string `pulumi:"scheduleDay"`
	// Week of the month that the backup is scheduled.
	ScheduleWeek string `pulumi:"scheduleWeek"`
	// Whether the backup policy is for a production or development database, or for a database branch.
	Target string `pulumi:"target"`
	// When the backup policy was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetBackupBackupPolicyInput is an input type that accepts GetBackupBackupPolicyArgs and GetBackupBackupPolicyOutput values.
// You can construct a concrete instance of `GetBackupBackupPolicyInput` via:
//
//	GetBackupBackupPolicyArgs{...}
type GetBackupBackupPolicyInput interface {
	pulumi.Input

	ToGetBackupBackupPolicyOutput() GetBackupBackupPolicyOutput
	ToGetBackupBackupPolicyOutputWithContext(context.Context) GetBackupBackupPolicyOutput
}

type GetBackupBackupPolicyArgs struct {
	// When the backup policy was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The unit for the frequency of the backup policy.
	FrequencyUnit pulumi.StringInput `pulumi:"frequencyUnit"`
	// A number value for the frequency of the backup policy.
	FrequencyValue pulumi.Float64Input `pulumi:"frequencyValue"`
	// The ID of the backup policy.
	Id pulumi.StringInput `pulumi:"id"`
	// When the backup was last run.
	LastRanAt pulumi.StringInput `pulumi:"lastRanAt"`
	// The name of the backup policy.
	Name pulumi.StringInput `pulumi:"name"`
	// When the backup will next run.
	NextRunAt pulumi.StringInput `pulumi:"nextRunAt"`
	// The unit for the retention period of the backup policy.
	RetentionUnit pulumi.StringInput `pulumi:"retentionUnit"`
	// A number value for the retention period of the backup policy.
	RetentionValue pulumi.Float64Input `pulumi:"retentionValue"`
	// Day of the week that the backup is scheduled.
	ScheduleDay pulumi.StringInput `pulumi:"scheduleDay"`
	// Week of the month that the backup is scheduled.
	ScheduleWeek pulumi.StringInput `pulumi:"scheduleWeek"`
	// Whether the backup policy is for a production or development database, or for a database branch.
	Target pulumi.StringInput `pulumi:"target"`
	// When the backup policy was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetBackupBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupBackupPolicy)(nil)).Elem()
}

func (i GetBackupBackupPolicyArgs) ToGetBackupBackupPolicyOutput() GetBackupBackupPolicyOutput {
	return i.ToGetBackupBackupPolicyOutputWithContext(context.Background())
}

func (i GetBackupBackupPolicyArgs) ToGetBackupBackupPolicyOutputWithContext(ctx context.Context) GetBackupBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupBackupPolicyOutput)
}

type GetBackupBackupPolicyOutput struct{ *pulumi.OutputState }

func (GetBackupBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupBackupPolicy)(nil)).Elem()
}

func (o GetBackupBackupPolicyOutput) ToGetBackupBackupPolicyOutput() GetBackupBackupPolicyOutput {
	return o
}

func (o GetBackupBackupPolicyOutput) ToGetBackupBackupPolicyOutputWithContext(ctx context.Context) GetBackupBackupPolicyOutput {
	return o
}

// When the backup policy was created.
func (o GetBackupBackupPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unit for the frequency of the backup policy.
func (o GetBackupBackupPolicyOutput) FrequencyUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.FrequencyUnit }).(pulumi.StringOutput)
}

// A number value for the frequency of the backup policy.
func (o GetBackupBackupPolicyOutput) FrequencyValue() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackupBackupPolicy) float64 { return v.FrequencyValue }).(pulumi.Float64Output)
}

// The ID of the backup policy.
func (o GetBackupBackupPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// When the backup was last run.
func (o GetBackupBackupPolicyOutput) LastRanAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.LastRanAt }).(pulumi.StringOutput)
}

// The name of the backup policy.
func (o GetBackupBackupPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// When the backup will next run.
func (o GetBackupBackupPolicyOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.NextRunAt }).(pulumi.StringOutput)
}

// The unit for the retention period of the backup policy.
func (o GetBackupBackupPolicyOutput) RetentionUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.RetentionUnit }).(pulumi.StringOutput)
}

// A number value for the retention period of the backup policy.
func (o GetBackupBackupPolicyOutput) RetentionValue() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackupBackupPolicy) float64 { return v.RetentionValue }).(pulumi.Float64Output)
}

// Day of the week that the backup is scheduled.
func (o GetBackupBackupPolicyOutput) ScheduleDay() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.ScheduleDay }).(pulumi.StringOutput)
}

// Week of the month that the backup is scheduled.
func (o GetBackupBackupPolicyOutput) ScheduleWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.ScheduleWeek }).(pulumi.StringOutput)
}

// Whether the backup policy is for a production or development database, or for a database branch.
func (o GetBackupBackupPolicyOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.Target }).(pulumi.StringOutput)
}

// When the backup policy was last updated.
func (o GetBackupBackupPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupBackupPolicy) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetBackupsBackup struct {
	// The actor that created the backup.
	Actor GetBackupsBackupActor `pulumi:"actor"`
	// The backup policy being followed.
	BackupPolicy GetBackupsBackupBackupPolicy `pulumi:"backupPolicy"`
	// The branch this backup belongs to.
	Branch string `pulumi:"branch"`
	// When the backup was created.
	CreatedAt string `pulumi:"createdAt"`
	// The database this backup belongs to.
	Database string `pulumi:"database"`
	// The estimated storage cost of the backup.
	EstimatedStorageCost string `pulumi:"estimatedStorageCost"`
	// The ID of the backup.
	Id string `pulumi:"id"`
	// The name of the backup.
	Name string `pulumi:"name"`
	// The organization this backup belongs to.
	Organization string `pulumi:"organization"`
	// Whether or not the backup policy is required.
	Required bool `pulumi:"required"`
	// Branches that have been restored with this backup.
	RestoredBranches []string `pulumi:"restoredBranches"`
	// The size of the backup.
	Size float64 `pulumi:"size"`
	// The current state of the backup.
	State string `pulumi:"state"`
	// When the backup was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetBackupsBackupInput is an input type that accepts GetBackupsBackupArgs and GetBackupsBackupOutput values.
// You can construct a concrete instance of `GetBackupsBackupInput` via:
//
//	GetBackupsBackupArgs{...}
type GetBackupsBackupInput interface {
	pulumi.Input

	ToGetBackupsBackupOutput() GetBackupsBackupOutput
	ToGetBackupsBackupOutputWithContext(context.Context) GetBackupsBackupOutput
}

type GetBackupsBackupArgs struct {
	// The actor that created the backup.
	Actor GetBackupsBackupActorInput `pulumi:"actor"`
	// The backup policy being followed.
	BackupPolicy GetBackupsBackupBackupPolicyInput `pulumi:"backupPolicy"`
	// The branch this backup belongs to.
	Branch pulumi.StringInput `pulumi:"branch"`
	// When the backup was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The database this backup belongs to.
	Database pulumi.StringInput `pulumi:"database"`
	// The estimated storage cost of the backup.
	EstimatedStorageCost pulumi.StringInput `pulumi:"estimatedStorageCost"`
	// The ID of the backup.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the backup.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization this backup belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
	// Whether or not the backup policy is required.
	Required pulumi.BoolInput `pulumi:"required"`
	// Branches that have been restored with this backup.
	RestoredBranches pulumi.StringArrayInput `pulumi:"restoredBranches"`
	// The size of the backup.
	Size pulumi.Float64Input `pulumi:"size"`
	// The current state of the backup.
	State pulumi.StringInput `pulumi:"state"`
	// When the backup was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetBackupsBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackup)(nil)).Elem()
}

func (i GetBackupsBackupArgs) ToGetBackupsBackupOutput() GetBackupsBackupOutput {
	return i.ToGetBackupsBackupOutputWithContext(context.Background())
}

func (i GetBackupsBackupArgs) ToGetBackupsBackupOutputWithContext(ctx context.Context) GetBackupsBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupOutput)
}

// GetBackupsBackupArrayInput is an input type that accepts GetBackupsBackupArray and GetBackupsBackupArrayOutput values.
// You can construct a concrete instance of `GetBackupsBackupArrayInput` via:
//
//	GetBackupsBackupArray{ GetBackupsBackupArgs{...} }
type GetBackupsBackupArrayInput interface {
	pulumi.Input

	ToGetBackupsBackupArrayOutput() GetBackupsBackupArrayOutput
	ToGetBackupsBackupArrayOutputWithContext(context.Context) GetBackupsBackupArrayOutput
}

type GetBackupsBackupArray []GetBackupsBackupInput

func (GetBackupsBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackup)(nil)).Elem()
}

func (i GetBackupsBackupArray) ToGetBackupsBackupArrayOutput() GetBackupsBackupArrayOutput {
	return i.ToGetBackupsBackupArrayOutputWithContext(context.Background())
}

func (i GetBackupsBackupArray) ToGetBackupsBackupArrayOutputWithContext(ctx context.Context) GetBackupsBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupArrayOutput)
}

type GetBackupsBackupOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackup)(nil)).Elem()
}

func (o GetBackupsBackupOutput) ToGetBackupsBackupOutput() GetBackupsBackupOutput {
	return o
}

func (o GetBackupsBackupOutput) ToGetBackupsBackupOutputWithContext(ctx context.Context) GetBackupsBackupOutput {
	return o
}

// The actor that created the backup.
func (o GetBackupsBackupOutput) Actor() GetBackupsBackupActorOutput {
	return o.ApplyT(func(v GetBackupsBackup) GetBackupsBackupActor { return v.Actor }).(GetBackupsBackupActorOutput)
}

// The backup policy being followed.
func (o GetBackupsBackupOutput) BackupPolicy() GetBackupsBackupBackupPolicyOutput {
	return o.ApplyT(func(v GetBackupsBackup) GetBackupsBackupBackupPolicy { return v.BackupPolicy }).(GetBackupsBackupBackupPolicyOutput)
}

// The branch this backup belongs to.
func (o GetBackupsBackupOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.Branch }).(pulumi.StringOutput)
}

// When the backup was created.
func (o GetBackupsBackupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The database this backup belongs to.
func (o GetBackupsBackupOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.Database }).(pulumi.StringOutput)
}

// The estimated storage cost of the backup.
func (o GetBackupsBackupOutput) EstimatedStorageCost() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.EstimatedStorageCost }).(pulumi.StringOutput)
}

// The ID of the backup.
func (o GetBackupsBackupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the backup.
func (o GetBackupsBackupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.Name }).(pulumi.StringOutput)
}

// The organization this backup belongs to.
func (o GetBackupsBackupOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.Organization }).(pulumi.StringOutput)
}

// Whether or not the backup policy is required.
func (o GetBackupsBackupOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackupsBackup) bool { return v.Required }).(pulumi.BoolOutput)
}

// Branches that have been restored with this backup.
func (o GetBackupsBackupOutput) RestoredBranches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackupsBackup) []string { return v.RestoredBranches }).(pulumi.StringArrayOutput)
}

// The size of the backup.
func (o GetBackupsBackupOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackupsBackup) float64 { return v.Size }).(pulumi.Float64Output)
}

// The current state of the backup.
func (o GetBackupsBackupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.State }).(pulumi.StringOutput)
}

// When the backup was last updated.
func (o GetBackupsBackupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetBackupsBackupArrayOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackup)(nil)).Elem()
}

func (o GetBackupsBackupArrayOutput) ToGetBackupsBackupArrayOutput() GetBackupsBackupArrayOutput {
	return o
}

func (o GetBackupsBackupArrayOutput) ToGetBackupsBackupArrayOutputWithContext(ctx context.Context) GetBackupsBackupArrayOutput {
	return o
}

func (o GetBackupsBackupArrayOutput) Index(i pulumi.IntInput) GetBackupsBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupsBackup {
		return vs[0].([]GetBackupsBackup)[vs[1].(int)]
	}).(GetBackupsBackupOutput)
}

type GetBackupsBackupActor struct {
	// The URL of the actor's avatar
	AvatarUrl string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName string `pulumi:"displayName"`
	// The ID of the actor
	Id string `pulumi:"id"`
}

// GetBackupsBackupActorInput is an input type that accepts GetBackupsBackupActorArgs and GetBackupsBackupActorOutput values.
// You can construct a concrete instance of `GetBackupsBackupActorInput` via:
//
//	GetBackupsBackupActorArgs{...}
type GetBackupsBackupActorInput interface {
	pulumi.Input

	ToGetBackupsBackupActorOutput() GetBackupsBackupActorOutput
	ToGetBackupsBackupActorOutputWithContext(context.Context) GetBackupsBackupActorOutput
}

type GetBackupsBackupActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBackupsBackupActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupActor)(nil)).Elem()
}

func (i GetBackupsBackupActorArgs) ToGetBackupsBackupActorOutput() GetBackupsBackupActorOutput {
	return i.ToGetBackupsBackupActorOutputWithContext(context.Background())
}

func (i GetBackupsBackupActorArgs) ToGetBackupsBackupActorOutputWithContext(ctx context.Context) GetBackupsBackupActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupActorOutput)
}

type GetBackupsBackupActorOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupActor)(nil)).Elem()
}

func (o GetBackupsBackupActorOutput) ToGetBackupsBackupActorOutput() GetBackupsBackupActorOutput {
	return o
}

func (o GetBackupsBackupActorOutput) ToGetBackupsBackupActorOutputWithContext(ctx context.Context) GetBackupsBackupActorOutput {
	return o
}

// The URL of the actor's avatar
func (o GetBackupsBackupActorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupActor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The name of the actor
func (o GetBackupsBackupActorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupActor) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the actor
func (o GetBackupsBackupActorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupActor) string { return v.Id }).(pulumi.StringOutput)
}

type GetBackupsBackupBackupPolicy struct {
	// When the backup policy was created.
	CreatedAt string `pulumi:"createdAt"`
	// The unit for the frequency of the backup policy.
	FrequencyUnit string `pulumi:"frequencyUnit"`
	// A number value for the frequency of the backup policy.
	FrequencyValue float64 `pulumi:"frequencyValue"`
	// The ID of the backup policy.
	Id string `pulumi:"id"`
	// When the backup was last run.
	LastRanAt string `pulumi:"lastRanAt"`
	// The name of the backup policy.
	Name string `pulumi:"name"`
	// When the backup will next run.
	NextRunAt string `pulumi:"nextRunAt"`
	// The unit for the retention period of the backup policy.
	RetentionUnit string `pulumi:"retentionUnit"`
	// A number value for the retention period of the backup policy.
	RetentionValue float64 `pulumi:"retentionValue"`
	// Day of the week that the backup is scheduled.
	ScheduleDay string `pulumi:"scheduleDay"`
	// Week of the month that the backup is scheduled.
	ScheduleWeek string `pulumi:"scheduleWeek"`
	// Whether the backup policy is for a production or development database, or for a database branch.
	Target string `pulumi:"target"`
	// When the backup policy was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetBackupsBackupBackupPolicyInput is an input type that accepts GetBackupsBackupBackupPolicyArgs and GetBackupsBackupBackupPolicyOutput values.
// You can construct a concrete instance of `GetBackupsBackupBackupPolicyInput` via:
//
//	GetBackupsBackupBackupPolicyArgs{...}
type GetBackupsBackupBackupPolicyInput interface {
	pulumi.Input

	ToGetBackupsBackupBackupPolicyOutput() GetBackupsBackupBackupPolicyOutput
	ToGetBackupsBackupBackupPolicyOutputWithContext(context.Context) GetBackupsBackupBackupPolicyOutput
}

type GetBackupsBackupBackupPolicyArgs struct {
	// When the backup policy was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The unit for the frequency of the backup policy.
	FrequencyUnit pulumi.StringInput `pulumi:"frequencyUnit"`
	// A number value for the frequency of the backup policy.
	FrequencyValue pulumi.Float64Input `pulumi:"frequencyValue"`
	// The ID of the backup policy.
	Id pulumi.StringInput `pulumi:"id"`
	// When the backup was last run.
	LastRanAt pulumi.StringInput `pulumi:"lastRanAt"`
	// The name of the backup policy.
	Name pulumi.StringInput `pulumi:"name"`
	// When the backup will next run.
	NextRunAt pulumi.StringInput `pulumi:"nextRunAt"`
	// The unit for the retention period of the backup policy.
	RetentionUnit pulumi.StringInput `pulumi:"retentionUnit"`
	// A number value for the retention period of the backup policy.
	RetentionValue pulumi.Float64Input `pulumi:"retentionValue"`
	// Day of the week that the backup is scheduled.
	ScheduleDay pulumi.StringInput `pulumi:"scheduleDay"`
	// Week of the month that the backup is scheduled.
	ScheduleWeek pulumi.StringInput `pulumi:"scheduleWeek"`
	// Whether the backup policy is for a production or development database, or for a database branch.
	Target pulumi.StringInput `pulumi:"target"`
	// When the backup policy was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetBackupsBackupBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupBackupPolicy)(nil)).Elem()
}

func (i GetBackupsBackupBackupPolicyArgs) ToGetBackupsBackupBackupPolicyOutput() GetBackupsBackupBackupPolicyOutput {
	return i.ToGetBackupsBackupBackupPolicyOutputWithContext(context.Background())
}

func (i GetBackupsBackupBackupPolicyArgs) ToGetBackupsBackupBackupPolicyOutputWithContext(ctx context.Context) GetBackupsBackupBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupBackupPolicyOutput)
}

type GetBackupsBackupBackupPolicyOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupBackupPolicy)(nil)).Elem()
}

func (o GetBackupsBackupBackupPolicyOutput) ToGetBackupsBackupBackupPolicyOutput() GetBackupsBackupBackupPolicyOutput {
	return o
}

func (o GetBackupsBackupBackupPolicyOutput) ToGetBackupsBackupBackupPolicyOutputWithContext(ctx context.Context) GetBackupsBackupBackupPolicyOutput {
	return o
}

// When the backup policy was created.
func (o GetBackupsBackupBackupPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unit for the frequency of the backup policy.
func (o GetBackupsBackupBackupPolicyOutput) FrequencyUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.FrequencyUnit }).(pulumi.StringOutput)
}

// A number value for the frequency of the backup policy.
func (o GetBackupsBackupBackupPolicyOutput) FrequencyValue() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) float64 { return v.FrequencyValue }).(pulumi.Float64Output)
}

// The ID of the backup policy.
func (o GetBackupsBackupBackupPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// When the backup was last run.
func (o GetBackupsBackupBackupPolicyOutput) LastRanAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.LastRanAt }).(pulumi.StringOutput)
}

// The name of the backup policy.
func (o GetBackupsBackupBackupPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// When the backup will next run.
func (o GetBackupsBackupBackupPolicyOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.NextRunAt }).(pulumi.StringOutput)
}

// The unit for the retention period of the backup policy.
func (o GetBackupsBackupBackupPolicyOutput) RetentionUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.RetentionUnit }).(pulumi.StringOutput)
}

// A number value for the retention period of the backup policy.
func (o GetBackupsBackupBackupPolicyOutput) RetentionValue() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) float64 { return v.RetentionValue }).(pulumi.Float64Output)
}

// Day of the week that the backup is scheduled.
func (o GetBackupsBackupBackupPolicyOutput) ScheduleDay() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.ScheduleDay }).(pulumi.StringOutput)
}

// Week of the month that the backup is scheduled.
func (o GetBackupsBackupBackupPolicyOutput) ScheduleWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.ScheduleWeek }).(pulumi.StringOutput)
}

// Whether the backup policy is for a production or development database, or for a database branch.
func (o GetBackupsBackupBackupPolicyOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.Target }).(pulumi.StringOutput)
}

// When the backup policy was last updated.
func (o GetBackupsBackupBackupPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupBackupPolicy) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetBranchActor struct {
	// The URL of the actor's avatar
	AvatarUrl string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName string `pulumi:"displayName"`
	// The ID of the actor
	Id string `pulumi:"id"`
}

// GetBranchActorInput is an input type that accepts GetBranchActorArgs and GetBranchActorOutput values.
// You can construct a concrete instance of `GetBranchActorInput` via:
//
//	GetBranchActorArgs{...}
type GetBranchActorInput interface {
	pulumi.Input

	ToGetBranchActorOutput() GetBranchActorOutput
	ToGetBranchActorOutputWithContext(context.Context) GetBranchActorOutput
}

type GetBranchActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBranchActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchActor)(nil)).Elem()
}

func (i GetBranchActorArgs) ToGetBranchActorOutput() GetBranchActorOutput {
	return i.ToGetBranchActorOutputWithContext(context.Background())
}

func (i GetBranchActorArgs) ToGetBranchActorOutputWithContext(ctx context.Context) GetBranchActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchActorOutput)
}

type GetBranchActorOutput struct{ *pulumi.OutputState }

func (GetBranchActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchActor)(nil)).Elem()
}

func (o GetBranchActorOutput) ToGetBranchActorOutput() GetBranchActorOutput {
	return o
}

func (o GetBranchActorOutput) ToGetBranchActorOutputWithContext(ctx context.Context) GetBranchActorOutput {
	return o
}

// The URL of the actor's avatar
func (o GetBranchActorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchActor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The name of the actor
func (o GetBranchActorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchActor) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the actor
func (o GetBranchActorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchActor) string { return v.Id }).(pulumi.StringOutput)
}

type GetBranchRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetBranchRegionInput is an input type that accepts GetBranchRegionArgs and GetBranchRegionOutput values.
// You can construct a concrete instance of `GetBranchRegionInput` via:
//
//	GetBranchRegionArgs{...}
type GetBranchRegionInput interface {
	pulumi.Input

	ToGetBranchRegionOutput() GetBranchRegionOutput
	ToGetBranchRegionOutputWithContext(context.Context) GetBranchRegionOutput
}

type GetBranchRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetBranchRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchRegion)(nil)).Elem()
}

func (i GetBranchRegionArgs) ToGetBranchRegionOutput() GetBranchRegionOutput {
	return i.ToGetBranchRegionOutputWithContext(context.Background())
}

func (i GetBranchRegionArgs) ToGetBranchRegionOutputWithContext(ctx context.Context) GetBranchRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchRegionOutput)
}

type GetBranchRegionOutput struct{ *pulumi.OutputState }

func (GetBranchRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchRegion)(nil)).Elem()
}

func (o GetBranchRegionOutput) ToGetBranchRegionOutput() GetBranchRegionOutput {
	return o
}

func (o GetBranchRegionOutput) ToGetBranchRegionOutputWithContext(ctx context.Context) GetBranchRegionOutput {
	return o
}

// Name of the region.
func (o GetBranchRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetBranchRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBranchRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetBranchRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetBranchRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetBranchRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetBranchRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBranchRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetBranchRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetBranchRestoredFromBranch struct {
	// When the resource was created.
	CreatedAt string `pulumi:"createdAt"`
	// When the resource was deleted, if deleted.
	DeletedAt string `pulumi:"deletedAt"`
	// The ID for the resource.
	Id string `pulumi:"id"`
	// The name for the resource.
	Name string `pulumi:"name"`
	// When the resource was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetBranchRestoredFromBranchInput is an input type that accepts GetBranchRestoredFromBranchArgs and GetBranchRestoredFromBranchOutput values.
// You can construct a concrete instance of `GetBranchRestoredFromBranchInput` via:
//
//	GetBranchRestoredFromBranchArgs{...}
type GetBranchRestoredFromBranchInput interface {
	pulumi.Input

	ToGetBranchRestoredFromBranchOutput() GetBranchRestoredFromBranchOutput
	ToGetBranchRestoredFromBranchOutputWithContext(context.Context) GetBranchRestoredFromBranchOutput
}

type GetBranchRestoredFromBranchArgs struct {
	// When the resource was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// When the resource was deleted, if deleted.
	DeletedAt pulumi.StringInput `pulumi:"deletedAt"`
	// The ID for the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The name for the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// When the resource was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetBranchRestoredFromBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchRestoredFromBranch)(nil)).Elem()
}

func (i GetBranchRestoredFromBranchArgs) ToGetBranchRestoredFromBranchOutput() GetBranchRestoredFromBranchOutput {
	return i.ToGetBranchRestoredFromBranchOutputWithContext(context.Background())
}

func (i GetBranchRestoredFromBranchArgs) ToGetBranchRestoredFromBranchOutputWithContext(ctx context.Context) GetBranchRestoredFromBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchRestoredFromBranchOutput)
}

type GetBranchRestoredFromBranchOutput struct{ *pulumi.OutputState }

func (GetBranchRestoredFromBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchRestoredFromBranch)(nil)).Elem()
}

func (o GetBranchRestoredFromBranchOutput) ToGetBranchRestoredFromBranchOutput() GetBranchRestoredFromBranchOutput {
	return o
}

func (o GetBranchRestoredFromBranchOutput) ToGetBranchRestoredFromBranchOutputWithContext(ctx context.Context) GetBranchRestoredFromBranchOutput {
	return o
}

// When the resource was created.
func (o GetBranchRestoredFromBranchOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRestoredFromBranch) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// When the resource was deleted, if deleted.
func (o GetBranchRestoredFromBranchOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRestoredFromBranch) string { return v.DeletedAt }).(pulumi.StringOutput)
}

// The ID for the resource.
func (o GetBranchRestoredFromBranchOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRestoredFromBranch) string { return v.Id }).(pulumi.StringOutput)
}

// The name for the resource.
func (o GetBranchRestoredFromBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRestoredFromBranch) string { return v.Name }).(pulumi.StringOutput)
}

// When the resource was last updated.
func (o GetBranchRestoredFromBranchOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchRestoredFromBranch) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetBranchSchemaLintError struct {
	// A list of invalid auto-incremented columns.
	AutoIncrementColumnNames []string `pulumi:"autoIncrementColumnNames"`
	// The charset of the schema.
	CharsetName string `pulumi:"charsetName"`
	// The name of the invalid check constraint.
	CheckConstraintName string `pulumi:"checkConstraintName"`
	// The column in a table relevant to the error.
	ColumnName string `pulumi:"columnName"`
	// A link to the documentation related to the error.
	DocsUrl string `pulumi:"docsUrl"`
	// The engine of the schema.
	EngineName string `pulumi:"engineName"`
	// The name of the invalid enum value.
	EnumValue string `pulumi:"enumValue"`
	// A description for the error that occurred.
	ErrorDescription string `pulumi:"errorDescription"`
	// A list of invalid foreign key columns in a table.
	ForeignKeyColumnNames []string `pulumi:"foreignKeyColumnNames"`
	// The path for an invalid JSON column.
	JsonPath string `pulumi:"jsonPath"`
	// The keyspace of the schema with the error.
	KeyspaceName string `pulumi:"keyspaceName"`
	// Code representing.
	LintError string `pulumi:"lintError"`
	// The name of the invalid partition in the schema.
	PartitionName string `pulumi:"partitionName"`
	// The name of the invalid partitioning type.
	PartitioningType string `pulumi:"partitioningType"`
	// The subject for the errors.
	SubjectType string `pulumi:"subjectType"`
	// The table with the error.
	TableName string `pulumi:"tableName"`
	// The name of the vindex for the schema.
	VindexName string `pulumi:"vindexName"`
}

// GetBranchSchemaLintErrorInput is an input type that accepts GetBranchSchemaLintErrorArgs and GetBranchSchemaLintErrorOutput values.
// You can construct a concrete instance of `GetBranchSchemaLintErrorInput` via:
//
//	GetBranchSchemaLintErrorArgs{...}
type GetBranchSchemaLintErrorInput interface {
	pulumi.Input

	ToGetBranchSchemaLintErrorOutput() GetBranchSchemaLintErrorOutput
	ToGetBranchSchemaLintErrorOutputWithContext(context.Context) GetBranchSchemaLintErrorOutput
}

type GetBranchSchemaLintErrorArgs struct {
	// A list of invalid auto-incremented columns.
	AutoIncrementColumnNames pulumi.StringArrayInput `pulumi:"autoIncrementColumnNames"`
	// The charset of the schema.
	CharsetName pulumi.StringInput `pulumi:"charsetName"`
	// The name of the invalid check constraint.
	CheckConstraintName pulumi.StringInput `pulumi:"checkConstraintName"`
	// The column in a table relevant to the error.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// A link to the documentation related to the error.
	DocsUrl pulumi.StringInput `pulumi:"docsUrl"`
	// The engine of the schema.
	EngineName pulumi.StringInput `pulumi:"engineName"`
	// The name of the invalid enum value.
	EnumValue pulumi.StringInput `pulumi:"enumValue"`
	// A description for the error that occurred.
	ErrorDescription pulumi.StringInput `pulumi:"errorDescription"`
	// A list of invalid foreign key columns in a table.
	ForeignKeyColumnNames pulumi.StringArrayInput `pulumi:"foreignKeyColumnNames"`
	// The path for an invalid JSON column.
	JsonPath pulumi.StringInput `pulumi:"jsonPath"`
	// The keyspace of the schema with the error.
	KeyspaceName pulumi.StringInput `pulumi:"keyspaceName"`
	// Code representing.
	LintError pulumi.StringInput `pulumi:"lintError"`
	// The name of the invalid partition in the schema.
	PartitionName pulumi.StringInput `pulumi:"partitionName"`
	// The name of the invalid partitioning type.
	PartitioningType pulumi.StringInput `pulumi:"partitioningType"`
	// The subject for the errors.
	SubjectType pulumi.StringInput `pulumi:"subjectType"`
	// The table with the error.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// The name of the vindex for the schema.
	VindexName pulumi.StringInput `pulumi:"vindexName"`
}

func (GetBranchSchemaLintErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchSchemaLintError)(nil)).Elem()
}

func (i GetBranchSchemaLintErrorArgs) ToGetBranchSchemaLintErrorOutput() GetBranchSchemaLintErrorOutput {
	return i.ToGetBranchSchemaLintErrorOutputWithContext(context.Background())
}

func (i GetBranchSchemaLintErrorArgs) ToGetBranchSchemaLintErrorOutputWithContext(ctx context.Context) GetBranchSchemaLintErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchSchemaLintErrorOutput)
}

// GetBranchSchemaLintErrorArrayInput is an input type that accepts GetBranchSchemaLintErrorArray and GetBranchSchemaLintErrorArrayOutput values.
// You can construct a concrete instance of `GetBranchSchemaLintErrorArrayInput` via:
//
//	GetBranchSchemaLintErrorArray{ GetBranchSchemaLintErrorArgs{...} }
type GetBranchSchemaLintErrorArrayInput interface {
	pulumi.Input

	ToGetBranchSchemaLintErrorArrayOutput() GetBranchSchemaLintErrorArrayOutput
	ToGetBranchSchemaLintErrorArrayOutputWithContext(context.Context) GetBranchSchemaLintErrorArrayOutput
}

type GetBranchSchemaLintErrorArray []GetBranchSchemaLintErrorInput

func (GetBranchSchemaLintErrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchSchemaLintError)(nil)).Elem()
}

func (i GetBranchSchemaLintErrorArray) ToGetBranchSchemaLintErrorArrayOutput() GetBranchSchemaLintErrorArrayOutput {
	return i.ToGetBranchSchemaLintErrorArrayOutputWithContext(context.Background())
}

func (i GetBranchSchemaLintErrorArray) ToGetBranchSchemaLintErrorArrayOutputWithContext(ctx context.Context) GetBranchSchemaLintErrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchSchemaLintErrorArrayOutput)
}

type GetBranchSchemaLintErrorOutput struct{ *pulumi.OutputState }

func (GetBranchSchemaLintErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchSchemaLintError)(nil)).Elem()
}

func (o GetBranchSchemaLintErrorOutput) ToGetBranchSchemaLintErrorOutput() GetBranchSchemaLintErrorOutput {
	return o
}

func (o GetBranchSchemaLintErrorOutput) ToGetBranchSchemaLintErrorOutputWithContext(ctx context.Context) GetBranchSchemaLintErrorOutput {
	return o
}

// A list of invalid auto-incremented columns.
func (o GetBranchSchemaLintErrorOutput) AutoIncrementColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) []string { return v.AutoIncrementColumnNames }).(pulumi.StringArrayOutput)
}

// The charset of the schema.
func (o GetBranchSchemaLintErrorOutput) CharsetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.CharsetName }).(pulumi.StringOutput)
}

// The name of the invalid check constraint.
func (o GetBranchSchemaLintErrorOutput) CheckConstraintName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.CheckConstraintName }).(pulumi.StringOutput)
}

// The column in a table relevant to the error.
func (o GetBranchSchemaLintErrorOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.ColumnName }).(pulumi.StringOutput)
}

// A link to the documentation related to the error.
func (o GetBranchSchemaLintErrorOutput) DocsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.DocsUrl }).(pulumi.StringOutput)
}

// The engine of the schema.
func (o GetBranchSchemaLintErrorOutput) EngineName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.EngineName }).(pulumi.StringOutput)
}

// The name of the invalid enum value.
func (o GetBranchSchemaLintErrorOutput) EnumValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.EnumValue }).(pulumi.StringOutput)
}

// A description for the error that occurred.
func (o GetBranchSchemaLintErrorOutput) ErrorDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.ErrorDescription }).(pulumi.StringOutput)
}

// A list of invalid foreign key columns in a table.
func (o GetBranchSchemaLintErrorOutput) ForeignKeyColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) []string { return v.ForeignKeyColumnNames }).(pulumi.StringArrayOutput)
}

// The path for an invalid JSON column.
func (o GetBranchSchemaLintErrorOutput) JsonPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.JsonPath }).(pulumi.StringOutput)
}

// The keyspace of the schema with the error.
func (o GetBranchSchemaLintErrorOutput) KeyspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.KeyspaceName }).(pulumi.StringOutput)
}

// Code representing.
func (o GetBranchSchemaLintErrorOutput) LintError() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.LintError }).(pulumi.StringOutput)
}

// The name of the invalid partition in the schema.
func (o GetBranchSchemaLintErrorOutput) PartitionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.PartitionName }).(pulumi.StringOutput)
}

// The name of the invalid partitioning type.
func (o GetBranchSchemaLintErrorOutput) PartitioningType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.PartitioningType }).(pulumi.StringOutput)
}

// The subject for the errors.
func (o GetBranchSchemaLintErrorOutput) SubjectType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.SubjectType }).(pulumi.StringOutput)
}

// The table with the error.
func (o GetBranchSchemaLintErrorOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.TableName }).(pulumi.StringOutput)
}

// The name of the vindex for the schema.
func (o GetBranchSchemaLintErrorOutput) VindexName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaLintError) string { return v.VindexName }).(pulumi.StringOutput)
}

type GetBranchSchemaLintErrorArrayOutput struct{ *pulumi.OutputState }

func (GetBranchSchemaLintErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchSchemaLintError)(nil)).Elem()
}

func (o GetBranchSchemaLintErrorArrayOutput) ToGetBranchSchemaLintErrorArrayOutput() GetBranchSchemaLintErrorArrayOutput {
	return o
}

func (o GetBranchSchemaLintErrorArrayOutput) ToGetBranchSchemaLintErrorArrayOutputWithContext(ctx context.Context) GetBranchSchemaLintErrorArrayOutput {
	return o
}

func (o GetBranchSchemaLintErrorArrayOutput) Index(i pulumi.IntInput) GetBranchSchemaLintErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBranchSchemaLintError {
		return vs[0].([]GetBranchSchemaLintError)[vs[1].(int)]
	}).(GetBranchSchemaLintErrorOutput)
}

type GetBranchSchemaTable struct {
	// Syntax highlighted HTML for the table's schema.
	Html string `pulumi:"html"`
	// Name of the table.
	Name string `pulumi:"name"`
	// The table's schema.
	Raw string `pulumi:"raw"`
}

// GetBranchSchemaTableInput is an input type that accepts GetBranchSchemaTableArgs and GetBranchSchemaTableOutput values.
// You can construct a concrete instance of `GetBranchSchemaTableInput` via:
//
//	GetBranchSchemaTableArgs{...}
type GetBranchSchemaTableInput interface {
	pulumi.Input

	ToGetBranchSchemaTableOutput() GetBranchSchemaTableOutput
	ToGetBranchSchemaTableOutputWithContext(context.Context) GetBranchSchemaTableOutput
}

type GetBranchSchemaTableArgs struct {
	// Syntax highlighted HTML for the table's schema.
	Html pulumi.StringInput `pulumi:"html"`
	// Name of the table.
	Name pulumi.StringInput `pulumi:"name"`
	// The table's schema.
	Raw pulumi.StringInput `pulumi:"raw"`
}

func (GetBranchSchemaTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchSchemaTable)(nil)).Elem()
}

func (i GetBranchSchemaTableArgs) ToGetBranchSchemaTableOutput() GetBranchSchemaTableOutput {
	return i.ToGetBranchSchemaTableOutputWithContext(context.Background())
}

func (i GetBranchSchemaTableArgs) ToGetBranchSchemaTableOutputWithContext(ctx context.Context) GetBranchSchemaTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchSchemaTableOutput)
}

// GetBranchSchemaTableArrayInput is an input type that accepts GetBranchSchemaTableArray and GetBranchSchemaTableArrayOutput values.
// You can construct a concrete instance of `GetBranchSchemaTableArrayInput` via:
//
//	GetBranchSchemaTableArray{ GetBranchSchemaTableArgs{...} }
type GetBranchSchemaTableArrayInput interface {
	pulumi.Input

	ToGetBranchSchemaTableArrayOutput() GetBranchSchemaTableArrayOutput
	ToGetBranchSchemaTableArrayOutputWithContext(context.Context) GetBranchSchemaTableArrayOutput
}

type GetBranchSchemaTableArray []GetBranchSchemaTableInput

func (GetBranchSchemaTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchSchemaTable)(nil)).Elem()
}

func (i GetBranchSchemaTableArray) ToGetBranchSchemaTableArrayOutput() GetBranchSchemaTableArrayOutput {
	return i.ToGetBranchSchemaTableArrayOutputWithContext(context.Background())
}

func (i GetBranchSchemaTableArray) ToGetBranchSchemaTableArrayOutputWithContext(ctx context.Context) GetBranchSchemaTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchSchemaTableArrayOutput)
}

type GetBranchSchemaTableOutput struct{ *pulumi.OutputState }

func (GetBranchSchemaTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchSchemaTable)(nil)).Elem()
}

func (o GetBranchSchemaTableOutput) ToGetBranchSchemaTableOutput() GetBranchSchemaTableOutput {
	return o
}

func (o GetBranchSchemaTableOutput) ToGetBranchSchemaTableOutputWithContext(ctx context.Context) GetBranchSchemaTableOutput {
	return o
}

// Syntax highlighted HTML for the table's schema.
func (o GetBranchSchemaTableOutput) Html() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaTable) string { return v.Html }).(pulumi.StringOutput)
}

// Name of the table.
func (o GetBranchSchemaTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaTable) string { return v.Name }).(pulumi.StringOutput)
}

// The table's schema.
func (o GetBranchSchemaTableOutput) Raw() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchSchemaTable) string { return v.Raw }).(pulumi.StringOutput)
}

type GetBranchSchemaTableArrayOutput struct{ *pulumi.OutputState }

func (GetBranchSchemaTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchSchemaTable)(nil)).Elem()
}

func (o GetBranchSchemaTableArrayOutput) ToGetBranchSchemaTableArrayOutput() GetBranchSchemaTableArrayOutput {
	return o
}

func (o GetBranchSchemaTableArrayOutput) ToGetBranchSchemaTableArrayOutputWithContext(ctx context.Context) GetBranchSchemaTableArrayOutput {
	return o
}

func (o GetBranchSchemaTableArrayOutput) Index(i pulumi.IntInput) GetBranchSchemaTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBranchSchemaTable {
		return vs[0].([]GetBranchSchemaTable)[vs[1].(int)]
	}).(GetBranchSchemaTableOutput)
}

type GetBranchesBranch struct {
	// The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
	AccessHostUrl string `pulumi:"accessHostUrl"`
	// The actor who created this branch.
	Actor GetBranchesBranchActor `pulumi:"actor"`
	// The SKU representing the branch's cluster size.
	ClusterRateName string `pulumi:"clusterRateName"`
	// When the branch was created.
	CreatedAt string `pulumi:"createdAt"`
	// The database this branch belongs to.
	Database string `pulumi:"database"`
	// Planetscale app URL for the branch.
	HtmlUrl string `pulumi:"htmlUrl"`
	// The ID of the branch.
	Id string `pulumi:"id"`
	// The ID of the backup from which the branch was restored.
	InitialRestoreId string `pulumi:"initialRestoreId"`
	// The MySQL address for the branch.
	MysqlAddress string `pulumi:"mysqlAddress"`
	// The address of the MySQL provider for the branch.
	MysqlEdgeAddress string `pulumi:"mysqlEdgeAddress"`
	// The name of the branch.
	Name string `pulumi:"name"`
	// The organization this branch belongs to.
	Organization string `pulumi:"organization"`
	// The name of the parent branch from which the branch was created.
	ParentBranch string `pulumi:"parentBranch"`
	// Whether or not the branch is a production branch.
	Production bool `pulumi:"production"`
	// Whether or not the branch is ready to serve queries.
	Ready bool `pulumi:"ready"`
	// The region in which this branch lives.
	Region GetBranchesBranchRegion `pulumi:"region"`
	// When a user last marked a backup restore checklist as completed.
	RestoreChecklistCompletedAt string                              `pulumi:"restoreChecklistCompletedAt"`
	RestoredFromBranch          GetBranchesBranchRestoredFromBranch `pulumi:"restoredFromBranch"`
	// When the schema for the branch was last updated.
	SchemaLastUpdatedAt string `pulumi:"schemaLastUpdatedAt"`
	// The number of shards in the branch.
	ShardCount float64 `pulumi:"shardCount"`
	// Whether or not the branch is sharded.
	Sharded bool `pulumi:"sharded"`
	// When the branch was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetBranchesBranchInput is an input type that accepts GetBranchesBranchArgs and GetBranchesBranchOutput values.
// You can construct a concrete instance of `GetBranchesBranchInput` via:
//
//	GetBranchesBranchArgs{...}
type GetBranchesBranchInput interface {
	pulumi.Input

	ToGetBranchesBranchOutput() GetBranchesBranchOutput
	ToGetBranchesBranchOutputWithContext(context.Context) GetBranchesBranchOutput
}

type GetBranchesBranchArgs struct {
	// The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
	AccessHostUrl pulumi.StringInput `pulumi:"accessHostUrl"`
	// The actor who created this branch.
	Actor GetBranchesBranchActorInput `pulumi:"actor"`
	// The SKU representing the branch's cluster size.
	ClusterRateName pulumi.StringInput `pulumi:"clusterRateName"`
	// When the branch was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The database this branch belongs to.
	Database pulumi.StringInput `pulumi:"database"`
	// Planetscale app URL for the branch.
	HtmlUrl pulumi.StringInput `pulumi:"htmlUrl"`
	// The ID of the branch.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the backup from which the branch was restored.
	InitialRestoreId pulumi.StringInput `pulumi:"initialRestoreId"`
	// The MySQL address for the branch.
	MysqlAddress pulumi.StringInput `pulumi:"mysqlAddress"`
	// The address of the MySQL provider for the branch.
	MysqlEdgeAddress pulumi.StringInput `pulumi:"mysqlEdgeAddress"`
	// The name of the branch.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization this branch belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The name of the parent branch from which the branch was created.
	ParentBranch pulumi.StringInput `pulumi:"parentBranch"`
	// Whether or not the branch is a production branch.
	Production pulumi.BoolInput `pulumi:"production"`
	// Whether or not the branch is ready to serve queries.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The region in which this branch lives.
	Region GetBranchesBranchRegionInput `pulumi:"region"`
	// When a user last marked a backup restore checklist as completed.
	RestoreChecklistCompletedAt pulumi.StringInput                       `pulumi:"restoreChecklistCompletedAt"`
	RestoredFromBranch          GetBranchesBranchRestoredFromBranchInput `pulumi:"restoredFromBranch"`
	// When the schema for the branch was last updated.
	SchemaLastUpdatedAt pulumi.StringInput `pulumi:"schemaLastUpdatedAt"`
	// The number of shards in the branch.
	ShardCount pulumi.Float64Input `pulumi:"shardCount"`
	// Whether or not the branch is sharded.
	Sharded pulumi.BoolInput `pulumi:"sharded"`
	// When the branch was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetBranchesBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranch)(nil)).Elem()
}

func (i GetBranchesBranchArgs) ToGetBranchesBranchOutput() GetBranchesBranchOutput {
	return i.ToGetBranchesBranchOutputWithContext(context.Background())
}

func (i GetBranchesBranchArgs) ToGetBranchesBranchOutputWithContext(ctx context.Context) GetBranchesBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchesBranchOutput)
}

// GetBranchesBranchArrayInput is an input type that accepts GetBranchesBranchArray and GetBranchesBranchArrayOutput values.
// You can construct a concrete instance of `GetBranchesBranchArrayInput` via:
//
//	GetBranchesBranchArray{ GetBranchesBranchArgs{...} }
type GetBranchesBranchArrayInput interface {
	pulumi.Input

	ToGetBranchesBranchArrayOutput() GetBranchesBranchArrayOutput
	ToGetBranchesBranchArrayOutputWithContext(context.Context) GetBranchesBranchArrayOutput
}

type GetBranchesBranchArray []GetBranchesBranchInput

func (GetBranchesBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchesBranch)(nil)).Elem()
}

func (i GetBranchesBranchArray) ToGetBranchesBranchArrayOutput() GetBranchesBranchArrayOutput {
	return i.ToGetBranchesBranchArrayOutputWithContext(context.Background())
}

func (i GetBranchesBranchArray) ToGetBranchesBranchArrayOutputWithContext(ctx context.Context) GetBranchesBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchesBranchArrayOutput)
}

type GetBranchesBranchOutput struct{ *pulumi.OutputState }

func (GetBranchesBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranch)(nil)).Elem()
}

func (o GetBranchesBranchOutput) ToGetBranchesBranchOutput() GetBranchesBranchOutput {
	return o
}

func (o GetBranchesBranchOutput) ToGetBranchesBranchOutputWithContext(ctx context.Context) GetBranchesBranchOutput {
	return o
}

// The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
func (o GetBranchesBranchOutput) AccessHostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.AccessHostUrl }).(pulumi.StringOutput)
}

// The actor who created this branch.
func (o GetBranchesBranchOutput) Actor() GetBranchesBranchActorOutput {
	return o.ApplyT(func(v GetBranchesBranch) GetBranchesBranchActor { return v.Actor }).(GetBranchesBranchActorOutput)
}

// The SKU representing the branch's cluster size.
func (o GetBranchesBranchOutput) ClusterRateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.ClusterRateName }).(pulumi.StringOutput)
}

// When the branch was created.
func (o GetBranchesBranchOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The database this branch belongs to.
func (o GetBranchesBranchOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.Database }).(pulumi.StringOutput)
}

// Planetscale app URL for the branch.
func (o GetBranchesBranchOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The ID of the branch.
func (o GetBranchesBranchOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the backup from which the branch was restored.
func (o GetBranchesBranchOutput) InitialRestoreId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.InitialRestoreId }).(pulumi.StringOutput)
}

// The MySQL address for the branch.
func (o GetBranchesBranchOutput) MysqlAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.MysqlAddress }).(pulumi.StringOutput)
}

// The address of the MySQL provider for the branch.
func (o GetBranchesBranchOutput) MysqlEdgeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.MysqlEdgeAddress }).(pulumi.StringOutput)
}

// The name of the branch.
func (o GetBranchesBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.Name }).(pulumi.StringOutput)
}

// The organization this branch belongs to.
func (o GetBranchesBranchOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.Organization }).(pulumi.StringOutput)
}

// The name of the parent branch from which the branch was created.
func (o GetBranchesBranchOutput) ParentBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.ParentBranch }).(pulumi.StringOutput)
}

// Whether or not the branch is a production branch.
func (o GetBranchesBranchOutput) Production() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBranchesBranch) bool { return v.Production }).(pulumi.BoolOutput)
}

// Whether or not the branch is ready to serve queries.
func (o GetBranchesBranchOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBranchesBranch) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The region in which this branch lives.
func (o GetBranchesBranchOutput) Region() GetBranchesBranchRegionOutput {
	return o.ApplyT(func(v GetBranchesBranch) GetBranchesBranchRegion { return v.Region }).(GetBranchesBranchRegionOutput)
}

// When a user last marked a backup restore checklist as completed.
func (o GetBranchesBranchOutput) RestoreChecklistCompletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.RestoreChecklistCompletedAt }).(pulumi.StringOutput)
}

func (o GetBranchesBranchOutput) RestoredFromBranch() GetBranchesBranchRestoredFromBranchOutput {
	return o.ApplyT(func(v GetBranchesBranch) GetBranchesBranchRestoredFromBranch { return v.RestoredFromBranch }).(GetBranchesBranchRestoredFromBranchOutput)
}

// When the schema for the branch was last updated.
func (o GetBranchesBranchOutput) SchemaLastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.SchemaLastUpdatedAt }).(pulumi.StringOutput)
}

// The number of shards in the branch.
func (o GetBranchesBranchOutput) ShardCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetBranchesBranch) float64 { return v.ShardCount }).(pulumi.Float64Output)
}

// Whether or not the branch is sharded.
func (o GetBranchesBranchOutput) Sharded() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBranchesBranch) bool { return v.Sharded }).(pulumi.BoolOutput)
}

// When the branch was last updated.
func (o GetBranchesBranchOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranch) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetBranchesBranchArrayOutput struct{ *pulumi.OutputState }

func (GetBranchesBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchesBranch)(nil)).Elem()
}

func (o GetBranchesBranchArrayOutput) ToGetBranchesBranchArrayOutput() GetBranchesBranchArrayOutput {
	return o
}

func (o GetBranchesBranchArrayOutput) ToGetBranchesBranchArrayOutputWithContext(ctx context.Context) GetBranchesBranchArrayOutput {
	return o
}

func (o GetBranchesBranchArrayOutput) Index(i pulumi.IntInput) GetBranchesBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBranchesBranch {
		return vs[0].([]GetBranchesBranch)[vs[1].(int)]
	}).(GetBranchesBranchOutput)
}

type GetBranchesBranchActor struct {
	// The URL of the actor's avatar
	AvatarUrl string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName string `pulumi:"displayName"`
	// The ID of the actor
	Id string `pulumi:"id"`
}

// GetBranchesBranchActorInput is an input type that accepts GetBranchesBranchActorArgs and GetBranchesBranchActorOutput values.
// You can construct a concrete instance of `GetBranchesBranchActorInput` via:
//
//	GetBranchesBranchActorArgs{...}
type GetBranchesBranchActorInput interface {
	pulumi.Input

	ToGetBranchesBranchActorOutput() GetBranchesBranchActorOutput
	ToGetBranchesBranchActorOutputWithContext(context.Context) GetBranchesBranchActorOutput
}

type GetBranchesBranchActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBranchesBranchActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranchActor)(nil)).Elem()
}

func (i GetBranchesBranchActorArgs) ToGetBranchesBranchActorOutput() GetBranchesBranchActorOutput {
	return i.ToGetBranchesBranchActorOutputWithContext(context.Background())
}

func (i GetBranchesBranchActorArgs) ToGetBranchesBranchActorOutputWithContext(ctx context.Context) GetBranchesBranchActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchesBranchActorOutput)
}

type GetBranchesBranchActorOutput struct{ *pulumi.OutputState }

func (GetBranchesBranchActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranchActor)(nil)).Elem()
}

func (o GetBranchesBranchActorOutput) ToGetBranchesBranchActorOutput() GetBranchesBranchActorOutput {
	return o
}

func (o GetBranchesBranchActorOutput) ToGetBranchesBranchActorOutputWithContext(ctx context.Context) GetBranchesBranchActorOutput {
	return o
}

// The URL of the actor's avatar
func (o GetBranchesBranchActorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchActor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The name of the actor
func (o GetBranchesBranchActorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchActor) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the actor
func (o GetBranchesBranchActorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchActor) string { return v.Id }).(pulumi.StringOutput)
}

type GetBranchesBranchRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetBranchesBranchRegionInput is an input type that accepts GetBranchesBranchRegionArgs and GetBranchesBranchRegionOutput values.
// You can construct a concrete instance of `GetBranchesBranchRegionInput` via:
//
//	GetBranchesBranchRegionArgs{...}
type GetBranchesBranchRegionInput interface {
	pulumi.Input

	ToGetBranchesBranchRegionOutput() GetBranchesBranchRegionOutput
	ToGetBranchesBranchRegionOutputWithContext(context.Context) GetBranchesBranchRegionOutput
}

type GetBranchesBranchRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetBranchesBranchRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranchRegion)(nil)).Elem()
}

func (i GetBranchesBranchRegionArgs) ToGetBranchesBranchRegionOutput() GetBranchesBranchRegionOutput {
	return i.ToGetBranchesBranchRegionOutputWithContext(context.Background())
}

func (i GetBranchesBranchRegionArgs) ToGetBranchesBranchRegionOutputWithContext(ctx context.Context) GetBranchesBranchRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchesBranchRegionOutput)
}

type GetBranchesBranchRegionOutput struct{ *pulumi.OutputState }

func (GetBranchesBranchRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranchRegion)(nil)).Elem()
}

func (o GetBranchesBranchRegionOutput) ToGetBranchesBranchRegionOutput() GetBranchesBranchRegionOutput {
	return o
}

func (o GetBranchesBranchRegionOutput) ToGetBranchesBranchRegionOutputWithContext(ctx context.Context) GetBranchesBranchRegionOutput {
	return o
}

// Name of the region.
func (o GetBranchesBranchRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetBranchesBranchRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBranchesBranchRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetBranchesBranchRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetBranchesBranchRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetBranchesBranchRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetBranchesBranchRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBranchesBranchRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetBranchesBranchRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetBranchesBranchRestoredFromBranch struct {
	// When the resource was created.
	CreatedAt string `pulumi:"createdAt"`
	// When the resource was deleted, if deleted.
	DeletedAt string `pulumi:"deletedAt"`
	// The ID for the resource.
	Id string `pulumi:"id"`
	// The name for the resource.
	Name string `pulumi:"name"`
	// When the resource was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetBranchesBranchRestoredFromBranchInput is an input type that accepts GetBranchesBranchRestoredFromBranchArgs and GetBranchesBranchRestoredFromBranchOutput values.
// You can construct a concrete instance of `GetBranchesBranchRestoredFromBranchInput` via:
//
//	GetBranchesBranchRestoredFromBranchArgs{...}
type GetBranchesBranchRestoredFromBranchInput interface {
	pulumi.Input

	ToGetBranchesBranchRestoredFromBranchOutput() GetBranchesBranchRestoredFromBranchOutput
	ToGetBranchesBranchRestoredFromBranchOutputWithContext(context.Context) GetBranchesBranchRestoredFromBranchOutput
}

type GetBranchesBranchRestoredFromBranchArgs struct {
	// When the resource was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// When the resource was deleted, if deleted.
	DeletedAt pulumi.StringInput `pulumi:"deletedAt"`
	// The ID for the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The name for the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// When the resource was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetBranchesBranchRestoredFromBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranchRestoredFromBranch)(nil)).Elem()
}

func (i GetBranchesBranchRestoredFromBranchArgs) ToGetBranchesBranchRestoredFromBranchOutput() GetBranchesBranchRestoredFromBranchOutput {
	return i.ToGetBranchesBranchRestoredFromBranchOutputWithContext(context.Background())
}

func (i GetBranchesBranchRestoredFromBranchArgs) ToGetBranchesBranchRestoredFromBranchOutputWithContext(ctx context.Context) GetBranchesBranchRestoredFromBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchesBranchRestoredFromBranchOutput)
}

type GetBranchesBranchRestoredFromBranchOutput struct{ *pulumi.OutputState }

func (GetBranchesBranchRestoredFromBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchesBranchRestoredFromBranch)(nil)).Elem()
}

func (o GetBranchesBranchRestoredFromBranchOutput) ToGetBranchesBranchRestoredFromBranchOutput() GetBranchesBranchRestoredFromBranchOutput {
	return o
}

func (o GetBranchesBranchRestoredFromBranchOutput) ToGetBranchesBranchRestoredFromBranchOutputWithContext(ctx context.Context) GetBranchesBranchRestoredFromBranchOutput {
	return o
}

// When the resource was created.
func (o GetBranchesBranchRestoredFromBranchOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRestoredFromBranch) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// When the resource was deleted, if deleted.
func (o GetBranchesBranchRestoredFromBranchOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRestoredFromBranch) string { return v.DeletedAt }).(pulumi.StringOutput)
}

// The ID for the resource.
func (o GetBranchesBranchRestoredFromBranchOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRestoredFromBranch) string { return v.Id }).(pulumi.StringOutput)
}

// The name for the resource.
func (o GetBranchesBranchRestoredFromBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRestoredFromBranch) string { return v.Name }).(pulumi.StringOutput)
}

// When the resource was last updated.
func (o GetBranchesBranchRestoredFromBranchOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchesBranchRestoredFromBranch) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetDatabaseDataImport struct {
	// Connection information for the source of the data for the import.
	DataSource GetDatabaseDataImportDataSource `pulumi:"dataSource"`
	// When the import finished.
	FinishedAt string `pulumi:"finishedAt"`
	// Errors encountered while preparing the import.
	ImportCheckErrors string `pulumi:"importCheckErrors"`
	// When the import started.
	StartedAt string `pulumi:"startedAt"`
	// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
	State string `pulumi:"state"`
}

// GetDatabaseDataImportInput is an input type that accepts GetDatabaseDataImportArgs and GetDatabaseDataImportOutput values.
// You can construct a concrete instance of `GetDatabaseDataImportInput` via:
//
//	GetDatabaseDataImportArgs{...}
type GetDatabaseDataImportInput interface {
	pulumi.Input

	ToGetDatabaseDataImportOutput() GetDatabaseDataImportOutput
	ToGetDatabaseDataImportOutputWithContext(context.Context) GetDatabaseDataImportOutput
}

type GetDatabaseDataImportArgs struct {
	// Connection information for the source of the data for the import.
	DataSource GetDatabaseDataImportDataSourceInput `pulumi:"dataSource"`
	// When the import finished.
	FinishedAt pulumi.StringInput `pulumi:"finishedAt"`
	// Errors encountered while preparing the import.
	ImportCheckErrors pulumi.StringInput `pulumi:"importCheckErrors"`
	// When the import started.
	StartedAt pulumi.StringInput `pulumi:"startedAt"`
	// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetDatabaseDataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseDataImport)(nil)).Elem()
}

func (i GetDatabaseDataImportArgs) ToGetDatabaseDataImportOutput() GetDatabaseDataImportOutput {
	return i.ToGetDatabaseDataImportOutputWithContext(context.Background())
}

func (i GetDatabaseDataImportArgs) ToGetDatabaseDataImportOutputWithContext(ctx context.Context) GetDatabaseDataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseDataImportOutput)
}

func (i GetDatabaseDataImportArgs) ToGetDatabaseDataImportPtrOutput() GetDatabaseDataImportPtrOutput {
	return i.ToGetDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (i GetDatabaseDataImportArgs) ToGetDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabaseDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseDataImportOutput).ToGetDatabaseDataImportPtrOutputWithContext(ctx)
}

// GetDatabaseDataImportPtrInput is an input type that accepts GetDatabaseDataImportArgs, GetDatabaseDataImportPtr and GetDatabaseDataImportPtrOutput values.
// You can construct a concrete instance of `GetDatabaseDataImportPtrInput` via:
//
//	        GetDatabaseDataImportArgs{...}
//
//	or:
//
//	        nil
type GetDatabaseDataImportPtrInput interface {
	pulumi.Input

	ToGetDatabaseDataImportPtrOutput() GetDatabaseDataImportPtrOutput
	ToGetDatabaseDataImportPtrOutputWithContext(context.Context) GetDatabaseDataImportPtrOutput
}

type getDatabaseDataImportPtrType GetDatabaseDataImportArgs

func GetDatabaseDataImportPtr(v *GetDatabaseDataImportArgs) GetDatabaseDataImportPtrInput {
	return (*getDatabaseDataImportPtrType)(v)
}

func (*getDatabaseDataImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseDataImport)(nil)).Elem()
}

func (i *getDatabaseDataImportPtrType) ToGetDatabaseDataImportPtrOutput() GetDatabaseDataImportPtrOutput {
	return i.ToGetDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (i *getDatabaseDataImportPtrType) ToGetDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabaseDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseDataImportPtrOutput)
}

type GetDatabaseDataImportOutput struct{ *pulumi.OutputState }

func (GetDatabaseDataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseDataImport)(nil)).Elem()
}

func (o GetDatabaseDataImportOutput) ToGetDatabaseDataImportOutput() GetDatabaseDataImportOutput {
	return o
}

func (o GetDatabaseDataImportOutput) ToGetDatabaseDataImportOutputWithContext(ctx context.Context) GetDatabaseDataImportOutput {
	return o
}

func (o GetDatabaseDataImportOutput) ToGetDatabaseDataImportPtrOutput() GetDatabaseDataImportPtrOutput {
	return o.ToGetDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (o GetDatabaseDataImportOutput) ToGetDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabaseDataImportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatabaseDataImport) *GetDatabaseDataImport {
		return &v
	}).(GetDatabaseDataImportPtrOutput)
}

// Connection information for the source of the data for the import.
func (o GetDatabaseDataImportOutput) DataSource() GetDatabaseDataImportDataSourceOutput {
	return o.ApplyT(func(v GetDatabaseDataImport) GetDatabaseDataImportDataSource { return v.DataSource }).(GetDatabaseDataImportDataSourceOutput)
}

// When the import finished.
func (o GetDatabaseDataImportOutput) FinishedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseDataImport) string { return v.FinishedAt }).(pulumi.StringOutput)
}

// Errors encountered while preparing the import.
func (o GetDatabaseDataImportOutput) ImportCheckErrors() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseDataImport) string { return v.ImportCheckErrors }).(pulumi.StringOutput)
}

// When the import started.
func (o GetDatabaseDataImportOutput) StartedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseDataImport) string { return v.StartedAt }).(pulumi.StringOutput)
}

// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
func (o GetDatabaseDataImportOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseDataImport) string { return v.State }).(pulumi.StringOutput)
}

type GetDatabaseDataImportPtrOutput struct{ *pulumi.OutputState }

func (GetDatabaseDataImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseDataImport)(nil)).Elem()
}

func (o GetDatabaseDataImportPtrOutput) ToGetDatabaseDataImportPtrOutput() GetDatabaseDataImportPtrOutput {
	return o
}

func (o GetDatabaseDataImportPtrOutput) ToGetDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabaseDataImportPtrOutput {
	return o
}

func (o GetDatabaseDataImportPtrOutput) Elem() GetDatabaseDataImportOutput {
	return o.ApplyT(func(v *GetDatabaseDataImport) GetDatabaseDataImport {
		if v != nil {
			return *v
		}
		var ret GetDatabaseDataImport
		return ret
	}).(GetDatabaseDataImportOutput)
}

// Connection information for the source of the data for the import.
func (o GetDatabaseDataImportPtrOutput) DataSource() GetDatabaseDataImportDataSourcePtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImport) *GetDatabaseDataImportDataSource {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(GetDatabaseDataImportDataSourcePtrOutput)
}

// When the import finished.
func (o GetDatabaseDataImportPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Errors encountered while preparing the import.
func (o GetDatabaseDataImportPtrOutput) ImportCheckErrors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.ImportCheckErrors
	}).(pulumi.StringPtrOutput)
}

// When the import started.
func (o GetDatabaseDataImportPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
func (o GetDatabaseDataImportPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

type GetDatabaseDataImportDataSource struct {
	// The name of the database imported from.
	Database string `pulumi:"database"`
	// The hostname where the database lives.
	Hostname string `pulumi:"hostname"`
	// The port on which the database listens on the host.
	Port string `pulumi:"port"`
}

// GetDatabaseDataImportDataSourceInput is an input type that accepts GetDatabaseDataImportDataSourceArgs and GetDatabaseDataImportDataSourceOutput values.
// You can construct a concrete instance of `GetDatabaseDataImportDataSourceInput` via:
//
//	GetDatabaseDataImportDataSourceArgs{...}
type GetDatabaseDataImportDataSourceInput interface {
	pulumi.Input

	ToGetDatabaseDataImportDataSourceOutput() GetDatabaseDataImportDataSourceOutput
	ToGetDatabaseDataImportDataSourceOutputWithContext(context.Context) GetDatabaseDataImportDataSourceOutput
}

type GetDatabaseDataImportDataSourceArgs struct {
	// The name of the database imported from.
	Database pulumi.StringInput `pulumi:"database"`
	// The hostname where the database lives.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port on which the database listens on the host.
	Port pulumi.StringInput `pulumi:"port"`
}

func (GetDatabaseDataImportDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseDataImportDataSource)(nil)).Elem()
}

func (i GetDatabaseDataImportDataSourceArgs) ToGetDatabaseDataImportDataSourceOutput() GetDatabaseDataImportDataSourceOutput {
	return i.ToGetDatabaseDataImportDataSourceOutputWithContext(context.Background())
}

func (i GetDatabaseDataImportDataSourceArgs) ToGetDatabaseDataImportDataSourceOutputWithContext(ctx context.Context) GetDatabaseDataImportDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseDataImportDataSourceOutput)
}

func (i GetDatabaseDataImportDataSourceArgs) ToGetDatabaseDataImportDataSourcePtrOutput() GetDatabaseDataImportDataSourcePtrOutput {
	return i.ToGetDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (i GetDatabaseDataImportDataSourceArgs) ToGetDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabaseDataImportDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseDataImportDataSourceOutput).ToGetDatabaseDataImportDataSourcePtrOutputWithContext(ctx)
}

// GetDatabaseDataImportDataSourcePtrInput is an input type that accepts GetDatabaseDataImportDataSourceArgs, GetDatabaseDataImportDataSourcePtr and GetDatabaseDataImportDataSourcePtrOutput values.
// You can construct a concrete instance of `GetDatabaseDataImportDataSourcePtrInput` via:
//
//	        GetDatabaseDataImportDataSourceArgs{...}
//
//	or:
//
//	        nil
type GetDatabaseDataImportDataSourcePtrInput interface {
	pulumi.Input

	ToGetDatabaseDataImportDataSourcePtrOutput() GetDatabaseDataImportDataSourcePtrOutput
	ToGetDatabaseDataImportDataSourcePtrOutputWithContext(context.Context) GetDatabaseDataImportDataSourcePtrOutput
}

type getDatabaseDataImportDataSourcePtrType GetDatabaseDataImportDataSourceArgs

func GetDatabaseDataImportDataSourcePtr(v *GetDatabaseDataImportDataSourceArgs) GetDatabaseDataImportDataSourcePtrInput {
	return (*getDatabaseDataImportDataSourcePtrType)(v)
}

func (*getDatabaseDataImportDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseDataImportDataSource)(nil)).Elem()
}

func (i *getDatabaseDataImportDataSourcePtrType) ToGetDatabaseDataImportDataSourcePtrOutput() GetDatabaseDataImportDataSourcePtrOutput {
	return i.ToGetDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (i *getDatabaseDataImportDataSourcePtrType) ToGetDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabaseDataImportDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseDataImportDataSourcePtrOutput)
}

type GetDatabaseDataImportDataSourceOutput struct{ *pulumi.OutputState }

func (GetDatabaseDataImportDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseDataImportDataSource)(nil)).Elem()
}

func (o GetDatabaseDataImportDataSourceOutput) ToGetDatabaseDataImportDataSourceOutput() GetDatabaseDataImportDataSourceOutput {
	return o
}

func (o GetDatabaseDataImportDataSourceOutput) ToGetDatabaseDataImportDataSourceOutputWithContext(ctx context.Context) GetDatabaseDataImportDataSourceOutput {
	return o
}

func (o GetDatabaseDataImportDataSourceOutput) ToGetDatabaseDataImportDataSourcePtrOutput() GetDatabaseDataImportDataSourcePtrOutput {
	return o.ToGetDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (o GetDatabaseDataImportDataSourceOutput) ToGetDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabaseDataImportDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatabaseDataImportDataSource) *GetDatabaseDataImportDataSource {
		return &v
	}).(GetDatabaseDataImportDataSourcePtrOutput)
}

// The name of the database imported from.
func (o GetDatabaseDataImportDataSourceOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseDataImportDataSource) string { return v.Database }).(pulumi.StringOutput)
}

// The hostname where the database lives.
func (o GetDatabaseDataImportDataSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseDataImportDataSource) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port on which the database listens on the host.
func (o GetDatabaseDataImportDataSourceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseDataImportDataSource) string { return v.Port }).(pulumi.StringOutput)
}

type GetDatabaseDataImportDataSourcePtrOutput struct{ *pulumi.OutputState }

func (GetDatabaseDataImportDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseDataImportDataSource)(nil)).Elem()
}

func (o GetDatabaseDataImportDataSourcePtrOutput) ToGetDatabaseDataImportDataSourcePtrOutput() GetDatabaseDataImportDataSourcePtrOutput {
	return o
}

func (o GetDatabaseDataImportDataSourcePtrOutput) ToGetDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabaseDataImportDataSourcePtrOutput {
	return o
}

func (o GetDatabaseDataImportDataSourcePtrOutput) Elem() GetDatabaseDataImportDataSourceOutput {
	return o.ApplyT(func(v *GetDatabaseDataImportDataSource) GetDatabaseDataImportDataSource {
		if v != nil {
			return *v
		}
		var ret GetDatabaseDataImportDataSource
		return ret
	}).(GetDatabaseDataImportDataSourceOutput)
}

// The name of the database imported from.
func (o GetDatabaseDataImportDataSourcePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The hostname where the database lives.
func (o GetDatabaseDataImportDataSourcePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The port on which the database listens on the host.
func (o GetDatabaseDataImportDataSourcePtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.StringPtrOutput)
}

type GetDatabaseReadOnlyRegionsRegion struct {
	// The actor that created the read-only region.
	Actor GetDatabaseReadOnlyRegionsRegionActor `pulumi:"actor"`
	// When the read-only region was created.
	CreatedAt string `pulumi:"createdAt"`
	// The name of the read-only region.
	DisplayName string `pulumi:"displayName"`
	// The ID of the read-only region.
	Id string `pulumi:"id"`
	// Whether or not the read-only region is ready to serve queries.
	Ready bool `pulumi:"ready"`
	// When the read-only region was ready to serve queries.
	ReadyAt string `pulumi:"readyAt"`
	// The details of the read-only region.
	Region GetDatabaseReadOnlyRegionsRegionRegion `pulumi:"region"`
	// When the read-only region was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetDatabaseReadOnlyRegionsRegionInput is an input type that accepts GetDatabaseReadOnlyRegionsRegionArgs and GetDatabaseReadOnlyRegionsRegionOutput values.
// You can construct a concrete instance of `GetDatabaseReadOnlyRegionsRegionInput` via:
//
//	GetDatabaseReadOnlyRegionsRegionArgs{...}
type GetDatabaseReadOnlyRegionsRegionInput interface {
	pulumi.Input

	ToGetDatabaseReadOnlyRegionsRegionOutput() GetDatabaseReadOnlyRegionsRegionOutput
	ToGetDatabaseReadOnlyRegionsRegionOutputWithContext(context.Context) GetDatabaseReadOnlyRegionsRegionOutput
}

type GetDatabaseReadOnlyRegionsRegionArgs struct {
	// The actor that created the read-only region.
	Actor GetDatabaseReadOnlyRegionsRegionActorInput `pulumi:"actor"`
	// When the read-only region was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The name of the read-only region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the read-only region.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether or not the read-only region is ready to serve queries.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// When the read-only region was ready to serve queries.
	ReadyAt pulumi.StringInput `pulumi:"readyAt"`
	// The details of the read-only region.
	Region GetDatabaseReadOnlyRegionsRegionRegionInput `pulumi:"region"`
	// When the read-only region was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetDatabaseReadOnlyRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegion)(nil)).Elem()
}

func (i GetDatabaseReadOnlyRegionsRegionArgs) ToGetDatabaseReadOnlyRegionsRegionOutput() GetDatabaseReadOnlyRegionsRegionOutput {
	return i.ToGetDatabaseReadOnlyRegionsRegionOutputWithContext(context.Background())
}

func (i GetDatabaseReadOnlyRegionsRegionArgs) ToGetDatabaseReadOnlyRegionsRegionOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseReadOnlyRegionsRegionOutput)
}

// GetDatabaseReadOnlyRegionsRegionArrayInput is an input type that accepts GetDatabaseReadOnlyRegionsRegionArray and GetDatabaseReadOnlyRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetDatabaseReadOnlyRegionsRegionArrayInput` via:
//
//	GetDatabaseReadOnlyRegionsRegionArray{ GetDatabaseReadOnlyRegionsRegionArgs{...} }
type GetDatabaseReadOnlyRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetDatabaseReadOnlyRegionsRegionArrayOutput() GetDatabaseReadOnlyRegionsRegionArrayOutput
	ToGetDatabaseReadOnlyRegionsRegionArrayOutputWithContext(context.Context) GetDatabaseReadOnlyRegionsRegionArrayOutput
}

type GetDatabaseReadOnlyRegionsRegionArray []GetDatabaseReadOnlyRegionsRegionInput

func (GetDatabaseReadOnlyRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseReadOnlyRegionsRegion)(nil)).Elem()
}

func (i GetDatabaseReadOnlyRegionsRegionArray) ToGetDatabaseReadOnlyRegionsRegionArrayOutput() GetDatabaseReadOnlyRegionsRegionArrayOutput {
	return i.ToGetDatabaseReadOnlyRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetDatabaseReadOnlyRegionsRegionArray) ToGetDatabaseReadOnlyRegionsRegionArrayOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseReadOnlyRegionsRegionArrayOutput)
}

type GetDatabaseReadOnlyRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetDatabaseReadOnlyRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegion)(nil)).Elem()
}

func (o GetDatabaseReadOnlyRegionsRegionOutput) ToGetDatabaseReadOnlyRegionsRegionOutput() GetDatabaseReadOnlyRegionsRegionOutput {
	return o
}

func (o GetDatabaseReadOnlyRegionsRegionOutput) ToGetDatabaseReadOnlyRegionsRegionOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionOutput {
	return o
}

// The actor that created the read-only region.
func (o GetDatabaseReadOnlyRegionsRegionOutput) Actor() GetDatabaseReadOnlyRegionsRegionActorOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) GetDatabaseReadOnlyRegionsRegionActor { return v.Actor }).(GetDatabaseReadOnlyRegionsRegionActorOutput)
}

// When the read-only region was created.
func (o GetDatabaseReadOnlyRegionsRegionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the read-only region.
func (o GetDatabaseReadOnlyRegionsRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the read-only region.
func (o GetDatabaseReadOnlyRegionsRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Whether or not the read-only region is ready to serve queries.
func (o GetDatabaseReadOnlyRegionsRegionOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) bool { return v.Ready }).(pulumi.BoolOutput)
}

// When the read-only region was ready to serve queries.
func (o GetDatabaseReadOnlyRegionsRegionOutput) ReadyAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) string { return v.ReadyAt }).(pulumi.StringOutput)
}

// The details of the read-only region.
func (o GetDatabaseReadOnlyRegionsRegionOutput) Region() GetDatabaseReadOnlyRegionsRegionRegionOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) GetDatabaseReadOnlyRegionsRegionRegion { return v.Region }).(GetDatabaseReadOnlyRegionsRegionRegionOutput)
}

// When the read-only region was last updated.
func (o GetDatabaseReadOnlyRegionsRegionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegion) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetDatabaseReadOnlyRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseReadOnlyRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseReadOnlyRegionsRegion)(nil)).Elem()
}

func (o GetDatabaseReadOnlyRegionsRegionArrayOutput) ToGetDatabaseReadOnlyRegionsRegionArrayOutput() GetDatabaseReadOnlyRegionsRegionArrayOutput {
	return o
}

func (o GetDatabaseReadOnlyRegionsRegionArrayOutput) ToGetDatabaseReadOnlyRegionsRegionArrayOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionArrayOutput {
	return o
}

func (o GetDatabaseReadOnlyRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetDatabaseReadOnlyRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseReadOnlyRegionsRegion {
		return vs[0].([]GetDatabaseReadOnlyRegionsRegion)[vs[1].(int)]
	}).(GetDatabaseReadOnlyRegionsRegionOutput)
}

type GetDatabaseReadOnlyRegionsRegionActor struct {
	// The URL of the actor's avatar
	AvatarUrl string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName string `pulumi:"displayName"`
	// The ID of the actor
	Id string `pulumi:"id"`
}

// GetDatabaseReadOnlyRegionsRegionActorInput is an input type that accepts GetDatabaseReadOnlyRegionsRegionActorArgs and GetDatabaseReadOnlyRegionsRegionActorOutput values.
// You can construct a concrete instance of `GetDatabaseReadOnlyRegionsRegionActorInput` via:
//
//	GetDatabaseReadOnlyRegionsRegionActorArgs{...}
type GetDatabaseReadOnlyRegionsRegionActorInput interface {
	pulumi.Input

	ToGetDatabaseReadOnlyRegionsRegionActorOutput() GetDatabaseReadOnlyRegionsRegionActorOutput
	ToGetDatabaseReadOnlyRegionsRegionActorOutputWithContext(context.Context) GetDatabaseReadOnlyRegionsRegionActorOutput
}

type GetDatabaseReadOnlyRegionsRegionActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetDatabaseReadOnlyRegionsRegionActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionActor)(nil)).Elem()
}

func (i GetDatabaseReadOnlyRegionsRegionActorArgs) ToGetDatabaseReadOnlyRegionsRegionActorOutput() GetDatabaseReadOnlyRegionsRegionActorOutput {
	return i.ToGetDatabaseReadOnlyRegionsRegionActorOutputWithContext(context.Background())
}

func (i GetDatabaseReadOnlyRegionsRegionActorArgs) ToGetDatabaseReadOnlyRegionsRegionActorOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseReadOnlyRegionsRegionActorOutput)
}

type GetDatabaseReadOnlyRegionsRegionActorOutput struct{ *pulumi.OutputState }

func (GetDatabaseReadOnlyRegionsRegionActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionActor)(nil)).Elem()
}

func (o GetDatabaseReadOnlyRegionsRegionActorOutput) ToGetDatabaseReadOnlyRegionsRegionActorOutput() GetDatabaseReadOnlyRegionsRegionActorOutput {
	return o
}

func (o GetDatabaseReadOnlyRegionsRegionActorOutput) ToGetDatabaseReadOnlyRegionsRegionActorOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionActorOutput {
	return o
}

// The URL of the actor's avatar
func (o GetDatabaseReadOnlyRegionsRegionActorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionActor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The name of the actor
func (o GetDatabaseReadOnlyRegionsRegionActorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionActor) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the actor
func (o GetDatabaseReadOnlyRegionsRegionActorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionActor) string { return v.Id }).(pulumi.StringOutput)
}

type GetDatabaseReadOnlyRegionsRegionRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetDatabaseReadOnlyRegionsRegionRegionInput is an input type that accepts GetDatabaseReadOnlyRegionsRegionRegionArgs and GetDatabaseReadOnlyRegionsRegionRegionOutput values.
// You can construct a concrete instance of `GetDatabaseReadOnlyRegionsRegionRegionInput` via:
//
//	GetDatabaseReadOnlyRegionsRegionRegionArgs{...}
type GetDatabaseReadOnlyRegionsRegionRegionInput interface {
	pulumi.Input

	ToGetDatabaseReadOnlyRegionsRegionRegionOutput() GetDatabaseReadOnlyRegionsRegionRegionOutput
	ToGetDatabaseReadOnlyRegionsRegionRegionOutputWithContext(context.Context) GetDatabaseReadOnlyRegionsRegionRegionOutput
}

type GetDatabaseReadOnlyRegionsRegionRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetDatabaseReadOnlyRegionsRegionRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionRegion)(nil)).Elem()
}

func (i GetDatabaseReadOnlyRegionsRegionRegionArgs) ToGetDatabaseReadOnlyRegionsRegionRegionOutput() GetDatabaseReadOnlyRegionsRegionRegionOutput {
	return i.ToGetDatabaseReadOnlyRegionsRegionRegionOutputWithContext(context.Background())
}

func (i GetDatabaseReadOnlyRegionsRegionRegionArgs) ToGetDatabaseReadOnlyRegionsRegionRegionOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseReadOnlyRegionsRegionRegionOutput)
}

type GetDatabaseReadOnlyRegionsRegionRegionOutput struct{ *pulumi.OutputState }

func (GetDatabaseReadOnlyRegionsRegionRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionRegion)(nil)).Elem()
}

func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) ToGetDatabaseReadOnlyRegionsRegionRegionOutput() GetDatabaseReadOnlyRegionsRegionRegionOutput {
	return o
}

func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) ToGetDatabaseReadOnlyRegionsRegionRegionOutputWithContext(ctx context.Context) GetDatabaseReadOnlyRegionsRegionRegionOutput {
	return o
}

// Name of the region.
func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetDatabaseReadOnlyRegionsRegionRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseReadOnlyRegionsRegionRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetDatabaseRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetDatabaseRegionInput is an input type that accepts GetDatabaseRegionArgs and GetDatabaseRegionOutput values.
// You can construct a concrete instance of `GetDatabaseRegionInput` via:
//
//	GetDatabaseRegionArgs{...}
type GetDatabaseRegionInput interface {
	pulumi.Input

	ToGetDatabaseRegionOutput() GetDatabaseRegionOutput
	ToGetDatabaseRegionOutputWithContext(context.Context) GetDatabaseRegionOutput
}

type GetDatabaseRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetDatabaseRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRegion)(nil)).Elem()
}

func (i GetDatabaseRegionArgs) ToGetDatabaseRegionOutput() GetDatabaseRegionOutput {
	return i.ToGetDatabaseRegionOutputWithContext(context.Background())
}

func (i GetDatabaseRegionArgs) ToGetDatabaseRegionOutputWithContext(ctx context.Context) GetDatabaseRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRegionOutput)
}

func (i GetDatabaseRegionArgs) ToGetDatabaseRegionPtrOutput() GetDatabaseRegionPtrOutput {
	return i.ToGetDatabaseRegionPtrOutputWithContext(context.Background())
}

func (i GetDatabaseRegionArgs) ToGetDatabaseRegionPtrOutputWithContext(ctx context.Context) GetDatabaseRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRegionOutput).ToGetDatabaseRegionPtrOutputWithContext(ctx)
}

// GetDatabaseRegionPtrInput is an input type that accepts GetDatabaseRegionArgs, GetDatabaseRegionPtr and GetDatabaseRegionPtrOutput values.
// You can construct a concrete instance of `GetDatabaseRegionPtrInput` via:
//
//	        GetDatabaseRegionArgs{...}
//
//	or:
//
//	        nil
type GetDatabaseRegionPtrInput interface {
	pulumi.Input

	ToGetDatabaseRegionPtrOutput() GetDatabaseRegionPtrOutput
	ToGetDatabaseRegionPtrOutputWithContext(context.Context) GetDatabaseRegionPtrOutput
}

type getDatabaseRegionPtrType GetDatabaseRegionArgs

func GetDatabaseRegionPtr(v *GetDatabaseRegionArgs) GetDatabaseRegionPtrInput {
	return (*getDatabaseRegionPtrType)(v)
}

func (*getDatabaseRegionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseRegion)(nil)).Elem()
}

func (i *getDatabaseRegionPtrType) ToGetDatabaseRegionPtrOutput() GetDatabaseRegionPtrOutput {
	return i.ToGetDatabaseRegionPtrOutputWithContext(context.Background())
}

func (i *getDatabaseRegionPtrType) ToGetDatabaseRegionPtrOutputWithContext(ctx context.Context) GetDatabaseRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRegionPtrOutput)
}

type GetDatabaseRegionOutput struct{ *pulumi.OutputState }

func (GetDatabaseRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRegion)(nil)).Elem()
}

func (o GetDatabaseRegionOutput) ToGetDatabaseRegionOutput() GetDatabaseRegionOutput {
	return o
}

func (o GetDatabaseRegionOutput) ToGetDatabaseRegionOutputWithContext(ctx context.Context) GetDatabaseRegionOutput {
	return o
}

func (o GetDatabaseRegionOutput) ToGetDatabaseRegionPtrOutput() GetDatabaseRegionPtrOutput {
	return o.ToGetDatabaseRegionPtrOutputWithContext(context.Background())
}

func (o GetDatabaseRegionOutput) ToGetDatabaseRegionPtrOutputWithContext(ctx context.Context) GetDatabaseRegionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatabaseRegion) *GetDatabaseRegion {
		return &v
	}).(GetDatabaseRegionPtrOutput)
}

// Name of the region.
func (o GetDatabaseRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetDatabaseRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabaseRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetDatabaseRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetDatabaseRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetDatabaseRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetDatabaseRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabaseRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetDatabaseRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetDatabaseRegionPtrOutput struct{ *pulumi.OutputState }

func (GetDatabaseRegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseRegion)(nil)).Elem()
}

func (o GetDatabaseRegionPtrOutput) ToGetDatabaseRegionPtrOutput() GetDatabaseRegionPtrOutput {
	return o
}

func (o GetDatabaseRegionPtrOutput) ToGetDatabaseRegionPtrOutputWithContext(ctx context.Context) GetDatabaseRegionPtrOutput {
	return o
}

func (o GetDatabaseRegionPtrOutput) Elem() GetDatabaseRegionOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) GetDatabaseRegion {
		if v != nil {
			return *v
		}
		var ret GetDatabaseRegion
		return ret
	}).(GetDatabaseRegionOutput)
}

// Name of the region.
func (o GetDatabaseRegionPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) *string {
		if v == nil {
			return nil
		}
		return &v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Whether or not the region is currently active.
func (o GetDatabaseRegionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The ID of the region.
func (o GetDatabaseRegionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Location of the region.
func (o GetDatabaseRegionPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Provider for the region (ex. AWS).
func (o GetDatabaseRegionPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Provider
	}).(pulumi.StringPtrOutput)
}

// Public IP addresses for the region.
func (o GetDatabaseRegionPtrOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) []string {
		if v == nil {
			return nil
		}
		return v.PublicIpAddresses
	}).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetDatabaseRegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

type GetDatabaseRegionsRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetDatabaseRegionsRegionInput is an input type that accepts GetDatabaseRegionsRegionArgs and GetDatabaseRegionsRegionOutput values.
// You can construct a concrete instance of `GetDatabaseRegionsRegionInput` via:
//
//	GetDatabaseRegionsRegionArgs{...}
type GetDatabaseRegionsRegionInput interface {
	pulumi.Input

	ToGetDatabaseRegionsRegionOutput() GetDatabaseRegionsRegionOutput
	ToGetDatabaseRegionsRegionOutputWithContext(context.Context) GetDatabaseRegionsRegionOutput
}

type GetDatabaseRegionsRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetDatabaseRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRegionsRegion)(nil)).Elem()
}

func (i GetDatabaseRegionsRegionArgs) ToGetDatabaseRegionsRegionOutput() GetDatabaseRegionsRegionOutput {
	return i.ToGetDatabaseRegionsRegionOutputWithContext(context.Background())
}

func (i GetDatabaseRegionsRegionArgs) ToGetDatabaseRegionsRegionOutputWithContext(ctx context.Context) GetDatabaseRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRegionsRegionOutput)
}

// GetDatabaseRegionsRegionArrayInput is an input type that accepts GetDatabaseRegionsRegionArray and GetDatabaseRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetDatabaseRegionsRegionArrayInput` via:
//
//	GetDatabaseRegionsRegionArray{ GetDatabaseRegionsRegionArgs{...} }
type GetDatabaseRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetDatabaseRegionsRegionArrayOutput() GetDatabaseRegionsRegionArrayOutput
	ToGetDatabaseRegionsRegionArrayOutputWithContext(context.Context) GetDatabaseRegionsRegionArrayOutput
}

type GetDatabaseRegionsRegionArray []GetDatabaseRegionsRegionInput

func (GetDatabaseRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRegionsRegion)(nil)).Elem()
}

func (i GetDatabaseRegionsRegionArray) ToGetDatabaseRegionsRegionArrayOutput() GetDatabaseRegionsRegionArrayOutput {
	return i.ToGetDatabaseRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetDatabaseRegionsRegionArray) ToGetDatabaseRegionsRegionArrayOutputWithContext(ctx context.Context) GetDatabaseRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRegionsRegionArrayOutput)
}

type GetDatabaseRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetDatabaseRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRegionsRegion)(nil)).Elem()
}

func (o GetDatabaseRegionsRegionOutput) ToGetDatabaseRegionsRegionOutput() GetDatabaseRegionsRegionOutput {
	return o
}

func (o GetDatabaseRegionsRegionOutput) ToGetDatabaseRegionsRegionOutputWithContext(ctx context.Context) GetDatabaseRegionsRegionOutput {
	return o
}

// Name of the region.
func (o GetDatabaseRegionsRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegionsRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetDatabaseRegionsRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabaseRegionsRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetDatabaseRegionsRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegionsRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetDatabaseRegionsRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegionsRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetDatabaseRegionsRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegionsRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetDatabaseRegionsRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabaseRegionsRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetDatabaseRegionsRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRegionsRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetDatabaseRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRegionsRegion)(nil)).Elem()
}

func (o GetDatabaseRegionsRegionArrayOutput) ToGetDatabaseRegionsRegionArrayOutput() GetDatabaseRegionsRegionArrayOutput {
	return o
}

func (o GetDatabaseRegionsRegionArrayOutput) ToGetDatabaseRegionsRegionArrayOutputWithContext(ctx context.Context) GetDatabaseRegionsRegionArrayOutput {
	return o
}

func (o GetDatabaseRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetDatabaseRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseRegionsRegion {
		return vs[0].([]GetDatabaseRegionsRegion)[vs[1].(int)]
	}).(GetDatabaseRegionsRegionOutput)
}

type GetDatabasesDatabase struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching bool `pulumi:"allowDataBranching"`
	// If the database has reached its backup restored branch limit.
	AtBackupRestoreBranchesLimit bool `pulumi:"atBackupRestoreBranchesLimit"`
	// If the database has reached its development branch limit.
	AtDevelopmentBranchLimit bool `pulumi:"atDevelopmentBranchLimit"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations bool `pulumi:"automaticMigrations"`
	// The total number of database branches.
	BranchesCount float64 `pulumi:"branchesCount"`
	// The URL to retrieve this database's branches via the API.
	BranchesUrl string `pulumi:"branchesUrl"`
	// When the database was created.
	CreatedAt string `pulumi:"createdAt"`
	// If the database was created from an import, describes the import process.
	DataImport *GetDatabasesDatabaseDataImport `pulumi:"dataImport"`
	// The default branch for the database.
	DefaultBranch string `pulumi:"defaultBranch"`
	// Number of read only regions in the default branch.
	DefaultBranchReadOnlyRegionsCount float64 `pulumi:"defaultBranchReadOnlyRegionsCount"`
	// Number of shards in the default branch.
	DefaultBranchShardCount float64 `pulumi:"defaultBranchShardCount"`
	// Number of tables in the default branch schema.
	DefaultBranchTableCount float64 `pulumi:"defaultBranchTableCount"`
	// The total number of database development branches.
	DevelopmentBranchesCount float64 `pulumi:"developmentBranchesCount"`
	// The total number of database development branches.
	HtmlUrl string `pulumi:"htmlUrl"`
	// The ID of the database.
	Id string `pulumi:"id"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries bool `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount float64 `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework string `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName string `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion bool `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name string `pulumi:"name"`
	// The organization this database belongs to.
	Organization string `pulumi:"organization"`
	// The database plan.
	Plan string `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole bool `pulumi:"productionBranchWebConsole"`
	// The total number of database production branches.
	ProductionBranchesCount float64 `pulumi:"productionBranchesCount"`
	// If the database is ready to be used.
	Ready bool `pulumi:"ready"`
	// The region the database lives in.
	Region GetDatabasesDatabaseRegion `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy bool `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion bool `pulumi:"restrictBranchRegion"`
	// When the default branch schema was last changed.
	SchemaLastUpdatedAt string `pulumi:"schemaLastUpdatedAt"`
	// If the database is sharded.
	Sharded bool `pulumi:"sharded"`
	// State of the database.
	State string `pulumi:"state"`
	// When the database was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The URL to the database API endpoint.
	Url string `pulumi:"url"`
}

// GetDatabasesDatabaseInput is an input type that accepts GetDatabasesDatabaseArgs and GetDatabasesDatabaseOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseInput` via:
//
//	GetDatabasesDatabaseArgs{...}
type GetDatabasesDatabaseInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput
	ToGetDatabasesDatabaseOutputWithContext(context.Context) GetDatabasesDatabaseOutput
}

type GetDatabasesDatabaseArgs struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching pulumi.BoolInput `pulumi:"allowDataBranching"`
	// If the database has reached its backup restored branch limit.
	AtBackupRestoreBranchesLimit pulumi.BoolInput `pulumi:"atBackupRestoreBranchesLimit"`
	// If the database has reached its development branch limit.
	AtDevelopmentBranchLimit pulumi.BoolInput `pulumi:"atDevelopmentBranchLimit"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations pulumi.BoolInput `pulumi:"automaticMigrations"`
	// The total number of database branches.
	BranchesCount pulumi.Float64Input `pulumi:"branchesCount"`
	// The URL to retrieve this database's branches via the API.
	BranchesUrl pulumi.StringInput `pulumi:"branchesUrl"`
	// When the database was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// If the database was created from an import, describes the import process.
	DataImport GetDatabasesDatabaseDataImportPtrInput `pulumi:"dataImport"`
	// The default branch for the database.
	DefaultBranch pulumi.StringInput `pulumi:"defaultBranch"`
	// Number of read only regions in the default branch.
	DefaultBranchReadOnlyRegionsCount pulumi.Float64Input `pulumi:"defaultBranchReadOnlyRegionsCount"`
	// Number of shards in the default branch.
	DefaultBranchShardCount pulumi.Float64Input `pulumi:"defaultBranchShardCount"`
	// Number of tables in the default branch schema.
	DefaultBranchTableCount pulumi.Float64Input `pulumi:"defaultBranchTableCount"`
	// The total number of database development branches.
	DevelopmentBranchesCount pulumi.Float64Input `pulumi:"developmentBranchesCount"`
	// The total number of database development branches.
	HtmlUrl pulumi.StringInput `pulumi:"htmlUrl"`
	// The ID of the database.
	Id pulumi.StringInput `pulumi:"id"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries pulumi.BoolInput `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount pulumi.Float64Input `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework pulumi.StringInput `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName pulumi.StringInput `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion pulumi.BoolInput `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization this database belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The database plan.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole pulumi.BoolInput `pulumi:"productionBranchWebConsole"`
	// The total number of database production branches.
	ProductionBranchesCount pulumi.Float64Input `pulumi:"productionBranchesCount"`
	// If the database is ready to be used.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The region the database lives in.
	Region GetDatabasesDatabaseRegionInput `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy pulumi.BoolInput `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion pulumi.BoolInput `pulumi:"restrictBranchRegion"`
	// When the default branch schema was last changed.
	SchemaLastUpdatedAt pulumi.StringInput `pulumi:"schemaLastUpdatedAt"`
	// If the database is sharded.
	Sharded pulumi.BoolInput `pulumi:"sharded"`
	// State of the database.
	State pulumi.StringInput `pulumi:"state"`
	// When the database was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The URL to the database API endpoint.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetDatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return i.ToGetDatabasesDatabaseOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseOutput)
}

// GetDatabasesDatabaseArrayInput is an input type that accepts GetDatabasesDatabaseArray and GetDatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseArrayInput` via:
//
//	GetDatabasesDatabaseArray{ GetDatabasesDatabaseArgs{...} }
type GetDatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput
	ToGetDatabasesDatabaseArrayOutputWithContext(context.Context) GetDatabasesDatabaseArrayOutput
}

type GetDatabasesDatabaseArray []GetDatabasesDatabaseInput

func (GetDatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return i.ToGetDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseArrayOutput)
}

type GetDatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return o
}

// Whether seeding branches with data is enabled for all branches.
func (o GetDatabasesDatabaseOutput) AllowDataBranching() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.AllowDataBranching }).(pulumi.BoolOutput)
}

// If the database has reached its backup restored branch limit.
func (o GetDatabasesDatabaseOutput) AtBackupRestoreBranchesLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.AtBackupRestoreBranchesLimit }).(pulumi.BoolOutput)
}

// If the database has reached its development branch limit.
func (o GetDatabasesDatabaseOutput) AtDevelopmentBranchLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.AtDevelopmentBranchLimit }).(pulumi.BoolOutput)
}

// Whether to automatically manage Rails migrations during deploy requests.
func (o GetDatabasesDatabaseOutput) AutomaticMigrations() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.AutomaticMigrations }).(pulumi.BoolOutput)
}

// The total number of database branches.
func (o GetDatabasesDatabaseOutput) BranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetDatabasesDatabase) float64 { return v.BranchesCount }).(pulumi.Float64Output)
}

// The URL to retrieve this database's branches via the API.
func (o GetDatabasesDatabaseOutput) BranchesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.BranchesUrl }).(pulumi.StringOutput)
}

// When the database was created.
func (o GetDatabasesDatabaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// If the database was created from an import, describes the import process.
func (o GetDatabasesDatabaseOutput) DataImport() GetDatabasesDatabaseDataImportPtrOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) *GetDatabasesDatabaseDataImport { return v.DataImport }).(GetDatabasesDatabaseDataImportPtrOutput)
}

// The default branch for the database.
func (o GetDatabasesDatabaseOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Number of read only regions in the default branch.
func (o GetDatabasesDatabaseOutput) DefaultBranchReadOnlyRegionsCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetDatabasesDatabase) float64 { return v.DefaultBranchReadOnlyRegionsCount }).(pulumi.Float64Output)
}

// Number of shards in the default branch.
func (o GetDatabasesDatabaseOutput) DefaultBranchShardCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetDatabasesDatabase) float64 { return v.DefaultBranchShardCount }).(pulumi.Float64Output)
}

// Number of tables in the default branch schema.
func (o GetDatabasesDatabaseOutput) DefaultBranchTableCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetDatabasesDatabase) float64 { return v.DefaultBranchTableCount }).(pulumi.Float64Output)
}

// The total number of database development branches.
func (o GetDatabasesDatabaseOutput) DevelopmentBranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetDatabasesDatabase) float64 { return v.DevelopmentBranchesCount }).(pulumi.Float64Output)
}

// The total number of database development branches.
func (o GetDatabasesDatabaseOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The ID of the database.
func (o GetDatabasesDatabaseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Id }).(pulumi.StringOutput)
}

// The URL to see this database's branches in the web UI.
func (o GetDatabasesDatabaseOutput) InsightsRawQueries() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.InsightsRawQueries }).(pulumi.BoolOutput)
}

// The total number of ongoing issues within a database.
func (o GetDatabasesDatabaseOutput) IssuesCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetDatabasesDatabase) float64 { return v.IssuesCount }).(pulumi.Float64Output)
}

// Framework used for applying migrations.
func (o GetDatabasesDatabaseOutput) MigrationFramework() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.MigrationFramework }).(pulumi.StringOutput)
}

// Table name to use for copying schema migration data.
func (o GetDatabasesDatabaseOutput) MigrationTableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.MigrationTableName }).(pulumi.StringOutput)
}

// If the database requires multiple admins for deletion.
func (o GetDatabasesDatabaseOutput) MultipleAdminsRequiredForDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.MultipleAdminsRequiredForDeletion }).(pulumi.BoolOutput)
}

// The name of this database.
func (o GetDatabasesDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Name }).(pulumi.StringOutput)
}

// The organization this database belongs to.
func (o GetDatabasesDatabaseOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Organization }).(pulumi.StringOutput)
}

// The database plan.
func (o GetDatabasesDatabaseOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Plan }).(pulumi.StringOutput)
}

// Whether web console is enabled for production branches.
func (o GetDatabasesDatabaseOutput) ProductionBranchWebConsole() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.ProductionBranchWebConsole }).(pulumi.BoolOutput)
}

// The total number of database production branches.
func (o GetDatabasesDatabaseOutput) ProductionBranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetDatabasesDatabase) float64 { return v.ProductionBranchesCount }).(pulumi.Float64Output)
}

// If the database is ready to be used.
func (o GetDatabasesDatabaseOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The region the database lives in.
func (o GetDatabasesDatabaseOutput) Region() GetDatabasesDatabaseRegionOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) GetDatabasesDatabaseRegion { return v.Region }).(GetDatabasesDatabaseRegionOutput)
}

// Whether an approval is required to deploy schema changes to this database.
func (o GetDatabasesDatabaseOutput) RequireApprovalForDeploy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.RequireApprovalForDeploy }).(pulumi.BoolOutput)
}

// Whether to restrict branch creation to one region.
func (o GetDatabasesDatabaseOutput) RestrictBranchRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.RestrictBranchRegion }).(pulumi.BoolOutput)
}

// When the default branch schema was last changed.
func (o GetDatabasesDatabaseOutput) SchemaLastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.SchemaLastUpdatedAt }).(pulumi.StringOutput)
}

// If the database is sharded.
func (o GetDatabasesDatabaseOutput) Sharded() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.Sharded }).(pulumi.BoolOutput)
}

// State of the database.
func (o GetDatabasesDatabaseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.State }).(pulumi.StringOutput)
}

// When the database was last updated.
func (o GetDatabasesDatabaseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL to the database API endpoint.
func (o GetDatabasesDatabaseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Url }).(pulumi.StringOutput)
}

type GetDatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabase {
		return vs[0].([]GetDatabasesDatabase)[vs[1].(int)]
	}).(GetDatabasesDatabaseOutput)
}

type GetDatabasesDatabaseDataImport struct {
	// Connection information for the source of the data for the import.
	DataSource GetDatabasesDatabaseDataImportDataSource `pulumi:"dataSource"`
	// When the import finished.
	FinishedAt string `pulumi:"finishedAt"`
	// Errors encountered while preparing the import.
	ImportCheckErrors string `pulumi:"importCheckErrors"`
	// When the import started.
	StartedAt string `pulumi:"startedAt"`
	// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
	State string `pulumi:"state"`
}

// GetDatabasesDatabaseDataImportInput is an input type that accepts GetDatabasesDatabaseDataImportArgs and GetDatabasesDatabaseDataImportOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseDataImportInput` via:
//
//	GetDatabasesDatabaseDataImportArgs{...}
type GetDatabasesDatabaseDataImportInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseDataImportOutput() GetDatabasesDatabaseDataImportOutput
	ToGetDatabasesDatabaseDataImportOutputWithContext(context.Context) GetDatabasesDatabaseDataImportOutput
}

type GetDatabasesDatabaseDataImportArgs struct {
	// Connection information for the source of the data for the import.
	DataSource GetDatabasesDatabaseDataImportDataSourceInput `pulumi:"dataSource"`
	// When the import finished.
	FinishedAt pulumi.StringInput `pulumi:"finishedAt"`
	// Errors encountered while preparing the import.
	ImportCheckErrors pulumi.StringInput `pulumi:"importCheckErrors"`
	// When the import started.
	StartedAt pulumi.StringInput `pulumi:"startedAt"`
	// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetDatabasesDatabaseDataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseDataImport)(nil)).Elem()
}

func (i GetDatabasesDatabaseDataImportArgs) ToGetDatabasesDatabaseDataImportOutput() GetDatabasesDatabaseDataImportOutput {
	return i.ToGetDatabasesDatabaseDataImportOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseDataImportArgs) ToGetDatabasesDatabaseDataImportOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDataImportOutput)
}

func (i GetDatabasesDatabaseDataImportArgs) ToGetDatabasesDatabaseDataImportPtrOutput() GetDatabasesDatabaseDataImportPtrOutput {
	return i.ToGetDatabasesDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseDataImportArgs) ToGetDatabasesDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDataImportOutput).ToGetDatabasesDatabaseDataImportPtrOutputWithContext(ctx)
}

// GetDatabasesDatabaseDataImportPtrInput is an input type that accepts GetDatabasesDatabaseDataImportArgs, GetDatabasesDatabaseDataImportPtr and GetDatabasesDatabaseDataImportPtrOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseDataImportPtrInput` via:
//
//	        GetDatabasesDatabaseDataImportArgs{...}
//
//	or:
//
//	        nil
type GetDatabasesDatabaseDataImportPtrInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseDataImportPtrOutput() GetDatabasesDatabaseDataImportPtrOutput
	ToGetDatabasesDatabaseDataImportPtrOutputWithContext(context.Context) GetDatabasesDatabaseDataImportPtrOutput
}

type getDatabasesDatabaseDataImportPtrType GetDatabasesDatabaseDataImportArgs

func GetDatabasesDatabaseDataImportPtr(v *GetDatabasesDatabaseDataImportArgs) GetDatabasesDatabaseDataImportPtrInput {
	return (*getDatabasesDatabaseDataImportPtrType)(v)
}

func (*getDatabasesDatabaseDataImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabasesDatabaseDataImport)(nil)).Elem()
}

func (i *getDatabasesDatabaseDataImportPtrType) ToGetDatabasesDatabaseDataImportPtrOutput() GetDatabasesDatabaseDataImportPtrOutput {
	return i.ToGetDatabasesDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (i *getDatabasesDatabaseDataImportPtrType) ToGetDatabasesDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDataImportPtrOutput)
}

type GetDatabasesDatabaseDataImportOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseDataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseDataImport)(nil)).Elem()
}

func (o GetDatabasesDatabaseDataImportOutput) ToGetDatabasesDatabaseDataImportOutput() GetDatabasesDatabaseDataImportOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportOutput) ToGetDatabasesDatabaseDataImportOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportOutput) ToGetDatabasesDatabaseDataImportPtrOutput() GetDatabasesDatabaseDataImportPtrOutput {
	return o.ToGetDatabasesDatabaseDataImportPtrOutputWithContext(context.Background())
}

func (o GetDatabasesDatabaseDataImportOutput) ToGetDatabasesDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatabasesDatabaseDataImport) *GetDatabasesDatabaseDataImport {
		return &v
	}).(GetDatabasesDatabaseDataImportPtrOutput)
}

// Connection information for the source of the data for the import.
func (o GetDatabasesDatabaseDataImportOutput) DataSource() GetDatabasesDatabaseDataImportDataSourceOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImport) GetDatabasesDatabaseDataImportDataSource { return v.DataSource }).(GetDatabasesDatabaseDataImportDataSourceOutput)
}

// When the import finished.
func (o GetDatabasesDatabaseDataImportOutput) FinishedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImport) string { return v.FinishedAt }).(pulumi.StringOutput)
}

// Errors encountered while preparing the import.
func (o GetDatabasesDatabaseDataImportOutput) ImportCheckErrors() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImport) string { return v.ImportCheckErrors }).(pulumi.StringOutput)
}

// When the import started.
func (o GetDatabasesDatabaseDataImportOutput) StartedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImport) string { return v.StartedAt }).(pulumi.StringOutput)
}

// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
func (o GetDatabasesDatabaseDataImportOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImport) string { return v.State }).(pulumi.StringOutput)
}

type GetDatabasesDatabaseDataImportPtrOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseDataImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabasesDatabaseDataImport)(nil)).Elem()
}

func (o GetDatabasesDatabaseDataImportPtrOutput) ToGetDatabasesDatabaseDataImportPtrOutput() GetDatabasesDatabaseDataImportPtrOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportPtrOutput) ToGetDatabasesDatabaseDataImportPtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportPtrOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportPtrOutput) Elem() GetDatabasesDatabaseDataImportOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImport) GetDatabasesDatabaseDataImport {
		if v != nil {
			return *v
		}
		var ret GetDatabasesDatabaseDataImport
		return ret
	}).(GetDatabasesDatabaseDataImportOutput)
}

// Connection information for the source of the data for the import.
func (o GetDatabasesDatabaseDataImportPtrOutput) DataSource() GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImport) *GetDatabasesDatabaseDataImportDataSource {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(GetDatabasesDatabaseDataImportDataSourcePtrOutput)
}

// When the import finished.
func (o GetDatabasesDatabaseDataImportPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Errors encountered while preparing the import.
func (o GetDatabasesDatabaseDataImportPtrOutput) ImportCheckErrors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.ImportCheckErrors
	}).(pulumi.StringPtrOutput)
}

// When the import started.
func (o GetDatabasesDatabaseDataImportPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
func (o GetDatabasesDatabaseDataImportPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImport) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

type GetDatabasesDatabaseDataImportDataSource struct {
	// The name of the database imported from.
	Database string `pulumi:"database"`
	// The hostname where the database lives.
	Hostname string `pulumi:"hostname"`
	// The port on which the database listens on the host.
	Port string `pulumi:"port"`
}

// GetDatabasesDatabaseDataImportDataSourceInput is an input type that accepts GetDatabasesDatabaseDataImportDataSourceArgs and GetDatabasesDatabaseDataImportDataSourceOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseDataImportDataSourceInput` via:
//
//	GetDatabasesDatabaseDataImportDataSourceArgs{...}
type GetDatabasesDatabaseDataImportDataSourceInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseDataImportDataSourceOutput() GetDatabasesDatabaseDataImportDataSourceOutput
	ToGetDatabasesDatabaseDataImportDataSourceOutputWithContext(context.Context) GetDatabasesDatabaseDataImportDataSourceOutput
}

type GetDatabasesDatabaseDataImportDataSourceArgs struct {
	// The name of the database imported from.
	Database pulumi.StringInput `pulumi:"database"`
	// The hostname where the database lives.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port on which the database listens on the host.
	Port pulumi.StringInput `pulumi:"port"`
}

func (GetDatabasesDatabaseDataImportDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseDataImportDataSource)(nil)).Elem()
}

func (i GetDatabasesDatabaseDataImportDataSourceArgs) ToGetDatabasesDatabaseDataImportDataSourceOutput() GetDatabasesDatabaseDataImportDataSourceOutput {
	return i.ToGetDatabasesDatabaseDataImportDataSourceOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseDataImportDataSourceArgs) ToGetDatabasesDatabaseDataImportDataSourceOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDataImportDataSourceOutput)
}

func (i GetDatabasesDatabaseDataImportDataSourceArgs) ToGetDatabasesDatabaseDataImportDataSourcePtrOutput() GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return i.ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseDataImportDataSourceArgs) ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDataImportDataSourceOutput).ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(ctx)
}

// GetDatabasesDatabaseDataImportDataSourcePtrInput is an input type that accepts GetDatabasesDatabaseDataImportDataSourceArgs, GetDatabasesDatabaseDataImportDataSourcePtr and GetDatabasesDatabaseDataImportDataSourcePtrOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseDataImportDataSourcePtrInput` via:
//
//	        GetDatabasesDatabaseDataImportDataSourceArgs{...}
//
//	or:
//
//	        nil
type GetDatabasesDatabaseDataImportDataSourcePtrInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseDataImportDataSourcePtrOutput() GetDatabasesDatabaseDataImportDataSourcePtrOutput
	ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(context.Context) GetDatabasesDatabaseDataImportDataSourcePtrOutput
}

type getDatabasesDatabaseDataImportDataSourcePtrType GetDatabasesDatabaseDataImportDataSourceArgs

func GetDatabasesDatabaseDataImportDataSourcePtr(v *GetDatabasesDatabaseDataImportDataSourceArgs) GetDatabasesDatabaseDataImportDataSourcePtrInput {
	return (*getDatabasesDatabaseDataImportDataSourcePtrType)(v)
}

func (*getDatabasesDatabaseDataImportDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabasesDatabaseDataImportDataSource)(nil)).Elem()
}

func (i *getDatabasesDatabaseDataImportDataSourcePtrType) ToGetDatabasesDatabaseDataImportDataSourcePtrOutput() GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return i.ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (i *getDatabasesDatabaseDataImportDataSourcePtrType) ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDataImportDataSourcePtrOutput)
}

type GetDatabasesDatabaseDataImportDataSourceOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseDataImportDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseDataImportDataSource)(nil)).Elem()
}

func (o GetDatabasesDatabaseDataImportDataSourceOutput) ToGetDatabasesDatabaseDataImportDataSourceOutput() GetDatabasesDatabaseDataImportDataSourceOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportDataSourceOutput) ToGetDatabasesDatabaseDataImportDataSourceOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportDataSourceOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportDataSourceOutput) ToGetDatabasesDatabaseDataImportDataSourcePtrOutput() GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return o.ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(context.Background())
}

func (o GetDatabasesDatabaseDataImportDataSourceOutput) ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatabasesDatabaseDataImportDataSource) *GetDatabasesDatabaseDataImportDataSource {
		return &v
	}).(GetDatabasesDatabaseDataImportDataSourcePtrOutput)
}

// The name of the database imported from.
func (o GetDatabasesDatabaseDataImportDataSourceOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImportDataSource) string { return v.Database }).(pulumi.StringOutput)
}

// The hostname where the database lives.
func (o GetDatabasesDatabaseDataImportDataSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImportDataSource) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port on which the database listens on the host.
func (o GetDatabasesDatabaseDataImportDataSourceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDataImportDataSource) string { return v.Port }).(pulumi.StringOutput)
}

type GetDatabasesDatabaseDataImportDataSourcePtrOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseDataImportDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabasesDatabaseDataImportDataSource)(nil)).Elem()
}

func (o GetDatabasesDatabaseDataImportDataSourcePtrOutput) ToGetDatabasesDatabaseDataImportDataSourcePtrOutput() GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportDataSourcePtrOutput) ToGetDatabasesDatabaseDataImportDataSourcePtrOutputWithContext(ctx context.Context) GetDatabasesDatabaseDataImportDataSourcePtrOutput {
	return o
}

func (o GetDatabasesDatabaseDataImportDataSourcePtrOutput) Elem() GetDatabasesDatabaseDataImportDataSourceOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImportDataSource) GetDatabasesDatabaseDataImportDataSource {
		if v != nil {
			return *v
		}
		var ret GetDatabasesDatabaseDataImportDataSource
		return ret
	}).(GetDatabasesDatabaseDataImportDataSourceOutput)
}

// The name of the database imported from.
func (o GetDatabasesDatabaseDataImportDataSourcePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The hostname where the database lives.
func (o GetDatabasesDatabaseDataImportDataSourcePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The port on which the database listens on the host.
func (o GetDatabasesDatabaseDataImportDataSourcePtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabasesDatabaseDataImportDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.StringPtrOutput)
}

type GetDatabasesDatabaseRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetDatabasesDatabaseRegionInput is an input type that accepts GetDatabasesDatabaseRegionArgs and GetDatabasesDatabaseRegionOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseRegionInput` via:
//
//	GetDatabasesDatabaseRegionArgs{...}
type GetDatabasesDatabaseRegionInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseRegionOutput() GetDatabasesDatabaseRegionOutput
	ToGetDatabasesDatabaseRegionOutputWithContext(context.Context) GetDatabasesDatabaseRegionOutput
}

type GetDatabasesDatabaseRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetDatabasesDatabaseRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseRegion)(nil)).Elem()
}

func (i GetDatabasesDatabaseRegionArgs) ToGetDatabasesDatabaseRegionOutput() GetDatabasesDatabaseRegionOutput {
	return i.ToGetDatabasesDatabaseRegionOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseRegionArgs) ToGetDatabasesDatabaseRegionOutputWithContext(ctx context.Context) GetDatabasesDatabaseRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseRegionOutput)
}

type GetDatabasesDatabaseRegionOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseRegion)(nil)).Elem()
}

func (o GetDatabasesDatabaseRegionOutput) ToGetDatabasesDatabaseRegionOutput() GetDatabasesDatabaseRegionOutput {
	return o
}

func (o GetDatabasesDatabaseRegionOutput) ToGetDatabasesDatabaseRegionOutputWithContext(ctx context.Context) GetDatabasesDatabaseRegionOutput {
	return o
}

// Name of the region.
func (o GetDatabasesDatabaseRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetDatabasesDatabaseRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetDatabasesDatabaseRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetDatabasesDatabaseRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetDatabasesDatabaseRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetDatabasesDatabaseRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetDatabasesDatabaseRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetOauthApplicationsApplication struct {
	// The image source for the OAuth application's avatar.
	Avatar string `pulumi:"avatar"`
	// The OAuth application's unique client id.
	ClientId string `pulumi:"clientId"`
	// When the OAuth application was created.
	CreatedAt string `pulumi:"createdAt"`
	// The domain of the OAuth application. Used for verification of a valid redirect uri.
	Domain string `pulumi:"domain"`
	// The ID of the OAuth application.
	Id string `pulumi:"id"`
	// The name of the OAuth application.
	Name string `pulumi:"name"`
	// The redirect URI of the OAuth application.
	RedirectUri string `pulumi:"redirectUri"`
	// The scopes that the OAuth application requires on a user's accout.
	Scopes []string `pulumi:"scopes"`
	// The number of tokens issued by the OAuth application.
	Tokens float64 `pulumi:"tokens"`
	// When the OAuth application was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetOauthApplicationsApplicationInput is an input type that accepts GetOauthApplicationsApplicationArgs and GetOauthApplicationsApplicationOutput values.
// You can construct a concrete instance of `GetOauthApplicationsApplicationInput` via:
//
//	GetOauthApplicationsApplicationArgs{...}
type GetOauthApplicationsApplicationInput interface {
	pulumi.Input

	ToGetOauthApplicationsApplicationOutput() GetOauthApplicationsApplicationOutput
	ToGetOauthApplicationsApplicationOutputWithContext(context.Context) GetOauthApplicationsApplicationOutput
}

type GetOauthApplicationsApplicationArgs struct {
	// The image source for the OAuth application's avatar.
	Avatar pulumi.StringInput `pulumi:"avatar"`
	// The OAuth application's unique client id.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// When the OAuth application was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The domain of the OAuth application. Used for verification of a valid redirect uri.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the OAuth application.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the OAuth application.
	Name pulumi.StringInput `pulumi:"name"`
	// The redirect URI of the OAuth application.
	RedirectUri pulumi.StringInput `pulumi:"redirectUri"`
	// The scopes that the OAuth application requires on a user's accout.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The number of tokens issued by the OAuth application.
	Tokens pulumi.Float64Input `pulumi:"tokens"`
	// When the OAuth application was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetOauthApplicationsApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOauthApplicationsApplication)(nil)).Elem()
}

func (i GetOauthApplicationsApplicationArgs) ToGetOauthApplicationsApplicationOutput() GetOauthApplicationsApplicationOutput {
	return i.ToGetOauthApplicationsApplicationOutputWithContext(context.Background())
}

func (i GetOauthApplicationsApplicationArgs) ToGetOauthApplicationsApplicationOutputWithContext(ctx context.Context) GetOauthApplicationsApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOauthApplicationsApplicationOutput)
}

// GetOauthApplicationsApplicationArrayInput is an input type that accepts GetOauthApplicationsApplicationArray and GetOauthApplicationsApplicationArrayOutput values.
// You can construct a concrete instance of `GetOauthApplicationsApplicationArrayInput` via:
//
//	GetOauthApplicationsApplicationArray{ GetOauthApplicationsApplicationArgs{...} }
type GetOauthApplicationsApplicationArrayInput interface {
	pulumi.Input

	ToGetOauthApplicationsApplicationArrayOutput() GetOauthApplicationsApplicationArrayOutput
	ToGetOauthApplicationsApplicationArrayOutputWithContext(context.Context) GetOauthApplicationsApplicationArrayOutput
}

type GetOauthApplicationsApplicationArray []GetOauthApplicationsApplicationInput

func (GetOauthApplicationsApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOauthApplicationsApplication)(nil)).Elem()
}

func (i GetOauthApplicationsApplicationArray) ToGetOauthApplicationsApplicationArrayOutput() GetOauthApplicationsApplicationArrayOutput {
	return i.ToGetOauthApplicationsApplicationArrayOutputWithContext(context.Background())
}

func (i GetOauthApplicationsApplicationArray) ToGetOauthApplicationsApplicationArrayOutputWithContext(ctx context.Context) GetOauthApplicationsApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOauthApplicationsApplicationArrayOutput)
}

type GetOauthApplicationsApplicationOutput struct{ *pulumi.OutputState }

func (GetOauthApplicationsApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOauthApplicationsApplication)(nil)).Elem()
}

func (o GetOauthApplicationsApplicationOutput) ToGetOauthApplicationsApplicationOutput() GetOauthApplicationsApplicationOutput {
	return o
}

func (o GetOauthApplicationsApplicationOutput) ToGetOauthApplicationsApplicationOutputWithContext(ctx context.Context) GetOauthApplicationsApplicationOutput {
	return o
}

// The image source for the OAuth application's avatar.
func (o GetOauthApplicationsApplicationOutput) Avatar() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.Avatar }).(pulumi.StringOutput)
}

// The OAuth application's unique client id.
func (o GetOauthApplicationsApplicationOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.ClientId }).(pulumi.StringOutput)
}

// When the OAuth application was created.
func (o GetOauthApplicationsApplicationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The domain of the OAuth application. Used for verification of a valid redirect uri.
func (o GetOauthApplicationsApplicationOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the OAuth application.
func (o GetOauthApplicationsApplicationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the OAuth application.
func (o GetOauthApplicationsApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.Name }).(pulumi.StringOutput)
}

// The redirect URI of the OAuth application.
func (o GetOauthApplicationsApplicationOutput) RedirectUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.RedirectUri }).(pulumi.StringOutput)
}

// The scopes that the OAuth application requires on a user's accout.
func (o GetOauthApplicationsApplicationOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The number of tokens issued by the OAuth application.
func (o GetOauthApplicationsApplicationOutput) Tokens() pulumi.Float64Output {
	return o.ApplyT(func(v GetOauthApplicationsApplication) float64 { return v.Tokens }).(pulumi.Float64Output)
}

// When the OAuth application was last updated.
func (o GetOauthApplicationsApplicationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetOauthApplicationsApplication) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetOauthApplicationsApplicationArrayOutput struct{ *pulumi.OutputState }

func (GetOauthApplicationsApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOauthApplicationsApplication)(nil)).Elem()
}

func (o GetOauthApplicationsApplicationArrayOutput) ToGetOauthApplicationsApplicationArrayOutput() GetOauthApplicationsApplicationArrayOutput {
	return o
}

func (o GetOauthApplicationsApplicationArrayOutput) ToGetOauthApplicationsApplicationArrayOutputWithContext(ctx context.Context) GetOauthApplicationsApplicationArrayOutput {
	return o
}

func (o GetOauthApplicationsApplicationArrayOutput) Index(i pulumi.IntInput) GetOauthApplicationsApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOauthApplicationsApplication {
		return vs[0].([]GetOauthApplicationsApplication)[vs[1].(int)]
	}).(GetOauthApplicationsApplicationOutput)
}

type GetOrganizationFeatures struct {
	Insights      bool `pulumi:"insights"`
	SingleTenancy bool `pulumi:"singleTenancy"`
	Sso           bool `pulumi:"sso"`
}

// GetOrganizationFeaturesInput is an input type that accepts GetOrganizationFeaturesArgs and GetOrganizationFeaturesOutput values.
// You can construct a concrete instance of `GetOrganizationFeaturesInput` via:
//
//	GetOrganizationFeaturesArgs{...}
type GetOrganizationFeaturesInput interface {
	pulumi.Input

	ToGetOrganizationFeaturesOutput() GetOrganizationFeaturesOutput
	ToGetOrganizationFeaturesOutputWithContext(context.Context) GetOrganizationFeaturesOutput
}

type GetOrganizationFeaturesArgs struct {
	Insights      pulumi.BoolInput `pulumi:"insights"`
	SingleTenancy pulumi.BoolInput `pulumi:"singleTenancy"`
	Sso           pulumi.BoolInput `pulumi:"sso"`
}

func (GetOrganizationFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationFeatures)(nil)).Elem()
}

func (i GetOrganizationFeaturesArgs) ToGetOrganizationFeaturesOutput() GetOrganizationFeaturesOutput {
	return i.ToGetOrganizationFeaturesOutputWithContext(context.Background())
}

func (i GetOrganizationFeaturesArgs) ToGetOrganizationFeaturesOutputWithContext(ctx context.Context) GetOrganizationFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationFeaturesOutput)
}

type GetOrganizationFeaturesOutput struct{ *pulumi.OutputState }

func (GetOrganizationFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationFeatures)(nil)).Elem()
}

func (o GetOrganizationFeaturesOutput) ToGetOrganizationFeaturesOutput() GetOrganizationFeaturesOutput {
	return o
}

func (o GetOrganizationFeaturesOutput) ToGetOrganizationFeaturesOutputWithContext(ctx context.Context) GetOrganizationFeaturesOutput {
	return o
}

func (o GetOrganizationFeaturesOutput) Insights() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationFeatures) bool { return v.Insights }).(pulumi.BoolOutput)
}

func (o GetOrganizationFeaturesOutput) SingleTenancy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationFeatures) bool { return v.SingleTenancy }).(pulumi.BoolOutput)
}

func (o GetOrganizationFeaturesOutput) Sso() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationFeatures) bool { return v.Sso }).(pulumi.BoolOutput)
}

type GetOrganizationFlags struct {
	ExampleFlag string `pulumi:"exampleFlag"`
}

// GetOrganizationFlagsInput is an input type that accepts GetOrganizationFlagsArgs and GetOrganizationFlagsOutput values.
// You can construct a concrete instance of `GetOrganizationFlagsInput` via:
//
//	GetOrganizationFlagsArgs{...}
type GetOrganizationFlagsInput interface {
	pulumi.Input

	ToGetOrganizationFlagsOutput() GetOrganizationFlagsOutput
	ToGetOrganizationFlagsOutputWithContext(context.Context) GetOrganizationFlagsOutput
}

type GetOrganizationFlagsArgs struct {
	ExampleFlag pulumi.StringInput `pulumi:"exampleFlag"`
}

func (GetOrganizationFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationFlags)(nil)).Elem()
}

func (i GetOrganizationFlagsArgs) ToGetOrganizationFlagsOutput() GetOrganizationFlagsOutput {
	return i.ToGetOrganizationFlagsOutputWithContext(context.Background())
}

func (i GetOrganizationFlagsArgs) ToGetOrganizationFlagsOutputWithContext(ctx context.Context) GetOrganizationFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationFlagsOutput)
}

type GetOrganizationFlagsOutput struct{ *pulumi.OutputState }

func (GetOrganizationFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationFlags)(nil)).Elem()
}

func (o GetOrganizationFlagsOutput) ToGetOrganizationFlagsOutput() GetOrganizationFlagsOutput {
	return o
}

func (o GetOrganizationFlagsOutput) ToGetOrganizationFlagsOutputWithContext(ctx context.Context) GetOrganizationFlagsOutput {
	return o
}

func (o GetOrganizationFlagsOutput) ExampleFlag() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationFlags) string { return v.ExampleFlag }).(pulumi.StringOutput)
}

type GetOrganizationRegionsRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetOrganizationRegionsRegionInput is an input type that accepts GetOrganizationRegionsRegionArgs and GetOrganizationRegionsRegionOutput values.
// You can construct a concrete instance of `GetOrganizationRegionsRegionInput` via:
//
//	GetOrganizationRegionsRegionArgs{...}
type GetOrganizationRegionsRegionInput interface {
	pulumi.Input

	ToGetOrganizationRegionsRegionOutput() GetOrganizationRegionsRegionOutput
	ToGetOrganizationRegionsRegionOutputWithContext(context.Context) GetOrganizationRegionsRegionOutput
}

type GetOrganizationRegionsRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetOrganizationRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRegionsRegion)(nil)).Elem()
}

func (i GetOrganizationRegionsRegionArgs) ToGetOrganizationRegionsRegionOutput() GetOrganizationRegionsRegionOutput {
	return i.ToGetOrganizationRegionsRegionOutputWithContext(context.Background())
}

func (i GetOrganizationRegionsRegionArgs) ToGetOrganizationRegionsRegionOutputWithContext(ctx context.Context) GetOrganizationRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRegionsRegionOutput)
}

// GetOrganizationRegionsRegionArrayInput is an input type that accepts GetOrganizationRegionsRegionArray and GetOrganizationRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetOrganizationRegionsRegionArrayInput` via:
//
//	GetOrganizationRegionsRegionArray{ GetOrganizationRegionsRegionArgs{...} }
type GetOrganizationRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetOrganizationRegionsRegionArrayOutput() GetOrganizationRegionsRegionArrayOutput
	ToGetOrganizationRegionsRegionArrayOutputWithContext(context.Context) GetOrganizationRegionsRegionArrayOutput
}

type GetOrganizationRegionsRegionArray []GetOrganizationRegionsRegionInput

func (GetOrganizationRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationRegionsRegion)(nil)).Elem()
}

func (i GetOrganizationRegionsRegionArray) ToGetOrganizationRegionsRegionArrayOutput() GetOrganizationRegionsRegionArrayOutput {
	return i.ToGetOrganizationRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetOrganizationRegionsRegionArray) ToGetOrganizationRegionsRegionArrayOutputWithContext(ctx context.Context) GetOrganizationRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRegionsRegionArrayOutput)
}

type GetOrganizationRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetOrganizationRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRegionsRegion)(nil)).Elem()
}

func (o GetOrganizationRegionsRegionOutput) ToGetOrganizationRegionsRegionOutput() GetOrganizationRegionsRegionOutput {
	return o
}

func (o GetOrganizationRegionsRegionOutput) ToGetOrganizationRegionsRegionOutputWithContext(ctx context.Context) GetOrganizationRegionsRegionOutput {
	return o
}

// Name of the region.
func (o GetOrganizationRegionsRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRegionsRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetOrganizationRegionsRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationRegionsRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetOrganizationRegionsRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRegionsRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetOrganizationRegionsRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRegionsRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetOrganizationRegionsRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRegionsRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetOrganizationRegionsRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOrganizationRegionsRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetOrganizationRegionsRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRegionsRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetOrganizationRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationRegionsRegion)(nil)).Elem()
}

func (o GetOrganizationRegionsRegionArrayOutput) ToGetOrganizationRegionsRegionArrayOutput() GetOrganizationRegionsRegionArrayOutput {
	return o
}

func (o GetOrganizationRegionsRegionArrayOutput) ToGetOrganizationRegionsRegionArrayOutputWithContext(ctx context.Context) GetOrganizationRegionsRegionArrayOutput {
	return o
}

func (o GetOrganizationRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetOrganizationRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationRegionsRegion {
		return vs[0].([]GetOrganizationRegionsRegion)[vs[1].(int)]
	}).(GetOrganizationRegionsRegionOutput)
}

type GetOrganizationsOrganization struct {
	// Whether or not only administrators can access production branches in the organization.
	AdminOnlyProductionAccess bool `pulumi:"adminOnlyProductionAccess"`
	// The billing email of the organization.
	BillingEmail string `pulumi:"billingEmail"`
	// Whether or not more databases can be created in the organization.
	CanCreateDatabases bool `pulumi:"canCreateDatabases"`
	// When the organization was created.
	CreatedAt string `pulumi:"createdAt"`
	// The number of databases in the organization.
	DatabaseCount float64 `pulumi:"databaseCount"`
	// Features that are enabled on the organization.
	Features GetOrganizationsOrganizationFeatures `pulumi:"features"`
	// .
	Flags GetOrganizationsOrganizationFlags `pulumi:"flags"`
	// The number of remaining free databases that can be created in the organization.
	FreeDatabasesRemaining float64 `pulumi:"freeDatabasesRemaining"`
	// Whether or not the organization has past due billing invoices.
	HasPastDueInvoices bool `pulumi:"hasPastDueInvoices"`
	// The ID for the organization.
	Id string `pulumi:"id"`
	// Whether or not the IdP provider is be responsible for managing roles in PlanetScale.
	IdpManagedRoles bool `pulumi:"idpManagedRoles"`
	// The name of the organization.
	Name string `pulumi:"name"`
	// The billing plan of the organization.
	Plan string `pulumi:"plan"`
	// Whether or not the organization has single tenancy enabled.
	SingleTenancy bool `pulumi:"singleTenancy"`
	// The number of sleeping databases in the organization.
	SleepingDatabaseCount float64 `pulumi:"sleepingDatabaseCount"`
	// Whether or not SSO is enabled on the organization.
	Sso bool `pulumi:"sso"`
	// Whether or not the organization uses a WorkOS directory.
	SsoDirectory bool `pulumi:"ssoDirectory"`
	// The URL of the organization's SSO portal.
	SsoPortalUrl string `pulumi:"ssoPortalUrl"`
	// When the organization was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// Whether or not the organization's billing information is valid.
	ValidBillingInfo bool `pulumi:"validBillingInfo"`
}

// GetOrganizationsOrganizationInput is an input type that accepts GetOrganizationsOrganizationArgs and GetOrganizationsOrganizationOutput values.
// You can construct a concrete instance of `GetOrganizationsOrganizationInput` via:
//
//	GetOrganizationsOrganizationArgs{...}
type GetOrganizationsOrganizationInput interface {
	pulumi.Input

	ToGetOrganizationsOrganizationOutput() GetOrganizationsOrganizationOutput
	ToGetOrganizationsOrganizationOutputWithContext(context.Context) GetOrganizationsOrganizationOutput
}

type GetOrganizationsOrganizationArgs struct {
	// Whether or not only administrators can access production branches in the organization.
	AdminOnlyProductionAccess pulumi.BoolInput `pulumi:"adminOnlyProductionAccess"`
	// The billing email of the organization.
	BillingEmail pulumi.StringInput `pulumi:"billingEmail"`
	// Whether or not more databases can be created in the organization.
	CanCreateDatabases pulumi.BoolInput `pulumi:"canCreateDatabases"`
	// When the organization was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The number of databases in the organization.
	DatabaseCount pulumi.Float64Input `pulumi:"databaseCount"`
	// Features that are enabled on the organization.
	Features GetOrganizationsOrganizationFeaturesInput `pulumi:"features"`
	// .
	Flags GetOrganizationsOrganizationFlagsInput `pulumi:"flags"`
	// The number of remaining free databases that can be created in the organization.
	FreeDatabasesRemaining pulumi.Float64Input `pulumi:"freeDatabasesRemaining"`
	// Whether or not the organization has past due billing invoices.
	HasPastDueInvoices pulumi.BoolInput `pulumi:"hasPastDueInvoices"`
	// The ID for the organization.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether or not the IdP provider is be responsible for managing roles in PlanetScale.
	IdpManagedRoles pulumi.BoolInput `pulumi:"idpManagedRoles"`
	// The name of the organization.
	Name pulumi.StringInput `pulumi:"name"`
	// The billing plan of the organization.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Whether or not the organization has single tenancy enabled.
	SingleTenancy pulumi.BoolInput `pulumi:"singleTenancy"`
	// The number of sleeping databases in the organization.
	SleepingDatabaseCount pulumi.Float64Input `pulumi:"sleepingDatabaseCount"`
	// Whether or not SSO is enabled on the organization.
	Sso pulumi.BoolInput `pulumi:"sso"`
	// Whether or not the organization uses a WorkOS directory.
	SsoDirectory pulumi.BoolInput `pulumi:"ssoDirectory"`
	// The URL of the organization's SSO portal.
	SsoPortalUrl pulumi.StringInput `pulumi:"ssoPortalUrl"`
	// When the organization was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Whether or not the organization's billing information is valid.
	ValidBillingInfo pulumi.BoolInput `pulumi:"validBillingInfo"`
}

func (GetOrganizationsOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationsOrganization)(nil)).Elem()
}

func (i GetOrganizationsOrganizationArgs) ToGetOrganizationsOrganizationOutput() GetOrganizationsOrganizationOutput {
	return i.ToGetOrganizationsOrganizationOutputWithContext(context.Background())
}

func (i GetOrganizationsOrganizationArgs) ToGetOrganizationsOrganizationOutputWithContext(ctx context.Context) GetOrganizationsOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationsOrganizationOutput)
}

// GetOrganizationsOrganizationArrayInput is an input type that accepts GetOrganizationsOrganizationArray and GetOrganizationsOrganizationArrayOutput values.
// You can construct a concrete instance of `GetOrganizationsOrganizationArrayInput` via:
//
//	GetOrganizationsOrganizationArray{ GetOrganizationsOrganizationArgs{...} }
type GetOrganizationsOrganizationArrayInput interface {
	pulumi.Input

	ToGetOrganizationsOrganizationArrayOutput() GetOrganizationsOrganizationArrayOutput
	ToGetOrganizationsOrganizationArrayOutputWithContext(context.Context) GetOrganizationsOrganizationArrayOutput
}

type GetOrganizationsOrganizationArray []GetOrganizationsOrganizationInput

func (GetOrganizationsOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationsOrganization)(nil)).Elem()
}

func (i GetOrganizationsOrganizationArray) ToGetOrganizationsOrganizationArrayOutput() GetOrganizationsOrganizationArrayOutput {
	return i.ToGetOrganizationsOrganizationArrayOutputWithContext(context.Background())
}

func (i GetOrganizationsOrganizationArray) ToGetOrganizationsOrganizationArrayOutputWithContext(ctx context.Context) GetOrganizationsOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationsOrganizationArrayOutput)
}

type GetOrganizationsOrganizationOutput struct{ *pulumi.OutputState }

func (GetOrganizationsOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationsOrganization)(nil)).Elem()
}

func (o GetOrganizationsOrganizationOutput) ToGetOrganizationsOrganizationOutput() GetOrganizationsOrganizationOutput {
	return o
}

func (o GetOrganizationsOrganizationOutput) ToGetOrganizationsOrganizationOutputWithContext(ctx context.Context) GetOrganizationsOrganizationOutput {
	return o
}

// Whether or not only administrators can access production branches in the organization.
func (o GetOrganizationsOrganizationOutput) AdminOnlyProductionAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.AdminOnlyProductionAccess }).(pulumi.BoolOutput)
}

// The billing email of the organization.
func (o GetOrganizationsOrganizationOutput) BillingEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) string { return v.BillingEmail }).(pulumi.StringOutput)
}

// Whether or not more databases can be created in the organization.
func (o GetOrganizationsOrganizationOutput) CanCreateDatabases() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.CanCreateDatabases }).(pulumi.BoolOutput)
}

// When the organization was created.
func (o GetOrganizationsOrganizationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The number of databases in the organization.
func (o GetOrganizationsOrganizationOutput) DatabaseCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetOrganizationsOrganization) float64 { return v.DatabaseCount }).(pulumi.Float64Output)
}

// Features that are enabled on the organization.
func (o GetOrganizationsOrganizationOutput) Features() GetOrganizationsOrganizationFeaturesOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) GetOrganizationsOrganizationFeatures { return v.Features }).(GetOrganizationsOrganizationFeaturesOutput)
}

// .
func (o GetOrganizationsOrganizationOutput) Flags() GetOrganizationsOrganizationFlagsOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) GetOrganizationsOrganizationFlags { return v.Flags }).(GetOrganizationsOrganizationFlagsOutput)
}

// The number of remaining free databases that can be created in the organization.
func (o GetOrganizationsOrganizationOutput) FreeDatabasesRemaining() pulumi.Float64Output {
	return o.ApplyT(func(v GetOrganizationsOrganization) float64 { return v.FreeDatabasesRemaining }).(pulumi.Float64Output)
}

// Whether or not the organization has past due billing invoices.
func (o GetOrganizationsOrganizationOutput) HasPastDueInvoices() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.HasPastDueInvoices }).(pulumi.BoolOutput)
}

// The ID for the organization.
func (o GetOrganizationsOrganizationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) string { return v.Id }).(pulumi.StringOutput)
}

// Whether or not the IdP provider is be responsible for managing roles in PlanetScale.
func (o GetOrganizationsOrganizationOutput) IdpManagedRoles() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.IdpManagedRoles }).(pulumi.BoolOutput)
}

// The name of the organization.
func (o GetOrganizationsOrganizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) string { return v.Name }).(pulumi.StringOutput)
}

// The billing plan of the organization.
func (o GetOrganizationsOrganizationOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) string { return v.Plan }).(pulumi.StringOutput)
}

// Whether or not the organization has single tenancy enabled.
func (o GetOrganizationsOrganizationOutput) SingleTenancy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.SingleTenancy }).(pulumi.BoolOutput)
}

// The number of sleeping databases in the organization.
func (o GetOrganizationsOrganizationOutput) SleepingDatabaseCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetOrganizationsOrganization) float64 { return v.SleepingDatabaseCount }).(pulumi.Float64Output)
}

// Whether or not SSO is enabled on the organization.
func (o GetOrganizationsOrganizationOutput) Sso() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.Sso }).(pulumi.BoolOutput)
}

// Whether or not the organization uses a WorkOS directory.
func (o GetOrganizationsOrganizationOutput) SsoDirectory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.SsoDirectory }).(pulumi.BoolOutput)
}

// The URL of the organization's SSO portal.
func (o GetOrganizationsOrganizationOutput) SsoPortalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) string { return v.SsoPortalUrl }).(pulumi.StringOutput)
}

// When the organization was last updated.
func (o GetOrganizationsOrganizationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Whether or not the organization's billing information is valid.
func (o GetOrganizationsOrganizationOutput) ValidBillingInfo() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganization) bool { return v.ValidBillingInfo }).(pulumi.BoolOutput)
}

type GetOrganizationsOrganizationArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationsOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationsOrganization)(nil)).Elem()
}

func (o GetOrganizationsOrganizationArrayOutput) ToGetOrganizationsOrganizationArrayOutput() GetOrganizationsOrganizationArrayOutput {
	return o
}

func (o GetOrganizationsOrganizationArrayOutput) ToGetOrganizationsOrganizationArrayOutputWithContext(ctx context.Context) GetOrganizationsOrganizationArrayOutput {
	return o
}

func (o GetOrganizationsOrganizationArrayOutput) Index(i pulumi.IntInput) GetOrganizationsOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationsOrganization {
		return vs[0].([]GetOrganizationsOrganization)[vs[1].(int)]
	}).(GetOrganizationsOrganizationOutput)
}

type GetOrganizationsOrganizationFeatures struct {
	Insights      bool `pulumi:"insights"`
	SingleTenancy bool `pulumi:"singleTenancy"`
	Sso           bool `pulumi:"sso"`
}

// GetOrganizationsOrganizationFeaturesInput is an input type that accepts GetOrganizationsOrganizationFeaturesArgs and GetOrganizationsOrganizationFeaturesOutput values.
// You can construct a concrete instance of `GetOrganizationsOrganizationFeaturesInput` via:
//
//	GetOrganizationsOrganizationFeaturesArgs{...}
type GetOrganizationsOrganizationFeaturesInput interface {
	pulumi.Input

	ToGetOrganizationsOrganizationFeaturesOutput() GetOrganizationsOrganizationFeaturesOutput
	ToGetOrganizationsOrganizationFeaturesOutputWithContext(context.Context) GetOrganizationsOrganizationFeaturesOutput
}

type GetOrganizationsOrganizationFeaturesArgs struct {
	Insights      pulumi.BoolInput `pulumi:"insights"`
	SingleTenancy pulumi.BoolInput `pulumi:"singleTenancy"`
	Sso           pulumi.BoolInput `pulumi:"sso"`
}

func (GetOrganizationsOrganizationFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationsOrganizationFeatures)(nil)).Elem()
}

func (i GetOrganizationsOrganizationFeaturesArgs) ToGetOrganizationsOrganizationFeaturesOutput() GetOrganizationsOrganizationFeaturesOutput {
	return i.ToGetOrganizationsOrganizationFeaturesOutputWithContext(context.Background())
}

func (i GetOrganizationsOrganizationFeaturesArgs) ToGetOrganizationsOrganizationFeaturesOutputWithContext(ctx context.Context) GetOrganizationsOrganizationFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationsOrganizationFeaturesOutput)
}

type GetOrganizationsOrganizationFeaturesOutput struct{ *pulumi.OutputState }

func (GetOrganizationsOrganizationFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationsOrganizationFeatures)(nil)).Elem()
}

func (o GetOrganizationsOrganizationFeaturesOutput) ToGetOrganizationsOrganizationFeaturesOutput() GetOrganizationsOrganizationFeaturesOutput {
	return o
}

func (o GetOrganizationsOrganizationFeaturesOutput) ToGetOrganizationsOrganizationFeaturesOutputWithContext(ctx context.Context) GetOrganizationsOrganizationFeaturesOutput {
	return o
}

func (o GetOrganizationsOrganizationFeaturesOutput) Insights() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganizationFeatures) bool { return v.Insights }).(pulumi.BoolOutput)
}

func (o GetOrganizationsOrganizationFeaturesOutput) SingleTenancy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganizationFeatures) bool { return v.SingleTenancy }).(pulumi.BoolOutput)
}

func (o GetOrganizationsOrganizationFeaturesOutput) Sso() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationsOrganizationFeatures) bool { return v.Sso }).(pulumi.BoolOutput)
}

type GetOrganizationsOrganizationFlags struct {
	ExampleFlag string `pulumi:"exampleFlag"`
}

// GetOrganizationsOrganizationFlagsInput is an input type that accepts GetOrganizationsOrganizationFlagsArgs and GetOrganizationsOrganizationFlagsOutput values.
// You can construct a concrete instance of `GetOrganizationsOrganizationFlagsInput` via:
//
//	GetOrganizationsOrganizationFlagsArgs{...}
type GetOrganizationsOrganizationFlagsInput interface {
	pulumi.Input

	ToGetOrganizationsOrganizationFlagsOutput() GetOrganizationsOrganizationFlagsOutput
	ToGetOrganizationsOrganizationFlagsOutputWithContext(context.Context) GetOrganizationsOrganizationFlagsOutput
}

type GetOrganizationsOrganizationFlagsArgs struct {
	ExampleFlag pulumi.StringInput `pulumi:"exampleFlag"`
}

func (GetOrganizationsOrganizationFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationsOrganizationFlags)(nil)).Elem()
}

func (i GetOrganizationsOrganizationFlagsArgs) ToGetOrganizationsOrganizationFlagsOutput() GetOrganizationsOrganizationFlagsOutput {
	return i.ToGetOrganizationsOrganizationFlagsOutputWithContext(context.Background())
}

func (i GetOrganizationsOrganizationFlagsArgs) ToGetOrganizationsOrganizationFlagsOutputWithContext(ctx context.Context) GetOrganizationsOrganizationFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationsOrganizationFlagsOutput)
}

type GetOrganizationsOrganizationFlagsOutput struct{ *pulumi.OutputState }

func (GetOrganizationsOrganizationFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationsOrganizationFlags)(nil)).Elem()
}

func (o GetOrganizationsOrganizationFlagsOutput) ToGetOrganizationsOrganizationFlagsOutput() GetOrganizationsOrganizationFlagsOutput {
	return o
}

func (o GetOrganizationsOrganizationFlagsOutput) ToGetOrganizationsOrganizationFlagsOutputWithContext(ctx context.Context) GetOrganizationsOrganizationFlagsOutput {
	return o
}

func (o GetOrganizationsOrganizationFlagsOutput) ExampleFlag() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationsOrganizationFlags) string { return v.ExampleFlag }).(pulumi.StringOutput)
}

type GetPasswordActor struct {
	// The URL of the actor's avatar
	AvatarUrl string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName string `pulumi:"displayName"`
	// The ID of the actor
	Id string `pulumi:"id"`
}

// GetPasswordActorInput is an input type that accepts GetPasswordActorArgs and GetPasswordActorOutput values.
// You can construct a concrete instance of `GetPasswordActorInput` via:
//
//	GetPasswordActorArgs{...}
type GetPasswordActorInput interface {
	pulumi.Input

	ToGetPasswordActorOutput() GetPasswordActorOutput
	ToGetPasswordActorOutputWithContext(context.Context) GetPasswordActorOutput
}

type GetPasswordActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPasswordActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordActor)(nil)).Elem()
}

func (i GetPasswordActorArgs) ToGetPasswordActorOutput() GetPasswordActorOutput {
	return i.ToGetPasswordActorOutputWithContext(context.Background())
}

func (i GetPasswordActorArgs) ToGetPasswordActorOutputWithContext(ctx context.Context) GetPasswordActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordActorOutput)
}

type GetPasswordActorOutput struct{ *pulumi.OutputState }

func (GetPasswordActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordActor)(nil)).Elem()
}

func (o GetPasswordActorOutput) ToGetPasswordActorOutput() GetPasswordActorOutput {
	return o
}

func (o GetPasswordActorOutput) ToGetPasswordActorOutputWithContext(ctx context.Context) GetPasswordActorOutput {
	return o
}

// The URL of the actor's avatar
func (o GetPasswordActorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordActor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The name of the actor
func (o GetPasswordActorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordActor) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the actor
func (o GetPasswordActorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordActor) string { return v.Id }).(pulumi.StringOutput)
}

type GetPasswordDatabaseBranch struct {
	AccessHostUrl    string `pulumi:"accessHostUrl"`
	Id               string `pulumi:"id"`
	MysqlEdgeAddress string `pulumi:"mysqlEdgeAddress"`
	Name             string `pulumi:"name"`
	Production       bool   `pulumi:"production"`
}

// GetPasswordDatabaseBranchInput is an input type that accepts GetPasswordDatabaseBranchArgs and GetPasswordDatabaseBranchOutput values.
// You can construct a concrete instance of `GetPasswordDatabaseBranchInput` via:
//
//	GetPasswordDatabaseBranchArgs{...}
type GetPasswordDatabaseBranchInput interface {
	pulumi.Input

	ToGetPasswordDatabaseBranchOutput() GetPasswordDatabaseBranchOutput
	ToGetPasswordDatabaseBranchOutputWithContext(context.Context) GetPasswordDatabaseBranchOutput
}

type GetPasswordDatabaseBranchArgs struct {
	AccessHostUrl    pulumi.StringInput `pulumi:"accessHostUrl"`
	Id               pulumi.StringInput `pulumi:"id"`
	MysqlEdgeAddress pulumi.StringInput `pulumi:"mysqlEdgeAddress"`
	Name             pulumi.StringInput `pulumi:"name"`
	Production       pulumi.BoolInput   `pulumi:"production"`
}

func (GetPasswordDatabaseBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordDatabaseBranch)(nil)).Elem()
}

func (i GetPasswordDatabaseBranchArgs) ToGetPasswordDatabaseBranchOutput() GetPasswordDatabaseBranchOutput {
	return i.ToGetPasswordDatabaseBranchOutputWithContext(context.Background())
}

func (i GetPasswordDatabaseBranchArgs) ToGetPasswordDatabaseBranchOutputWithContext(ctx context.Context) GetPasswordDatabaseBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordDatabaseBranchOutput)
}

type GetPasswordDatabaseBranchOutput struct{ *pulumi.OutputState }

func (GetPasswordDatabaseBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordDatabaseBranch)(nil)).Elem()
}

func (o GetPasswordDatabaseBranchOutput) ToGetPasswordDatabaseBranchOutput() GetPasswordDatabaseBranchOutput {
	return o
}

func (o GetPasswordDatabaseBranchOutput) ToGetPasswordDatabaseBranchOutputWithContext(ctx context.Context) GetPasswordDatabaseBranchOutput {
	return o
}

func (o GetPasswordDatabaseBranchOutput) AccessHostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordDatabaseBranch) string { return v.AccessHostUrl }).(pulumi.StringOutput)
}

func (o GetPasswordDatabaseBranchOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordDatabaseBranch) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPasswordDatabaseBranchOutput) MysqlEdgeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordDatabaseBranch) string { return v.MysqlEdgeAddress }).(pulumi.StringOutput)
}

func (o GetPasswordDatabaseBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordDatabaseBranch) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPasswordDatabaseBranchOutput) Production() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPasswordDatabaseBranch) bool { return v.Production }).(pulumi.BoolOutput)
}

type GetPasswordRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetPasswordRegionInput is an input type that accepts GetPasswordRegionArgs and GetPasswordRegionOutput values.
// You can construct a concrete instance of `GetPasswordRegionInput` via:
//
//	GetPasswordRegionArgs{...}
type GetPasswordRegionInput interface {
	pulumi.Input

	ToGetPasswordRegionOutput() GetPasswordRegionOutput
	ToGetPasswordRegionOutputWithContext(context.Context) GetPasswordRegionOutput
}

type GetPasswordRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetPasswordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordRegion)(nil)).Elem()
}

func (i GetPasswordRegionArgs) ToGetPasswordRegionOutput() GetPasswordRegionOutput {
	return i.ToGetPasswordRegionOutputWithContext(context.Background())
}

func (i GetPasswordRegionArgs) ToGetPasswordRegionOutputWithContext(ctx context.Context) GetPasswordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordRegionOutput)
}

type GetPasswordRegionOutput struct{ *pulumi.OutputState }

func (GetPasswordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordRegion)(nil)).Elem()
}

func (o GetPasswordRegionOutput) ToGetPasswordRegionOutput() GetPasswordRegionOutput {
	return o
}

func (o GetPasswordRegionOutput) ToGetPasswordRegionOutputWithContext(ctx context.Context) GetPasswordRegionOutput {
	return o
}

// Name of the region.
func (o GetPasswordRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetPasswordRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPasswordRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetPasswordRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetPasswordRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetPasswordRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetPasswordRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPasswordRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetPasswordRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetPasswordsPassword struct {
	// The host URL for the password.
	AccessHostUrl string `pulumi:"accessHostUrl"`
	// The actor that created this branch.
	Actor GetPasswordsPasswordActor `pulumi:"actor"`
	// The branch this password belongs to..
	Branch string `pulumi:"branch"`
	// When the password was created.
	CreatedAt string `pulumi:"createdAt"`
	// The datanase this branch password belongs to.
	Database string `pulumi:"database"`
	// The branch this password is allowed to access.
	DatabaseBranch GetPasswordsPasswordDatabaseBranch `pulumi:"databaseBranch"`
	// When the password was deleted.
	DeletedAt string `pulumi:"deletedAt"`
	// When the password will expire.
	ExpiresAt string `pulumi:"expiresAt"`
	// The ID for the password.
	Id string `pulumi:"id"`
	// The display name for the password.
	Name string `pulumi:"name"`
	// The organization this database branch password belongs to.
	Organization string `pulumi:"organization"`
	// If the password is for a read-only region, the ID of the region.
	ReadOnlyRegionId string `pulumi:"readOnlyRegionId"`
	// The region in which this password can be used.
	Region GetPasswordsPasswordRegion `pulumi:"region"`
	// Whether or not the password can be renewed.
	Renewable bool `pulumi:"renewable"`
	// The role for the password.
	Role string `pulumi:"role"`
	// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
	TtlSeconds float64 `pulumi:"ttlSeconds"`
	// The username for the password.
	Username string `pulumi:"username"`
}

// GetPasswordsPasswordInput is an input type that accepts GetPasswordsPasswordArgs and GetPasswordsPasswordOutput values.
// You can construct a concrete instance of `GetPasswordsPasswordInput` via:
//
//	GetPasswordsPasswordArgs{...}
type GetPasswordsPasswordInput interface {
	pulumi.Input

	ToGetPasswordsPasswordOutput() GetPasswordsPasswordOutput
	ToGetPasswordsPasswordOutputWithContext(context.Context) GetPasswordsPasswordOutput
}

type GetPasswordsPasswordArgs struct {
	// The host URL for the password.
	AccessHostUrl pulumi.StringInput `pulumi:"accessHostUrl"`
	// The actor that created this branch.
	Actor GetPasswordsPasswordActorInput `pulumi:"actor"`
	// The branch this password belongs to..
	Branch pulumi.StringInput `pulumi:"branch"`
	// When the password was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The datanase this branch password belongs to.
	Database pulumi.StringInput `pulumi:"database"`
	// The branch this password is allowed to access.
	DatabaseBranch GetPasswordsPasswordDatabaseBranchInput `pulumi:"databaseBranch"`
	// When the password was deleted.
	DeletedAt pulumi.StringInput `pulumi:"deletedAt"`
	// When the password will expire.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The ID for the password.
	Id pulumi.StringInput `pulumi:"id"`
	// The display name for the password.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization this database branch password belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
	// If the password is for a read-only region, the ID of the region.
	ReadOnlyRegionId pulumi.StringInput `pulumi:"readOnlyRegionId"`
	// The region in which this password can be used.
	Region GetPasswordsPasswordRegionInput `pulumi:"region"`
	// Whether or not the password can be renewed.
	Renewable pulumi.BoolInput `pulumi:"renewable"`
	// The role for the password.
	Role pulumi.StringInput `pulumi:"role"`
	// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
	TtlSeconds pulumi.Float64Input `pulumi:"ttlSeconds"`
	// The username for the password.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetPasswordsPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPassword)(nil)).Elem()
}

func (i GetPasswordsPasswordArgs) ToGetPasswordsPasswordOutput() GetPasswordsPasswordOutput {
	return i.ToGetPasswordsPasswordOutputWithContext(context.Background())
}

func (i GetPasswordsPasswordArgs) ToGetPasswordsPasswordOutputWithContext(ctx context.Context) GetPasswordsPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordsPasswordOutput)
}

// GetPasswordsPasswordArrayInput is an input type that accepts GetPasswordsPasswordArray and GetPasswordsPasswordArrayOutput values.
// You can construct a concrete instance of `GetPasswordsPasswordArrayInput` via:
//
//	GetPasswordsPasswordArray{ GetPasswordsPasswordArgs{...} }
type GetPasswordsPasswordArrayInput interface {
	pulumi.Input

	ToGetPasswordsPasswordArrayOutput() GetPasswordsPasswordArrayOutput
	ToGetPasswordsPasswordArrayOutputWithContext(context.Context) GetPasswordsPasswordArrayOutput
}

type GetPasswordsPasswordArray []GetPasswordsPasswordInput

func (GetPasswordsPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPasswordsPassword)(nil)).Elem()
}

func (i GetPasswordsPasswordArray) ToGetPasswordsPasswordArrayOutput() GetPasswordsPasswordArrayOutput {
	return i.ToGetPasswordsPasswordArrayOutputWithContext(context.Background())
}

func (i GetPasswordsPasswordArray) ToGetPasswordsPasswordArrayOutputWithContext(ctx context.Context) GetPasswordsPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordsPasswordArrayOutput)
}

type GetPasswordsPasswordOutput struct{ *pulumi.OutputState }

func (GetPasswordsPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPassword)(nil)).Elem()
}

func (o GetPasswordsPasswordOutput) ToGetPasswordsPasswordOutput() GetPasswordsPasswordOutput {
	return o
}

func (o GetPasswordsPasswordOutput) ToGetPasswordsPasswordOutputWithContext(ctx context.Context) GetPasswordsPasswordOutput {
	return o
}

// The host URL for the password.
func (o GetPasswordsPasswordOutput) AccessHostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.AccessHostUrl }).(pulumi.StringOutput)
}

// The actor that created this branch.
func (o GetPasswordsPasswordOutput) Actor() GetPasswordsPasswordActorOutput {
	return o.ApplyT(func(v GetPasswordsPassword) GetPasswordsPasswordActor { return v.Actor }).(GetPasswordsPasswordActorOutput)
}

// The branch this password belongs to..
func (o GetPasswordsPasswordOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.Branch }).(pulumi.StringOutput)
}

// When the password was created.
func (o GetPasswordsPasswordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The datanase this branch password belongs to.
func (o GetPasswordsPasswordOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.Database }).(pulumi.StringOutput)
}

// The branch this password is allowed to access.
func (o GetPasswordsPasswordOutput) DatabaseBranch() GetPasswordsPasswordDatabaseBranchOutput {
	return o.ApplyT(func(v GetPasswordsPassword) GetPasswordsPasswordDatabaseBranch { return v.DatabaseBranch }).(GetPasswordsPasswordDatabaseBranchOutput)
}

// When the password was deleted.
func (o GetPasswordsPasswordOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.DeletedAt }).(pulumi.StringOutput)
}

// When the password will expire.
func (o GetPasswordsPasswordOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID for the password.
func (o GetPasswordsPasswordOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.Id }).(pulumi.StringOutput)
}

// The display name for the password.
func (o GetPasswordsPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.Name }).(pulumi.StringOutput)
}

// The organization this database branch password belongs to.
func (o GetPasswordsPasswordOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.Organization }).(pulumi.StringOutput)
}

// If the password is for a read-only region, the ID of the region.
func (o GetPasswordsPasswordOutput) ReadOnlyRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.ReadOnlyRegionId }).(pulumi.StringOutput)
}

// The region in which this password can be used.
func (o GetPasswordsPasswordOutput) Region() GetPasswordsPasswordRegionOutput {
	return o.ApplyT(func(v GetPasswordsPassword) GetPasswordsPasswordRegion { return v.Region }).(GetPasswordsPasswordRegionOutput)
}

// Whether or not the password can be renewed.
func (o GetPasswordsPasswordOutput) Renewable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPasswordsPassword) bool { return v.Renewable }).(pulumi.BoolOutput)
}

// The role for the password.
func (o GetPasswordsPasswordOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.Role }).(pulumi.StringOutput)
}

// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
func (o GetPasswordsPasswordOutput) TtlSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v GetPasswordsPassword) float64 { return v.TtlSeconds }).(pulumi.Float64Output)
}

// The username for the password.
func (o GetPasswordsPasswordOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPassword) string { return v.Username }).(pulumi.StringOutput)
}

type GetPasswordsPasswordArrayOutput struct{ *pulumi.OutputState }

func (GetPasswordsPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPasswordsPassword)(nil)).Elem()
}

func (o GetPasswordsPasswordArrayOutput) ToGetPasswordsPasswordArrayOutput() GetPasswordsPasswordArrayOutput {
	return o
}

func (o GetPasswordsPasswordArrayOutput) ToGetPasswordsPasswordArrayOutputWithContext(ctx context.Context) GetPasswordsPasswordArrayOutput {
	return o
}

func (o GetPasswordsPasswordArrayOutput) Index(i pulumi.IntInput) GetPasswordsPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPasswordsPassword {
		return vs[0].([]GetPasswordsPassword)[vs[1].(int)]
	}).(GetPasswordsPasswordOutput)
}

type GetPasswordsPasswordActor struct {
	// The URL of the actor's avatar
	AvatarUrl string `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName string `pulumi:"displayName"`
	// The ID of the actor
	Id string `pulumi:"id"`
}

// GetPasswordsPasswordActorInput is an input type that accepts GetPasswordsPasswordActorArgs and GetPasswordsPasswordActorOutput values.
// You can construct a concrete instance of `GetPasswordsPasswordActorInput` via:
//
//	GetPasswordsPasswordActorArgs{...}
type GetPasswordsPasswordActorInput interface {
	pulumi.Input

	ToGetPasswordsPasswordActorOutput() GetPasswordsPasswordActorOutput
	ToGetPasswordsPasswordActorOutputWithContext(context.Context) GetPasswordsPasswordActorOutput
}

type GetPasswordsPasswordActorArgs struct {
	// The URL of the actor's avatar
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The name of the actor
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the actor
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPasswordsPasswordActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPasswordActor)(nil)).Elem()
}

func (i GetPasswordsPasswordActorArgs) ToGetPasswordsPasswordActorOutput() GetPasswordsPasswordActorOutput {
	return i.ToGetPasswordsPasswordActorOutputWithContext(context.Background())
}

func (i GetPasswordsPasswordActorArgs) ToGetPasswordsPasswordActorOutputWithContext(ctx context.Context) GetPasswordsPasswordActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordsPasswordActorOutput)
}

type GetPasswordsPasswordActorOutput struct{ *pulumi.OutputState }

func (GetPasswordsPasswordActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPasswordActor)(nil)).Elem()
}

func (o GetPasswordsPasswordActorOutput) ToGetPasswordsPasswordActorOutput() GetPasswordsPasswordActorOutput {
	return o
}

func (o GetPasswordsPasswordActorOutput) ToGetPasswordsPasswordActorOutputWithContext(ctx context.Context) GetPasswordsPasswordActorOutput {
	return o
}

// The URL of the actor's avatar
func (o GetPasswordsPasswordActorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordActor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The name of the actor
func (o GetPasswordsPasswordActorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordActor) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the actor
func (o GetPasswordsPasswordActorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordActor) string { return v.Id }).(pulumi.StringOutput)
}

type GetPasswordsPasswordDatabaseBranch struct {
	AccessHostUrl    string `pulumi:"accessHostUrl"`
	Id               string `pulumi:"id"`
	MysqlEdgeAddress string `pulumi:"mysqlEdgeAddress"`
	Name             string `pulumi:"name"`
	Production       bool   `pulumi:"production"`
}

// GetPasswordsPasswordDatabaseBranchInput is an input type that accepts GetPasswordsPasswordDatabaseBranchArgs and GetPasswordsPasswordDatabaseBranchOutput values.
// You can construct a concrete instance of `GetPasswordsPasswordDatabaseBranchInput` via:
//
//	GetPasswordsPasswordDatabaseBranchArgs{...}
type GetPasswordsPasswordDatabaseBranchInput interface {
	pulumi.Input

	ToGetPasswordsPasswordDatabaseBranchOutput() GetPasswordsPasswordDatabaseBranchOutput
	ToGetPasswordsPasswordDatabaseBranchOutputWithContext(context.Context) GetPasswordsPasswordDatabaseBranchOutput
}

type GetPasswordsPasswordDatabaseBranchArgs struct {
	AccessHostUrl    pulumi.StringInput `pulumi:"accessHostUrl"`
	Id               pulumi.StringInput `pulumi:"id"`
	MysqlEdgeAddress pulumi.StringInput `pulumi:"mysqlEdgeAddress"`
	Name             pulumi.StringInput `pulumi:"name"`
	Production       pulumi.BoolInput   `pulumi:"production"`
}

func (GetPasswordsPasswordDatabaseBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPasswordDatabaseBranch)(nil)).Elem()
}

func (i GetPasswordsPasswordDatabaseBranchArgs) ToGetPasswordsPasswordDatabaseBranchOutput() GetPasswordsPasswordDatabaseBranchOutput {
	return i.ToGetPasswordsPasswordDatabaseBranchOutputWithContext(context.Background())
}

func (i GetPasswordsPasswordDatabaseBranchArgs) ToGetPasswordsPasswordDatabaseBranchOutputWithContext(ctx context.Context) GetPasswordsPasswordDatabaseBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordsPasswordDatabaseBranchOutput)
}

type GetPasswordsPasswordDatabaseBranchOutput struct{ *pulumi.OutputState }

func (GetPasswordsPasswordDatabaseBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPasswordDatabaseBranch)(nil)).Elem()
}

func (o GetPasswordsPasswordDatabaseBranchOutput) ToGetPasswordsPasswordDatabaseBranchOutput() GetPasswordsPasswordDatabaseBranchOutput {
	return o
}

func (o GetPasswordsPasswordDatabaseBranchOutput) ToGetPasswordsPasswordDatabaseBranchOutputWithContext(ctx context.Context) GetPasswordsPasswordDatabaseBranchOutput {
	return o
}

func (o GetPasswordsPasswordDatabaseBranchOutput) AccessHostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordDatabaseBranch) string { return v.AccessHostUrl }).(pulumi.StringOutput)
}

func (o GetPasswordsPasswordDatabaseBranchOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordDatabaseBranch) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPasswordsPasswordDatabaseBranchOutput) MysqlEdgeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordDatabaseBranch) string { return v.MysqlEdgeAddress }).(pulumi.StringOutput)
}

func (o GetPasswordsPasswordDatabaseBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordDatabaseBranch) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPasswordsPasswordDatabaseBranchOutput) Production() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPasswordsPasswordDatabaseBranch) bool { return v.Production }).(pulumi.BoolOutput)
}

type GetPasswordsPasswordRegion struct {
	// Name of the region.
	DisplayName string `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled bool `pulumi:"enabled"`
	// The ID of the region.
	Id string `pulumi:"id"`
	// Location of the region.
	Location string `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider string `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug string `pulumi:"slug"`
}

// GetPasswordsPasswordRegionInput is an input type that accepts GetPasswordsPasswordRegionArgs and GetPasswordsPasswordRegionOutput values.
// You can construct a concrete instance of `GetPasswordsPasswordRegionInput` via:
//
//	GetPasswordsPasswordRegionArgs{...}
type GetPasswordsPasswordRegionInput interface {
	pulumi.Input

	ToGetPasswordsPasswordRegionOutput() GetPasswordsPasswordRegionOutput
	ToGetPasswordsPasswordRegionOutputWithContext(context.Context) GetPasswordsPasswordRegionOutput
}

type GetPasswordsPasswordRegionArgs struct {
	// Name of the region.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Whether or not the region is currently active.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the region.
	Location pulumi.StringInput `pulumi:"location"`
	// Provider for the region (ex. AWS).
	Provider pulumi.StringInput `pulumi:"provider"`
	// Public IP addresses for the region.
	PublicIpAddresses pulumi.StringArrayInput `pulumi:"publicIpAddresses"`
	// The slug of the region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetPasswordsPasswordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPasswordRegion)(nil)).Elem()
}

func (i GetPasswordsPasswordRegionArgs) ToGetPasswordsPasswordRegionOutput() GetPasswordsPasswordRegionOutput {
	return i.ToGetPasswordsPasswordRegionOutputWithContext(context.Background())
}

func (i GetPasswordsPasswordRegionArgs) ToGetPasswordsPasswordRegionOutputWithContext(ctx context.Context) GetPasswordsPasswordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPasswordsPasswordRegionOutput)
}

type GetPasswordsPasswordRegionOutput struct{ *pulumi.OutputState }

func (GetPasswordsPasswordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPasswordsPasswordRegion)(nil)).Elem()
}

func (o GetPasswordsPasswordRegionOutput) ToGetPasswordsPasswordRegionOutput() GetPasswordsPasswordRegionOutput {
	return o
}

func (o GetPasswordsPasswordRegionOutput) ToGetPasswordsPasswordRegionOutputWithContext(ctx context.Context) GetPasswordsPasswordRegionOutput {
	return o
}

// Name of the region.
func (o GetPasswordsPasswordRegionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordRegion) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether or not the region is currently active.
func (o GetPasswordsPasswordRegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPasswordsPasswordRegion) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the region.
func (o GetPasswordsPasswordRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordRegion) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the region.
func (o GetPasswordsPasswordRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordRegion) string { return v.Location }).(pulumi.StringOutput)
}

// Provider for the region (ex. AWS).
func (o GetPasswordsPasswordRegionOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordRegion) string { return v.Provider }).(pulumi.StringOutput)
}

// Public IP addresses for the region.
func (o GetPasswordsPasswordRegionOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPasswordsPasswordRegion) []string { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// The slug of the region.
func (o GetPasswordsPasswordRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetPasswordsPasswordRegion) string { return v.Slug }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupActorInput)(nil)).Elem(), BackupActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupActorPtrInput)(nil)).Elem(), BackupActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupBackupPolicyInput)(nil)).Elem(), BackupBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupBackupPolicyPtrInput)(nil)).Elem(), BackupBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchActorInput)(nil)).Elem(), BranchActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchActorPtrInput)(nil)).Elem(), BranchActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRegionInput)(nil)).Elem(), BranchRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRegionPtrInput)(nil)).Elem(), BranchRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestoredFromBranchInput)(nil)).Elem(), BranchRestoredFromBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestoredFromBranchPtrInput)(nil)).Elem(), BranchRestoredFromBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataImportInput)(nil)).Elem(), DatabaseDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataImportPtrInput)(nil)).Elem(), DatabaseDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataImportDataSourceInput)(nil)).Elem(), DatabaseDataImportDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataImportDataSourcePtrInput)(nil)).Elem(), DatabaseDataImportDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordActorInput)(nil)).Elem(), PasswordActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordActorPtrInput)(nil)).Elem(), PasswordActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordDatabaseBranchInput)(nil)).Elem(), PasswordDatabaseBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordDatabaseBranchPtrInput)(nil)).Elem(), PasswordDatabaseBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordRegionInput)(nil)).Elem(), PasswordRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordRegionPtrInput)(nil)).Elem(), PasswordRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupActorInput)(nil)).Elem(), GetBackupActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupBackupPolicyInput)(nil)).Elem(), GetBackupBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupInput)(nil)).Elem(), GetBackupsBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupArrayInput)(nil)).Elem(), GetBackupsBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupActorInput)(nil)).Elem(), GetBackupsBackupActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupBackupPolicyInput)(nil)).Elem(), GetBackupsBackupBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchActorInput)(nil)).Elem(), GetBranchActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchRegionInput)(nil)).Elem(), GetBranchRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchRestoredFromBranchInput)(nil)).Elem(), GetBranchRestoredFromBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchSchemaLintErrorInput)(nil)).Elem(), GetBranchSchemaLintErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchSchemaLintErrorArrayInput)(nil)).Elem(), GetBranchSchemaLintErrorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchSchemaTableInput)(nil)).Elem(), GetBranchSchemaTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchSchemaTableArrayInput)(nil)).Elem(), GetBranchSchemaTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchesBranchInput)(nil)).Elem(), GetBranchesBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchesBranchArrayInput)(nil)).Elem(), GetBranchesBranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchesBranchActorInput)(nil)).Elem(), GetBranchesBranchActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchesBranchRegionInput)(nil)).Elem(), GetBranchesBranchRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchesBranchRestoredFromBranchInput)(nil)).Elem(), GetBranchesBranchRestoredFromBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseDataImportInput)(nil)).Elem(), GetDatabaseDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseDataImportPtrInput)(nil)).Elem(), GetDatabaseDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseDataImportDataSourceInput)(nil)).Elem(), GetDatabaseDataImportDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseDataImportDataSourcePtrInput)(nil)).Elem(), GetDatabaseDataImportDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionInput)(nil)).Elem(), GetDatabaseReadOnlyRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionArrayInput)(nil)).Elem(), GetDatabaseReadOnlyRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionActorInput)(nil)).Elem(), GetDatabaseReadOnlyRegionsRegionActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseReadOnlyRegionsRegionRegionInput)(nil)).Elem(), GetDatabaseReadOnlyRegionsRegionRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRegionInput)(nil)).Elem(), GetDatabaseRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRegionPtrInput)(nil)).Elem(), GetDatabaseRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRegionsRegionInput)(nil)).Elem(), GetDatabaseRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRegionsRegionArrayInput)(nil)).Elem(), GetDatabaseRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseInput)(nil)).Elem(), GetDatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseArrayInput)(nil)).Elem(), GetDatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseDataImportInput)(nil)).Elem(), GetDatabasesDatabaseDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseDataImportPtrInput)(nil)).Elem(), GetDatabasesDatabaseDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseDataImportDataSourceInput)(nil)).Elem(), GetDatabasesDatabaseDataImportDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseDataImportDataSourcePtrInput)(nil)).Elem(), GetDatabasesDatabaseDataImportDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseRegionInput)(nil)).Elem(), GetDatabasesDatabaseRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOauthApplicationsApplicationInput)(nil)).Elem(), GetOauthApplicationsApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOauthApplicationsApplicationArrayInput)(nil)).Elem(), GetOauthApplicationsApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationFeaturesInput)(nil)).Elem(), GetOrganizationFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationFlagsInput)(nil)).Elem(), GetOrganizationFlagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationRegionsRegionInput)(nil)).Elem(), GetOrganizationRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationRegionsRegionArrayInput)(nil)).Elem(), GetOrganizationRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationsOrganizationInput)(nil)).Elem(), GetOrganizationsOrganizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationsOrganizationArrayInput)(nil)).Elem(), GetOrganizationsOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationsOrganizationFeaturesInput)(nil)).Elem(), GetOrganizationsOrganizationFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationsOrganizationFlagsInput)(nil)).Elem(), GetOrganizationsOrganizationFlagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordActorInput)(nil)).Elem(), GetPasswordActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordDatabaseBranchInput)(nil)).Elem(), GetPasswordDatabaseBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordRegionInput)(nil)).Elem(), GetPasswordRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordsPasswordInput)(nil)).Elem(), GetPasswordsPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordsPasswordArrayInput)(nil)).Elem(), GetPasswordsPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordsPasswordActorInput)(nil)).Elem(), GetPasswordsPasswordActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordsPasswordDatabaseBranchInput)(nil)).Elem(), GetPasswordsPasswordDatabaseBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPasswordsPasswordRegionInput)(nil)).Elem(), GetPasswordsPasswordRegionArgs{})
	pulumi.RegisterOutputType(BackupActorOutput{})
	pulumi.RegisterOutputType(BackupActorPtrOutput{})
	pulumi.RegisterOutputType(BackupBackupPolicyOutput{})
	pulumi.RegisterOutputType(BackupBackupPolicyPtrOutput{})
	pulumi.RegisterOutputType(BranchActorOutput{})
	pulumi.RegisterOutputType(BranchActorPtrOutput{})
	pulumi.RegisterOutputType(BranchRegionOutput{})
	pulumi.RegisterOutputType(BranchRegionPtrOutput{})
	pulumi.RegisterOutputType(BranchRestoredFromBranchOutput{})
	pulumi.RegisterOutputType(BranchRestoredFromBranchPtrOutput{})
	pulumi.RegisterOutputType(DatabaseDataImportOutput{})
	pulumi.RegisterOutputType(DatabaseDataImportPtrOutput{})
	pulumi.RegisterOutputType(DatabaseDataImportDataSourceOutput{})
	pulumi.RegisterOutputType(DatabaseDataImportDataSourcePtrOutput{})
	pulumi.RegisterOutputType(PasswordActorOutput{})
	pulumi.RegisterOutputType(PasswordActorPtrOutput{})
	pulumi.RegisterOutputType(PasswordDatabaseBranchOutput{})
	pulumi.RegisterOutputType(PasswordDatabaseBranchPtrOutput{})
	pulumi.RegisterOutputType(PasswordRegionOutput{})
	pulumi.RegisterOutputType(PasswordRegionPtrOutput{})
	pulumi.RegisterOutputType(GetBackupActorOutput{})
	pulumi.RegisterOutputType(GetBackupBackupPolicyOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupArrayOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupActorOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupBackupPolicyOutput{})
	pulumi.RegisterOutputType(GetBranchActorOutput{})
	pulumi.RegisterOutputType(GetBranchRegionOutput{})
	pulumi.RegisterOutputType(GetBranchRestoredFromBranchOutput{})
	pulumi.RegisterOutputType(GetBranchSchemaLintErrorOutput{})
	pulumi.RegisterOutputType(GetBranchSchemaLintErrorArrayOutput{})
	pulumi.RegisterOutputType(GetBranchSchemaTableOutput{})
	pulumi.RegisterOutputType(GetBranchSchemaTableArrayOutput{})
	pulumi.RegisterOutputType(GetBranchesBranchOutput{})
	pulumi.RegisterOutputType(GetBranchesBranchArrayOutput{})
	pulumi.RegisterOutputType(GetBranchesBranchActorOutput{})
	pulumi.RegisterOutputType(GetBranchesBranchRegionOutput{})
	pulumi.RegisterOutputType(GetBranchesBranchRestoredFromBranchOutput{})
	pulumi.RegisterOutputType(GetDatabaseDataImportOutput{})
	pulumi.RegisterOutputType(GetDatabaseDataImportPtrOutput{})
	pulumi.RegisterOutputType(GetDatabaseDataImportDataSourceOutput{})
	pulumi.RegisterOutputType(GetDatabaseDataImportDataSourcePtrOutput{})
	pulumi.RegisterOutputType(GetDatabaseReadOnlyRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetDatabaseReadOnlyRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseReadOnlyRegionsRegionActorOutput{})
	pulumi.RegisterOutputType(GetDatabaseReadOnlyRegionsRegionRegionOutput{})
	pulumi.RegisterOutputType(GetDatabaseRegionOutput{})
	pulumi.RegisterOutputType(GetDatabaseRegionPtrOutput{})
	pulumi.RegisterOutputType(GetDatabaseRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetDatabaseRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseDataImportOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseDataImportPtrOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseDataImportDataSourceOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseDataImportDataSourcePtrOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseRegionOutput{})
	pulumi.RegisterOutputType(GetOauthApplicationsApplicationOutput{})
	pulumi.RegisterOutputType(GetOauthApplicationsApplicationArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationFeaturesOutput{})
	pulumi.RegisterOutputType(GetOrganizationFlagsOutput{})
	pulumi.RegisterOutputType(GetOrganizationRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetOrganizationRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationsOrganizationOutput{})
	pulumi.RegisterOutputType(GetOrganizationsOrganizationArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationsOrganizationFeaturesOutput{})
	pulumi.RegisterOutputType(GetOrganizationsOrganizationFlagsOutput{})
	pulumi.RegisterOutputType(GetPasswordActorOutput{})
	pulumi.RegisterOutputType(GetPasswordDatabaseBranchOutput{})
	pulumi.RegisterOutputType(GetPasswordRegionOutput{})
	pulumi.RegisterOutputType(GetPasswordsPasswordOutput{})
	pulumi.RegisterOutputType(GetPasswordsPasswordArrayOutput{})
	pulumi.RegisterOutputType(GetPasswordsPasswordActorOutput{})
	pulumi.RegisterOutputType(GetPasswordsPasswordDatabaseBranchOutput{})
	pulumi.RegisterOutputType(GetPasswordsPasswordRegionOutput{})
}
