// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package planetscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sst/pulumi-planetscale/sdk/go/planetscale/internal"
)

// A PlanetScale database.
//
// Known limitations:
// - When the provider is configured with a service token, the service token needs to manually be granted permission on this database resource. This can be done in the UI or via the CLI (`pscale service-token add-access`).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sst/pulumi-planetscale/sdk/go/planetscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := planetscale.NewDatabase(ctx, "example", &planetscale.DatabaseArgs{
//				Organization: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Database struct {
	pulumi.CustomResourceState

	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching pulumi.BoolOutput `pulumi:"allowDataBranching"`
	// If the database has reached its backup restored branch limit.
	AtBackupRestoreBranchesLimit pulumi.BoolOutput `pulumi:"atBackupRestoreBranchesLimit"`
	// If the database has reached its development branch limit.
	AtDevelopmentBranchLimit pulumi.BoolOutput `pulumi:"atDevelopmentBranchLimit"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations pulumi.BoolOutput `pulumi:"automaticMigrations"`
	// The total number of database branches.
	BranchesCount pulumi.Float64Output `pulumi:"branchesCount"`
	// The URL to retrieve this database's branches via the API.
	BranchesUrl pulumi.StringOutput `pulumi:"branchesUrl"`
	// The size of the database cluster plan.
	ClusterSize pulumi.StringOutput `pulumi:"clusterSize"`
	// When the database was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// If the database was created from an import, describes the import process.
	DataImport DatabaseDataImportOutput `pulumi:"dataImport"`
	// The default branch for the database.
	DefaultBranch pulumi.StringOutput `pulumi:"defaultBranch"`
	// Number of read only regions in the default branch.
	DefaultBranchReadOnlyRegionsCount pulumi.Float64Output `pulumi:"defaultBranchReadOnlyRegionsCount"`
	// Number of shards in the default branch.
	DefaultBranchShardCount pulumi.Float64Output `pulumi:"defaultBranchShardCount"`
	// Number of tables in the default branch schema.
	DefaultBranchTableCount pulumi.Float64Output `pulumi:"defaultBranchTableCount"`
	// The total number of database development branches.
	DevelopmentBranchesCount pulumi.Float64Output `pulumi:"developmentBranchesCount"`
	// The total number of database development branches.
	HtmlUrl pulumi.StringOutput `pulumi:"htmlUrl"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries pulumi.BoolOutput `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount pulumi.Float64Output `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework pulumi.StringOutput `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName pulumi.StringOutput `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion pulumi.BoolOutput `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization this database belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The database plan.
	Plan pulumi.StringOutput `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole pulumi.BoolOutput `pulumi:"productionBranchWebConsole"`
	// The total number of database production branches.
	ProductionBranchesCount pulumi.Float64Output `pulumi:"productionBranchesCount"`
	// If the database is ready to be used.
	Ready pulumi.BoolOutput `pulumi:"ready"`
	// The region the database lives in.
	Region pulumi.StringOutput `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy pulumi.BoolOutput `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion pulumi.BoolOutput `pulumi:"restrictBranchRegion"`
	// When the default branch schema was last changed.
	SchemaLastUpdatedAt pulumi.StringOutput `pulumi:"schemaLastUpdatedAt"`
	// If the database is sharded.
	Sharded pulumi.BoolOutput `pulumi:"sharded"`
	// State of the database.
	State pulumi.StringOutput `pulumi:"state"`
	// When the database was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The URL to the database API endpoint.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("planetscale:index/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("planetscale:index/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching *bool `pulumi:"allowDataBranching"`
	// If the database has reached its backup restored branch limit.
	AtBackupRestoreBranchesLimit *bool `pulumi:"atBackupRestoreBranchesLimit"`
	// If the database has reached its development branch limit.
	AtDevelopmentBranchLimit *bool `pulumi:"atDevelopmentBranchLimit"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations *bool `pulumi:"automaticMigrations"`
	// The total number of database branches.
	BranchesCount *float64 `pulumi:"branchesCount"`
	// The URL to retrieve this database's branches via the API.
	BranchesUrl *string `pulumi:"branchesUrl"`
	// The size of the database cluster plan.
	ClusterSize *string `pulumi:"clusterSize"`
	// When the database was created.
	CreatedAt *string `pulumi:"createdAt"`
	// If the database was created from an import, describes the import process.
	DataImport *DatabaseDataImport `pulumi:"dataImport"`
	// The default branch for the database.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// Number of read only regions in the default branch.
	DefaultBranchReadOnlyRegionsCount *float64 `pulumi:"defaultBranchReadOnlyRegionsCount"`
	// Number of shards in the default branch.
	DefaultBranchShardCount *float64 `pulumi:"defaultBranchShardCount"`
	// Number of tables in the default branch schema.
	DefaultBranchTableCount *float64 `pulumi:"defaultBranchTableCount"`
	// The total number of database development branches.
	DevelopmentBranchesCount *float64 `pulumi:"developmentBranchesCount"`
	// The total number of database development branches.
	HtmlUrl *string `pulumi:"htmlUrl"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries *bool `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount *float64 `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework *string `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName *string `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion *bool `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name *string `pulumi:"name"`
	// The organization this database belongs to.
	Organization *string `pulumi:"organization"`
	// The database plan.
	Plan *string `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole *bool `pulumi:"productionBranchWebConsole"`
	// The total number of database production branches.
	ProductionBranchesCount *float64 `pulumi:"productionBranchesCount"`
	// If the database is ready to be used.
	Ready *bool `pulumi:"ready"`
	// The region the database lives in.
	Region *string `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy *bool `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion *bool `pulumi:"restrictBranchRegion"`
	// When the default branch schema was last changed.
	SchemaLastUpdatedAt *string `pulumi:"schemaLastUpdatedAt"`
	// If the database is sharded.
	Sharded *bool `pulumi:"sharded"`
	// State of the database.
	State *string `pulumi:"state"`
	// When the database was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The URL to the database API endpoint.
	Url *string `pulumi:"url"`
}

type DatabaseState struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching pulumi.BoolPtrInput
	// If the database has reached its backup restored branch limit.
	AtBackupRestoreBranchesLimit pulumi.BoolPtrInput
	// If the database has reached its development branch limit.
	AtDevelopmentBranchLimit pulumi.BoolPtrInput
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations pulumi.BoolPtrInput
	// The total number of database branches.
	BranchesCount pulumi.Float64PtrInput
	// The URL to retrieve this database's branches via the API.
	BranchesUrl pulumi.StringPtrInput
	// The size of the database cluster plan.
	ClusterSize pulumi.StringPtrInput
	// When the database was created.
	CreatedAt pulumi.StringPtrInput
	// If the database was created from an import, describes the import process.
	DataImport DatabaseDataImportPtrInput
	// The default branch for the database.
	DefaultBranch pulumi.StringPtrInput
	// Number of read only regions in the default branch.
	DefaultBranchReadOnlyRegionsCount pulumi.Float64PtrInput
	// Number of shards in the default branch.
	DefaultBranchShardCount pulumi.Float64PtrInput
	// Number of tables in the default branch schema.
	DefaultBranchTableCount pulumi.Float64PtrInput
	// The total number of database development branches.
	DevelopmentBranchesCount pulumi.Float64PtrInput
	// The total number of database development branches.
	HtmlUrl pulumi.StringPtrInput
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries pulumi.BoolPtrInput
	// The total number of ongoing issues within a database.
	IssuesCount pulumi.Float64PtrInput
	// Framework used for applying migrations.
	MigrationFramework pulumi.StringPtrInput
	// Table name to use for copying schema migration data.
	MigrationTableName pulumi.StringPtrInput
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion pulumi.BoolPtrInput
	// The name of this database.
	Name pulumi.StringPtrInput
	// The organization this database belongs to.
	Organization pulumi.StringPtrInput
	// The database plan.
	Plan pulumi.StringPtrInput
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole pulumi.BoolPtrInput
	// The total number of database production branches.
	ProductionBranchesCount pulumi.Float64PtrInput
	// If the database is ready to be used.
	Ready pulumi.BoolPtrInput
	// The region the database lives in.
	Region pulumi.StringPtrInput
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy pulumi.BoolPtrInput
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion pulumi.BoolPtrInput
	// When the default branch schema was last changed.
	SchemaLastUpdatedAt pulumi.StringPtrInput
	// If the database is sharded.
	Sharded pulumi.BoolPtrInput
	// State of the database.
	State pulumi.StringPtrInput
	// When the database was last updated.
	UpdatedAt pulumi.StringPtrInput
	// The URL to the database API endpoint.
	Url pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching *bool `pulumi:"allowDataBranching"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations *bool `pulumi:"automaticMigrations"`
	// The size of the database cluster plan.
	ClusterSize *string `pulumi:"clusterSize"`
	// The default branch for the database.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries *bool `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount *float64 `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework *string `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName *string `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion *bool `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name *string `pulumi:"name"`
	// The organization this database belongs to.
	Organization string `pulumi:"organization"`
	// The database plan.
	Plan *string `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole *bool `pulumi:"productionBranchWebConsole"`
	// The region the database lives in.
	Region *string `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy *bool `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion *bool `pulumi:"restrictBranchRegion"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching pulumi.BoolPtrInput
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations pulumi.BoolPtrInput
	// The size of the database cluster plan.
	ClusterSize pulumi.StringPtrInput
	// The default branch for the database.
	DefaultBranch pulumi.StringPtrInput
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries pulumi.BoolPtrInput
	// The total number of ongoing issues within a database.
	IssuesCount pulumi.Float64PtrInput
	// Framework used for applying migrations.
	MigrationFramework pulumi.StringPtrInput
	// Table name to use for copying schema migration data.
	MigrationTableName pulumi.StringPtrInput
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion pulumi.BoolPtrInput
	// The name of this database.
	Name pulumi.StringPtrInput
	// The organization this database belongs to.
	Organization pulumi.StringInput
	// The database plan.
	Plan pulumi.StringPtrInput
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole pulumi.BoolPtrInput
	// The region the database lives in.
	Region pulumi.StringPtrInput
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy pulumi.BoolPtrInput
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion pulumi.BoolPtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// Whether seeding branches with data is enabled for all branches.
func (o DatabaseOutput) AllowDataBranching() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.AllowDataBranching }).(pulumi.BoolOutput)
}

// If the database has reached its backup restored branch limit.
func (o DatabaseOutput) AtBackupRestoreBranchesLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.AtBackupRestoreBranchesLimit }).(pulumi.BoolOutput)
}

// If the database has reached its development branch limit.
func (o DatabaseOutput) AtDevelopmentBranchLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.AtDevelopmentBranchLimit }).(pulumi.BoolOutput)
}

// Whether to automatically manage Rails migrations during deploy requests.
func (o DatabaseOutput) AutomaticMigrations() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.AutomaticMigrations }).(pulumi.BoolOutput)
}

// The total number of database branches.
func (o DatabaseOutput) BranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.BranchesCount }).(pulumi.Float64Output)
}

// The URL to retrieve this database's branches via the API.
func (o DatabaseOutput) BranchesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.BranchesUrl }).(pulumi.StringOutput)
}

// The size of the database cluster plan.
func (o DatabaseOutput) ClusterSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.ClusterSize }).(pulumi.StringOutput)
}

// When the database was created.
func (o DatabaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// If the database was created from an import, describes the import process.
func (o DatabaseOutput) DataImport() DatabaseDataImportOutput {
	return o.ApplyT(func(v *Database) DatabaseDataImportOutput { return v.DataImport }).(DatabaseDataImportOutput)
}

// The default branch for the database.
func (o DatabaseOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Number of read only regions in the default branch.
func (o DatabaseOutput) DefaultBranchReadOnlyRegionsCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.DefaultBranchReadOnlyRegionsCount }).(pulumi.Float64Output)
}

// Number of shards in the default branch.
func (o DatabaseOutput) DefaultBranchShardCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.DefaultBranchShardCount }).(pulumi.Float64Output)
}

// Number of tables in the default branch schema.
func (o DatabaseOutput) DefaultBranchTableCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.DefaultBranchTableCount }).(pulumi.Float64Output)
}

// The total number of database development branches.
func (o DatabaseOutput) DevelopmentBranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.DevelopmentBranchesCount }).(pulumi.Float64Output)
}

// The total number of database development branches.
func (o DatabaseOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The URL to see this database's branches in the web UI.
func (o DatabaseOutput) InsightsRawQueries() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.InsightsRawQueries }).(pulumi.BoolOutput)
}

// The total number of ongoing issues within a database.
func (o DatabaseOutput) IssuesCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.IssuesCount }).(pulumi.Float64Output)
}

// Framework used for applying migrations.
func (o DatabaseOutput) MigrationFramework() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MigrationFramework }).(pulumi.StringOutput)
}

// Table name to use for copying schema migration data.
func (o DatabaseOutput) MigrationTableName() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MigrationTableName }).(pulumi.StringOutput)
}

// If the database requires multiple admins for deletion.
func (o DatabaseOutput) MultipleAdminsRequiredForDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.MultipleAdminsRequiredForDeletion }).(pulumi.BoolOutput)
}

// The name of this database.
func (o DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization this database belongs to.
func (o DatabaseOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The database plan.
func (o DatabaseOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// Whether web console is enabled for production branches.
func (o DatabaseOutput) ProductionBranchWebConsole() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.ProductionBranchWebConsole }).(pulumi.BoolOutput)
}

// The total number of database production branches.
func (o DatabaseOutput) ProductionBranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.ProductionBranchesCount }).(pulumi.Float64Output)
}

// If the database is ready to be used.
func (o DatabaseOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.Ready }).(pulumi.BoolOutput)
}

// The region the database lives in.
func (o DatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Whether an approval is required to deploy schema changes to this database.
func (o DatabaseOutput) RequireApprovalForDeploy() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.RequireApprovalForDeploy }).(pulumi.BoolOutput)
}

// Whether to restrict branch creation to one region.
func (o DatabaseOutput) RestrictBranchRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.RestrictBranchRegion }).(pulumi.BoolOutput)
}

// When the default branch schema was last changed.
func (o DatabaseOutput) SchemaLastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.SchemaLastUpdatedAt }).(pulumi.StringOutput)
}

// If the database is sharded.
func (o DatabaseOutput) Sharded() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.Sharded }).(pulumi.BoolOutput)
}

// State of the database.
func (o DatabaseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// When the database was last updated.
func (o DatabaseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL to the database API endpoint.
func (o DatabaseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
