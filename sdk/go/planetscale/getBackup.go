// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package planetscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sst/pulumi-planetscale/sdk/go/planetscale/internal"
)

// A PlanetScale backup.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sst/pulumi-planetscale/sdk/go/planetscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := planetscale.LookupBackup(ctx, &planetscale.LookupBackupArgs{
//				Organization: "example.com",
//				Database:     "example_db",
//				Branch:       "main",
//				Id:           "k20nb1b7ut18",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("backup", example)
//			return nil
//		})
//	}
//
// ```
func LookupBackup(ctx *pulumi.Context, args *LookupBackupArgs, opts ...pulumi.InvokeOption) (*LookupBackupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBackupResult
	err := ctx.Invoke("planetscale:index/getBackup:getBackup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackup.
type LookupBackupArgs struct {
	// The branch this backup belongs to.
	Branch string `pulumi:"branch"`
	// The database this backup belongs to.
	Database string `pulumi:"database"`
	// The ID of the backup.
	Id string `pulumi:"id"`
	// The organization this backup belongs to.
	Organization string `pulumi:"organization"`
}

// A collection of values returned by getBackup.
type LookupBackupResult struct {
	// The actor that created the backup.
	Actor GetBackupActor `pulumi:"actor"`
	// The backup policy being followed.
	BackupPolicy GetBackupBackupPolicy `pulumi:"backupPolicy"`
	// The branch this backup belongs to.
	Branch string `pulumi:"branch"`
	// When the backup was created.
	CreatedAt string `pulumi:"createdAt"`
	// The database this backup belongs to.
	Database string `pulumi:"database"`
	// The estimated storage cost of the backup.
	EstimatedStorageCost string `pulumi:"estimatedStorageCost"`
	// The ID of the backup.
	Id string `pulumi:"id"`
	// The name of the backup.
	Name string `pulumi:"name"`
	// The organization this backup belongs to.
	Organization string `pulumi:"organization"`
	// Whether or not the backup policy is required.
	Required bool `pulumi:"required"`
	// Branches that have been restored with this backup.
	RestoredBranches []string `pulumi:"restoredBranches"`
	// The size of the backup.
	Size float64 `pulumi:"size"`
	// The current state of the backup.
	State string `pulumi:"state"`
	// When the backup was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupBackupOutput(ctx *pulumi.Context, args LookupBackupOutputArgs, opts ...pulumi.InvokeOption) LookupBackupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBackupResult, error) {
			args := v.(LookupBackupArgs)
			r, err := LookupBackup(ctx, &args, opts...)
			var s LookupBackupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBackupResultOutput)
}

// A collection of arguments for invoking getBackup.
type LookupBackupOutputArgs struct {
	// The branch this backup belongs to.
	Branch pulumi.StringInput `pulumi:"branch"`
	// The database this backup belongs to.
	Database pulumi.StringInput `pulumi:"database"`
	// The ID of the backup.
	Id pulumi.StringInput `pulumi:"id"`
	// The organization this backup belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
}

func (LookupBackupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupArgs)(nil)).Elem()
}

// A collection of values returned by getBackup.
type LookupBackupResultOutput struct{ *pulumi.OutputState }

func (LookupBackupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupResult)(nil)).Elem()
}

func (o LookupBackupResultOutput) ToLookupBackupResultOutput() LookupBackupResultOutput {
	return o
}

func (o LookupBackupResultOutput) ToLookupBackupResultOutputWithContext(ctx context.Context) LookupBackupResultOutput {
	return o
}

// The actor that created the backup.
func (o LookupBackupResultOutput) Actor() GetBackupActorOutput {
	return o.ApplyT(func(v LookupBackupResult) GetBackupActor { return v.Actor }).(GetBackupActorOutput)
}

// The backup policy being followed.
func (o LookupBackupResultOutput) BackupPolicy() GetBackupBackupPolicyOutput {
	return o.ApplyT(func(v LookupBackupResult) GetBackupBackupPolicy { return v.BackupPolicy }).(GetBackupBackupPolicyOutput)
}

// The branch this backup belongs to.
func (o LookupBackupResultOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.Branch }).(pulumi.StringOutput)
}

// When the backup was created.
func (o LookupBackupResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The database this backup belongs to.
func (o LookupBackupResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.Database }).(pulumi.StringOutput)
}

// The estimated storage cost of the backup.
func (o LookupBackupResultOutput) EstimatedStorageCost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.EstimatedStorageCost }).(pulumi.StringOutput)
}

// The ID of the backup.
func (o LookupBackupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the backup.
func (o LookupBackupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The organization this backup belongs to.
func (o LookupBackupResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.Organization }).(pulumi.StringOutput)
}

// Whether or not the backup policy is required.
func (o LookupBackupResultOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupResult) bool { return v.Required }).(pulumi.BoolOutput)
}

// Branches that have been restored with this backup.
func (o LookupBackupResultOutput) RestoredBranches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBackupResult) []string { return v.RestoredBranches }).(pulumi.StringArrayOutput)
}

// The size of the backup.
func (o LookupBackupResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v LookupBackupResult) float64 { return v.Size }).(pulumi.Float64Output)
}

// The current state of the backup.
func (o LookupBackupResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.State }).(pulumi.StringOutput)
}

// When the backup was last updated.
func (o LookupBackupResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBackupResultOutput{})
}
