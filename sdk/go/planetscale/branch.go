// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package planetscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sst/pulumi-planetscale/sdk/go/planetscale/internal"
)

// A PlanetScale branch.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sst/pulumi-planetscale/sdk/go/planetscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := planetscale.NewBranch(ctx, "example", &planetscale.BranchArgs{
//				Database:     pulumi.String("example_db"),
//				Organization: pulumi.String("example"),
//				ParentBranch: pulumi.String("main"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Branch struct {
	pulumi.CustomResourceState

	// The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
	AccessHostUrl pulumi.StringOutput `pulumi:"accessHostUrl"`
	// The actor who created this branch.
	Actor BranchActorOutput `pulumi:"actor"`
	// The SKU representing the branch's cluster size.
	ClusterRateName pulumi.StringOutput `pulumi:"clusterRateName"`
	// When the branch was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The database this branch belongs to.
	Database pulumi.StringOutput `pulumi:"database"`
	// Planetscale app URL for the branch.
	HtmlUrl pulumi.StringOutput `pulumi:"htmlUrl"`
	// The ID of the backup from which the branch was restored.
	InitialRestoreId pulumi.StringOutput `pulumi:"initialRestoreId"`
	// The MySQL address for the branch.
	MysqlAddress pulumi.StringOutput `pulumi:"mysqlAddress"`
	// The address of the MySQL provider for the branch.
	MysqlEdgeAddress pulumi.StringOutput `pulumi:"mysqlEdgeAddress"`
	// The name of the branch.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization this branch belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The name of the parent branch from which the branch was created.
	ParentBranch pulumi.StringOutput `pulumi:"parentBranch"`
	// Whether or not the branch is a production branch.
	Production pulumi.BoolOutput `pulumi:"production"`
	// Whether or not the branch is ready to serve queries.
	Ready pulumi.BoolOutput `pulumi:"ready"`
	// The region in which this branch lives.
	Region BranchRegionOutput `pulumi:"region"`
	// When a user last marked a backup restore checklist as completed.
	RestoreChecklistCompletedAt pulumi.StringOutput `pulumi:"restoreChecklistCompletedAt"`
	// todo
	RestoredFromBranch BranchRestoredFromBranchOutput `pulumi:"restoredFromBranch"`
	// When the schema for the branch was last updated.
	SchemaLastUpdatedAt pulumi.StringOutput `pulumi:"schemaLastUpdatedAt"`
	// The number of shards in the branch.
	ShardCount pulumi.Float64Output `pulumi:"shardCount"`
	// Whether or not the branch is sharded.
	Sharded pulumi.BoolOutput `pulumi:"sharded"`
	// When the branch was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewBranch registers a new resource with the given unique name, arguments, and options.
func NewBranch(ctx *pulumi.Context,
	name string, args *BranchArgs, opts ...pulumi.ResourceOption) (*Branch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.ParentBranch == nil {
		return nil, errors.New("invalid value for required argument 'ParentBranch'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Branch
	err := ctx.RegisterResource("planetscale:index/branch:Branch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBranch gets an existing Branch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BranchState, opts ...pulumi.ResourceOption) (*Branch, error) {
	var resource Branch
	err := ctx.ReadResource("planetscale:index/branch:Branch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Branch resources.
type branchState struct {
	// The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
	AccessHostUrl *string `pulumi:"accessHostUrl"`
	// The actor who created this branch.
	Actor *BranchActor `pulumi:"actor"`
	// The SKU representing the branch's cluster size.
	ClusterRateName *string `pulumi:"clusterRateName"`
	// When the branch was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The database this branch belongs to.
	Database *string `pulumi:"database"`
	// Planetscale app URL for the branch.
	HtmlUrl *string `pulumi:"htmlUrl"`
	// The ID of the backup from which the branch was restored.
	InitialRestoreId *string `pulumi:"initialRestoreId"`
	// The MySQL address for the branch.
	MysqlAddress *string `pulumi:"mysqlAddress"`
	// The address of the MySQL provider for the branch.
	MysqlEdgeAddress *string `pulumi:"mysqlEdgeAddress"`
	// The name of the branch.
	Name *string `pulumi:"name"`
	// The organization this branch belongs to.
	Organization *string `pulumi:"organization"`
	// The name of the parent branch from which the branch was created.
	ParentBranch *string `pulumi:"parentBranch"`
	// Whether or not the branch is a production branch.
	Production *bool `pulumi:"production"`
	// Whether or not the branch is ready to serve queries.
	Ready *bool `pulumi:"ready"`
	// The region in which this branch lives.
	Region *BranchRegion `pulumi:"region"`
	// When a user last marked a backup restore checklist as completed.
	RestoreChecklistCompletedAt *string `pulumi:"restoreChecklistCompletedAt"`
	// todo
	RestoredFromBranch *BranchRestoredFromBranch `pulumi:"restoredFromBranch"`
	// When the schema for the branch was last updated.
	SchemaLastUpdatedAt *string `pulumi:"schemaLastUpdatedAt"`
	// The number of shards in the branch.
	ShardCount *float64 `pulumi:"shardCount"`
	// Whether or not the branch is sharded.
	Sharded *bool `pulumi:"sharded"`
	// When the branch was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type BranchState struct {
	// The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
	AccessHostUrl pulumi.StringPtrInput
	// The actor who created this branch.
	Actor BranchActorPtrInput
	// The SKU representing the branch's cluster size.
	ClusterRateName pulumi.StringPtrInput
	// When the branch was created.
	CreatedAt pulumi.StringPtrInput
	// The database this branch belongs to.
	Database pulumi.StringPtrInput
	// Planetscale app URL for the branch.
	HtmlUrl pulumi.StringPtrInput
	// The ID of the backup from which the branch was restored.
	InitialRestoreId pulumi.StringPtrInput
	// The MySQL address for the branch.
	MysqlAddress pulumi.StringPtrInput
	// The address of the MySQL provider for the branch.
	MysqlEdgeAddress pulumi.StringPtrInput
	// The name of the branch.
	Name pulumi.StringPtrInput
	// The organization this branch belongs to.
	Organization pulumi.StringPtrInput
	// The name of the parent branch from which the branch was created.
	ParentBranch pulumi.StringPtrInput
	// Whether or not the branch is a production branch.
	Production pulumi.BoolPtrInput
	// Whether or not the branch is ready to serve queries.
	Ready pulumi.BoolPtrInput
	// The region in which this branch lives.
	Region BranchRegionPtrInput
	// When a user last marked a backup restore checklist as completed.
	RestoreChecklistCompletedAt pulumi.StringPtrInput
	// todo
	RestoredFromBranch BranchRestoredFromBranchPtrInput
	// When the schema for the branch was last updated.
	SchemaLastUpdatedAt pulumi.StringPtrInput
	// The number of shards in the branch.
	ShardCount pulumi.Float64PtrInput
	// Whether or not the branch is sharded.
	Sharded pulumi.BoolPtrInput
	// When the branch was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (BranchState) ElementType() reflect.Type {
	return reflect.TypeOf((*branchState)(nil)).Elem()
}

type branchArgs struct {
	// The database this branch belongs to.
	Database string `pulumi:"database"`
	// The name of the branch.
	Name *string `pulumi:"name"`
	// The organization this branch belongs to.
	Organization string `pulumi:"organization"`
	// The name of the parent branch from which the branch was created.
	ParentBranch string `pulumi:"parentBranch"`
	// Whether or not the branch is a production branch.
	Production *bool `pulumi:"production"`
}

// The set of arguments for constructing a Branch resource.
type BranchArgs struct {
	// The database this branch belongs to.
	Database pulumi.StringInput
	// The name of the branch.
	Name pulumi.StringPtrInput
	// The organization this branch belongs to.
	Organization pulumi.StringInput
	// The name of the parent branch from which the branch was created.
	ParentBranch pulumi.StringInput
	// Whether or not the branch is a production branch.
	Production pulumi.BoolPtrInput
}

func (BranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*branchArgs)(nil)).Elem()
}

type BranchInput interface {
	pulumi.Input

	ToBranchOutput() BranchOutput
	ToBranchOutputWithContext(ctx context.Context) BranchOutput
}

func (*Branch) ElementType() reflect.Type {
	return reflect.TypeOf((**Branch)(nil)).Elem()
}

func (i *Branch) ToBranchOutput() BranchOutput {
	return i.ToBranchOutputWithContext(context.Background())
}

func (i *Branch) ToBranchOutputWithContext(ctx context.Context) BranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchOutput)
}

// BranchArrayInput is an input type that accepts BranchArray and BranchArrayOutput values.
// You can construct a concrete instance of `BranchArrayInput` via:
//
//	BranchArray{ BranchArgs{...} }
type BranchArrayInput interface {
	pulumi.Input

	ToBranchArrayOutput() BranchArrayOutput
	ToBranchArrayOutputWithContext(context.Context) BranchArrayOutput
}

type BranchArray []BranchInput

func (BranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Branch)(nil)).Elem()
}

func (i BranchArray) ToBranchArrayOutput() BranchArrayOutput {
	return i.ToBranchArrayOutputWithContext(context.Background())
}

func (i BranchArray) ToBranchArrayOutputWithContext(ctx context.Context) BranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchArrayOutput)
}

// BranchMapInput is an input type that accepts BranchMap and BranchMapOutput values.
// You can construct a concrete instance of `BranchMapInput` via:
//
//	BranchMap{ "key": BranchArgs{...} }
type BranchMapInput interface {
	pulumi.Input

	ToBranchMapOutput() BranchMapOutput
	ToBranchMapOutputWithContext(context.Context) BranchMapOutput
}

type BranchMap map[string]BranchInput

func (BranchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Branch)(nil)).Elem()
}

func (i BranchMap) ToBranchMapOutput() BranchMapOutput {
	return i.ToBranchMapOutputWithContext(context.Background())
}

func (i BranchMap) ToBranchMapOutputWithContext(ctx context.Context) BranchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchMapOutput)
}

type BranchOutput struct{ *pulumi.OutputState }

func (BranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Branch)(nil)).Elem()
}

func (o BranchOutput) ToBranchOutput() BranchOutput {
	return o
}

func (o BranchOutput) ToBranchOutputWithContext(ctx context.Context) BranchOutput {
	return o
}

// The access host URL for the branch. This is a legacy field, use `mysqlEdgeAddress`.
func (o BranchOutput) AccessHostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.AccessHostUrl }).(pulumi.StringOutput)
}

// The actor who created this branch.
func (o BranchOutput) Actor() BranchActorOutput {
	return o.ApplyT(func(v *Branch) BranchActorOutput { return v.Actor }).(BranchActorOutput)
}

// The SKU representing the branch's cluster size.
func (o BranchOutput) ClusterRateName() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.ClusterRateName }).(pulumi.StringOutput)
}

// When the branch was created.
func (o BranchOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The database this branch belongs to.
func (o BranchOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Planetscale app URL for the branch.
func (o BranchOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The ID of the backup from which the branch was restored.
func (o BranchOutput) InitialRestoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.InitialRestoreId }).(pulumi.StringOutput)
}

// The MySQL address for the branch.
func (o BranchOutput) MysqlAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.MysqlAddress }).(pulumi.StringOutput)
}

// The address of the MySQL provider for the branch.
func (o BranchOutput) MysqlEdgeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.MysqlEdgeAddress }).(pulumi.StringOutput)
}

// The name of the branch.
func (o BranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization this branch belongs to.
func (o BranchOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The name of the parent branch from which the branch was created.
func (o BranchOutput) ParentBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.ParentBranch }).(pulumi.StringOutput)
}

// Whether or not the branch is a production branch.
func (o BranchOutput) Production() pulumi.BoolOutput {
	return o.ApplyT(func(v *Branch) pulumi.BoolOutput { return v.Production }).(pulumi.BoolOutput)
}

// Whether or not the branch is ready to serve queries.
func (o BranchOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v *Branch) pulumi.BoolOutput { return v.Ready }).(pulumi.BoolOutput)
}

// The region in which this branch lives.
func (o BranchOutput) Region() BranchRegionOutput {
	return o.ApplyT(func(v *Branch) BranchRegionOutput { return v.Region }).(BranchRegionOutput)
}

// When a user last marked a backup restore checklist as completed.
func (o BranchOutput) RestoreChecklistCompletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.RestoreChecklistCompletedAt }).(pulumi.StringOutput)
}

// todo
func (o BranchOutput) RestoredFromBranch() BranchRestoredFromBranchOutput {
	return o.ApplyT(func(v *Branch) BranchRestoredFromBranchOutput { return v.RestoredFromBranch }).(BranchRestoredFromBranchOutput)
}

// When the schema for the branch was last updated.
func (o BranchOutput) SchemaLastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.SchemaLastUpdatedAt }).(pulumi.StringOutput)
}

// The number of shards in the branch.
func (o BranchOutput) ShardCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Branch) pulumi.Float64Output { return v.ShardCount }).(pulumi.Float64Output)
}

// Whether or not the branch is sharded.
func (o BranchOutput) Sharded() pulumi.BoolOutput {
	return o.ApplyT(func(v *Branch) pulumi.BoolOutput { return v.Sharded }).(pulumi.BoolOutput)
}

// When the branch was last updated.
func (o BranchOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Branch) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type BranchArrayOutput struct{ *pulumi.OutputState }

func (BranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Branch)(nil)).Elem()
}

func (o BranchArrayOutput) ToBranchArrayOutput() BranchArrayOutput {
	return o
}

func (o BranchArrayOutput) ToBranchArrayOutputWithContext(ctx context.Context) BranchArrayOutput {
	return o
}

func (o BranchArrayOutput) Index(i pulumi.IntInput) BranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Branch {
		return vs[0].([]*Branch)[vs[1].(int)]
	}).(BranchOutput)
}

type BranchMapOutput struct{ *pulumi.OutputState }

func (BranchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Branch)(nil)).Elem()
}

func (o BranchMapOutput) ToBranchMapOutput() BranchMapOutput {
	return o
}

func (o BranchMapOutput) ToBranchMapOutputWithContext(ctx context.Context) BranchMapOutput {
	return o
}

func (o BranchMapOutput) MapIndex(k pulumi.StringInput) BranchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Branch {
		return vs[0].(map[string]*Branch)[vs[1].(string)]
	}).(BranchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchInput)(nil)).Elem(), &Branch{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchArrayInput)(nil)).Elem(), BranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchMapInput)(nil)).Elem(), BranchMap{})
	pulumi.RegisterOutputType(BranchOutput{})
	pulumi.RegisterOutputType(BranchArrayOutput{})
	pulumi.RegisterOutputType(BranchMapOutput{})
}
