// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package planetscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sst/pulumi-planetscale/sdk/go/planetscale/internal"
)

// A PlanetScale database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sst/pulumi-planetscale/sdk/go/planetscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := planetscale.LookupDatabase(ctx, &planetscale.LookupDatabaseArgs{
//				Organization: "example",
//				Name:         "again",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("db", example)
//			return nil
//		})
//	}
//
// ```
func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("planetscale:index/getDatabase:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseArgs struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching *bool `pulumi:"allowDataBranching"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations *bool `pulumi:"automaticMigrations"`
	// If the database was created from an import, describes the import process.
	DataImport *GetDatabaseDataImport `pulumi:"dataImport"`
	// The default branch for the database.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries *bool `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount *float64 `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework *string `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName *string `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion *bool `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name string `pulumi:"name"`
	// The organization this database belongs to.
	Organization string `pulumi:"organization"`
	// The database plan.
	Plan *string `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole *bool `pulumi:"productionBranchWebConsole"`
	// The region the database lives in.
	Region *GetDatabaseRegion `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy *bool `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion *bool `pulumi:"restrictBranchRegion"`
}

// A collection of values returned by getDatabase.
type LookupDatabaseResult struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching bool `pulumi:"allowDataBranching"`
	// If the database has reached its backup restored branch limit.
	AtBackupRestoreBranchesLimit bool `pulumi:"atBackupRestoreBranchesLimit"`
	// If the database has reached its development branch limit.
	AtDevelopmentBranchLimit bool `pulumi:"atDevelopmentBranchLimit"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations bool `pulumi:"automaticMigrations"`
	// The total number of database branches.
	BranchesCount float64 `pulumi:"branchesCount"`
	// The URL to retrieve this database's branches via the API.
	BranchesUrl string `pulumi:"branchesUrl"`
	// When the database was created.
	CreatedAt string `pulumi:"createdAt"`
	// If the database was created from an import, describes the import process.
	DataImport *GetDatabaseDataImport `pulumi:"dataImport"`
	// The default branch for the database.
	DefaultBranch string `pulumi:"defaultBranch"`
	// Number of read only regions in the default branch.
	DefaultBranchReadOnlyRegionsCount float64 `pulumi:"defaultBranchReadOnlyRegionsCount"`
	// Number of shards in the default branch.
	DefaultBranchShardCount float64 `pulumi:"defaultBranchShardCount"`
	// Number of tables in the default branch schema.
	DefaultBranchTableCount float64 `pulumi:"defaultBranchTableCount"`
	// The total number of database development branches.
	DevelopmentBranchesCount float64 `pulumi:"developmentBranchesCount"`
	// The total number of database development branches.
	HtmlUrl string `pulumi:"htmlUrl"`
	// The ID of the database.
	Id string `pulumi:"id"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries bool `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount float64 `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework string `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName string `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion bool `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name string `pulumi:"name"`
	// The organization this database belongs to.
	Organization string `pulumi:"organization"`
	// The database plan.
	Plan string `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole bool `pulumi:"productionBranchWebConsole"`
	// The total number of database production branches.
	ProductionBranchesCount float64 `pulumi:"productionBranchesCount"`
	// If the database is ready to be used.
	Ready bool `pulumi:"ready"`
	// The region the database lives in.
	Region GetDatabaseRegion `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy bool `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion bool `pulumi:"restrictBranchRegion"`
	// When the default branch schema was last changed.
	SchemaLastUpdatedAt string `pulumi:"schemaLastUpdatedAt"`
	// If the database is sharded.
	Sharded bool `pulumi:"sharded"`
	// State of the database.
	State string `pulumi:"state"`
	// When the database was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The URL to the database API endpoint.
	Url string `pulumi:"url"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseResult, error) {
			args := v.(LookupDatabaseArgs)
			r, err := LookupDatabase(ctx, &args, opts...)
			var s LookupDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabaseResultOutput)
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseOutputArgs struct {
	// Whether seeding branches with data is enabled for all branches.
	AllowDataBranching pulumi.BoolPtrInput `pulumi:"allowDataBranching"`
	// Whether to automatically manage Rails migrations during deploy requests.
	AutomaticMigrations pulumi.BoolPtrInput `pulumi:"automaticMigrations"`
	// If the database was created from an import, describes the import process.
	DataImport GetDatabaseDataImportPtrInput `pulumi:"dataImport"`
	// The default branch for the database.
	DefaultBranch pulumi.StringPtrInput `pulumi:"defaultBranch"`
	// The URL to see this database's branches in the web UI.
	InsightsRawQueries pulumi.BoolPtrInput `pulumi:"insightsRawQueries"`
	// The total number of ongoing issues within a database.
	IssuesCount pulumi.Float64PtrInput `pulumi:"issuesCount"`
	// Framework used for applying migrations.
	MigrationFramework pulumi.StringPtrInput `pulumi:"migrationFramework"`
	// Table name to use for copying schema migration data.
	MigrationTableName pulumi.StringPtrInput `pulumi:"migrationTableName"`
	// If the database requires multiple admins for deletion.
	MultipleAdminsRequiredForDeletion pulumi.BoolPtrInput `pulumi:"multipleAdminsRequiredForDeletion"`
	// The name of this database.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization this database belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The database plan.
	Plan pulumi.StringPtrInput `pulumi:"plan"`
	// Whether web console is enabled for production branches.
	ProductionBranchWebConsole pulumi.BoolPtrInput `pulumi:"productionBranchWebConsole"`
	// The region the database lives in.
	Region GetDatabaseRegionPtrInput `pulumi:"region"`
	// Whether an approval is required to deploy schema changes to this database.
	RequireApprovalForDeploy pulumi.BoolPtrInput `pulumi:"requireApprovalForDeploy"`
	// Whether to restrict branch creation to one region.
	RestrictBranchRegion pulumi.BoolPtrInput `pulumi:"restrictBranchRegion"`
}

func (LookupDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getDatabase.
type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutput() LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutputWithContext(ctx context.Context) LookupDatabaseResultOutput {
	return o
}

// Whether seeding branches with data is enabled for all branches.
func (o LookupDatabaseResultOutput) AllowDataBranching() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.AllowDataBranching }).(pulumi.BoolOutput)
}

// If the database has reached its backup restored branch limit.
func (o LookupDatabaseResultOutput) AtBackupRestoreBranchesLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.AtBackupRestoreBranchesLimit }).(pulumi.BoolOutput)
}

// If the database has reached its development branch limit.
func (o LookupDatabaseResultOutput) AtDevelopmentBranchLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.AtDevelopmentBranchLimit }).(pulumi.BoolOutput)
}

// Whether to automatically manage Rails migrations during deploy requests.
func (o LookupDatabaseResultOutput) AutomaticMigrations() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.AutomaticMigrations }).(pulumi.BoolOutput)
}

// The total number of database branches.
func (o LookupDatabaseResultOutput) BranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.BranchesCount }).(pulumi.Float64Output)
}

// The URL to retrieve this database's branches via the API.
func (o LookupDatabaseResultOutput) BranchesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.BranchesUrl }).(pulumi.StringOutput)
}

// When the database was created.
func (o LookupDatabaseResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// If the database was created from an import, describes the import process.
func (o LookupDatabaseResultOutput) DataImport() GetDatabaseDataImportPtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *GetDatabaseDataImport { return v.DataImport }).(GetDatabaseDataImportPtrOutput)
}

// The default branch for the database.
func (o LookupDatabaseResultOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Number of read only regions in the default branch.
func (o LookupDatabaseResultOutput) DefaultBranchReadOnlyRegionsCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.DefaultBranchReadOnlyRegionsCount }).(pulumi.Float64Output)
}

// Number of shards in the default branch.
func (o LookupDatabaseResultOutput) DefaultBranchShardCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.DefaultBranchShardCount }).(pulumi.Float64Output)
}

// Number of tables in the default branch schema.
func (o LookupDatabaseResultOutput) DefaultBranchTableCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.DefaultBranchTableCount }).(pulumi.Float64Output)
}

// The total number of database development branches.
func (o LookupDatabaseResultOutput) DevelopmentBranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.DevelopmentBranchesCount }).(pulumi.Float64Output)
}

// The total number of database development branches.
func (o LookupDatabaseResultOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The ID of the database.
func (o LookupDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The URL to see this database's branches in the web UI.
func (o LookupDatabaseResultOutput) InsightsRawQueries() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.InsightsRawQueries }).(pulumi.BoolOutput)
}

// The total number of ongoing issues within a database.
func (o LookupDatabaseResultOutput) IssuesCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.IssuesCount }).(pulumi.Float64Output)
}

// Framework used for applying migrations.
func (o LookupDatabaseResultOutput) MigrationFramework() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.MigrationFramework }).(pulumi.StringOutput)
}

// Table name to use for copying schema migration data.
func (o LookupDatabaseResultOutput) MigrationTableName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.MigrationTableName }).(pulumi.StringOutput)
}

// If the database requires multiple admins for deletion.
func (o LookupDatabaseResultOutput) MultipleAdminsRequiredForDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.MultipleAdminsRequiredForDeletion }).(pulumi.BoolOutput)
}

// The name of this database.
func (o LookupDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The organization this database belongs to.
func (o LookupDatabaseResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Organization }).(pulumi.StringOutput)
}

// The database plan.
func (o LookupDatabaseResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Plan }).(pulumi.StringOutput)
}

// Whether web console is enabled for production branches.
func (o LookupDatabaseResultOutput) ProductionBranchWebConsole() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.ProductionBranchWebConsole }).(pulumi.BoolOutput)
}

// The total number of database production branches.
func (o LookupDatabaseResultOutput) ProductionBranchesCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.ProductionBranchesCount }).(pulumi.Float64Output)
}

// If the database is ready to be used.
func (o LookupDatabaseResultOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The region the database lives in.
func (o LookupDatabaseResultOutput) Region() GetDatabaseRegionOutput {
	return o.ApplyT(func(v LookupDatabaseResult) GetDatabaseRegion { return v.Region }).(GetDatabaseRegionOutput)
}

// Whether an approval is required to deploy schema changes to this database.
func (o LookupDatabaseResultOutput) RequireApprovalForDeploy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.RequireApprovalForDeploy }).(pulumi.BoolOutput)
}

// Whether to restrict branch creation to one region.
func (o LookupDatabaseResultOutput) RestrictBranchRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.RestrictBranchRegion }).(pulumi.BoolOutput)
}

// When the default branch schema was last changed.
func (o LookupDatabaseResultOutput) SchemaLastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.SchemaLastUpdatedAt }).(pulumi.StringOutput)
}

// If the database is sharded.
func (o LookupDatabaseResultOutput) Sharded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseResult) bool { return v.Sharded }).(pulumi.BoolOutput)
}

// State of the database.
func (o LookupDatabaseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.State }).(pulumi.StringOutput)
}

// When the database was last updated.
func (o LookupDatabaseResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL to the database API endpoint.
func (o LookupDatabaseResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseResultOutput{})
}
